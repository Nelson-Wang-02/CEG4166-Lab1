
getStartLab1-task1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005778  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08005948  08005948  00015948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ab4  08005ab4  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005ab4  08005ab4  00015ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005abc  08005abc  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005abc  08005abc  00015abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ac0  08005ac0  00015ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bf8  20000060  08005b24  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c58  08005b24  00024c58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018a4f  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034ba  00000000  00000000  00038b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001480  00000000  00000000  0003bfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff4  00000000  00000000  0003d460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000332c  00000000  00000000  0003e454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017767  00000000  00000000  00041780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dae77  00000000  00000000  00058ee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005948  00000000  00000000  00133d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  001396a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005930 	.word	0x08005930

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08005930 	.word	0x08005930

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fb46 	bl	8000ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f870 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f90a 	bl	8000730 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800051c:	f000 f8de 	bl	80006dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000520:	f002 fa24 	bl	800296c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binarySemAutoGreen */
  binarySemAutoGreenHandle = osSemaphoreNew(1, 0, &binarySemAutoGreen_attributes);
 8000524:	4a21      	ldr	r2, [pc, #132]	; (80005ac <main+0xa0>)
 8000526:	2100      	movs	r1, #0
 8000528:	2001      	movs	r0, #1
 800052a:	f002 fb16 	bl	8002b5a <osSemaphoreNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a1f      	ldr	r2, [pc, #124]	; (80005b0 <main+0xa4>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of binarySemAutoYellow */
  binarySemAutoYellowHandle = osSemaphoreNew(1, 0, &binarySemAutoYellow_attributes);
 8000534:	4a1f      	ldr	r2, [pc, #124]	; (80005b4 <main+0xa8>)
 8000536:	2100      	movs	r1, #0
 8000538:	2001      	movs	r0, #1
 800053a:	f002 fb0e 	bl	8002b5a <osSemaphoreNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a1d      	ldr	r2, [pc, #116]	; (80005b8 <main+0xac>)
 8000542:	6013      	str	r3, [r2, #0]

  /* creation of binarySemAutoRed */
  binarySemAutoRedHandle = osSemaphoreNew(1, 0, &binarySemAutoRed_attributes);
 8000544:	4a1d      	ldr	r2, [pc, #116]	; (80005bc <main+0xb0>)
 8000546:	2100      	movs	r1, #0
 8000548:	2001      	movs	r0, #1
 800054a:	f002 fb06 	bl	8002b5a <osSemaphoreNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a1b      	ldr	r2, [pc, #108]	; (80005c0 <main+0xb4>)
 8000552:	6013      	str	r3, [r2, #0]

  /* creation of binarySemPedGreen */
  binarySemPedGreenHandle = osSemaphoreNew(1, 0, &binarySemPedGreen_attributes);
 8000554:	4a1b      	ldr	r2, [pc, #108]	; (80005c4 <main+0xb8>)
 8000556:	2100      	movs	r1, #0
 8000558:	2001      	movs	r0, #1
 800055a:	f002 fafe 	bl	8002b5a <osSemaphoreNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a19      	ldr	r2, [pc, #100]	; (80005c8 <main+0xbc>)
 8000562:	6013      	str	r3, [r2, #0]

  /* creation of binarySemPedRed */
  binarySemPedRedHandle = osSemaphoreNew(1, 0, &binarySemPedRed_attributes);
 8000564:	4a19      	ldr	r2, [pc, #100]	; (80005cc <main+0xc0>)
 8000566:	2100      	movs	r1, #0
 8000568:	2001      	movs	r0, #1
 800056a:	f002 faf6 	bl	8002b5a <osSemaphoreNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a17      	ldr	r2, [pc, #92]	; (80005d0 <main+0xc4>)
 8000572:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of autoGreen */
  autoGreenHandle = osThreadNew(StartAutoGreen, NULL, &autoGreen_attributes);
 8000574:	4a17      	ldr	r2, [pc, #92]	; (80005d4 <main+0xc8>)
 8000576:	2100      	movs	r1, #0
 8000578:	4817      	ldr	r0, [pc, #92]	; (80005d8 <main+0xcc>)
 800057a:	f002 fa41 	bl	8002a00 <osThreadNew>
 800057e:	4603      	mov	r3, r0
 8000580:	4a16      	ldr	r2, [pc, #88]	; (80005dc <main+0xd0>)
 8000582:	6013      	str	r3, [r2, #0]

  /* creation of autoYellow */
  autoYellowHandle = osThreadNew(StartAutoYellow, NULL, &autoYellow_attributes);
 8000584:	4a16      	ldr	r2, [pc, #88]	; (80005e0 <main+0xd4>)
 8000586:	2100      	movs	r1, #0
 8000588:	4816      	ldr	r0, [pc, #88]	; (80005e4 <main+0xd8>)
 800058a:	f002 fa39 	bl	8002a00 <osThreadNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a15      	ldr	r2, [pc, #84]	; (80005e8 <main+0xdc>)
 8000592:	6013      	str	r3, [r2, #0]

  /* creation of autoRed */
  autoRedHandle = osThreadNew(StartAutoRed, NULL, &autoRed_attributes);
 8000594:	4a15      	ldr	r2, [pc, #84]	; (80005ec <main+0xe0>)
 8000596:	2100      	movs	r1, #0
 8000598:	4815      	ldr	r0, [pc, #84]	; (80005f0 <main+0xe4>)
 800059a:	f002 fa31 	bl	8002a00 <osThreadNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a14      	ldr	r2, [pc, #80]	; (80005f4 <main+0xe8>)
 80005a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005a4:	f002 fa06 	bl	80029b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <main+0x9c>
 80005aa:	bf00      	nop
 80005ac:	08005a4c 	.word	0x08005a4c
 80005b0:	200000d0 	.word	0x200000d0
 80005b4:	08005a5c 	.word	0x08005a5c
 80005b8:	200000d4 	.word	0x200000d4
 80005bc:	08005a6c 	.word	0x08005a6c
 80005c0:	200000d8 	.word	0x200000d8
 80005c4:	08005a7c 	.word	0x08005a7c
 80005c8:	200000dc 	.word	0x200000dc
 80005cc:	08005a8c 	.word	0x08005a8c
 80005d0:	200000e0 	.word	0x200000e0
 80005d4:	080059e0 	.word	0x080059e0
 80005d8:	08000811 	.word	0x08000811
 80005dc:	200000c4 	.word	0x200000c4
 80005e0:	08005a04 	.word	0x08005a04
 80005e4:	0800084d 	.word	0x0800084d
 80005e8:	200000c8 	.word	0x200000c8
 80005ec:	08005a28 	.word	0x08005a28
 80005f0:	080008a5 	.word	0x080008a5
 80005f4:	200000cc 	.word	0x200000cc

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 031c 	add.w	r3, r7, #28
 8000602:	2234      	movs	r2, #52	; 0x34
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f005 f8a8 	bl	800575c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 0308 	add.w	r3, r7, #8
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	4b2c      	ldr	r3, [pc, #176]	; (80006d4 <SystemClock_Config+0xdc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a2b      	ldr	r2, [pc, #172]	; (80006d4 <SystemClock_Config+0xdc>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemClock_Config+0xdc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	607b      	str	r3, [r7, #4]
 8000636:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	2300      	movs	r3, #0
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <SystemClock_Config+0xe0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a25      	ldr	r2, [pc, #148]	; (80006d8 <SystemClock_Config+0xe0>)
 8000642:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemClock_Config+0xe0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000666:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000668:	2304      	movs	r3, #4
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800066c:	23b4      	movs	r3, #180	; 0xb4
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000674:	2302      	movs	r3, #2
 8000676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000678:	2302      	movs	r3, #2
 800067a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4618      	mov	r0, r3
 8000682:	f001 f92b 	bl	80018dc <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800068c:	f000 f936 	bl	80008fc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000690:	f000 fd58 	bl	8001144 <HAL_PWREx_EnableOverDrive>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800069a:	f000 f92f 	bl	80008fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a2:	2302      	movs	r3, #2
 80006a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b6:	f107 0308 	add.w	r3, r7, #8
 80006ba:	2105      	movs	r1, #5
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fd91 	bl	80011e4 <HAL_RCC_ClockConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006c8:	f000 f918 	bl	80008fc <Error_Handler>
  }
}
 80006cc:	bf00      	nop
 80006ce:	3750      	adds	r7, #80	; 0x50
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	; (800072c <MX_USART2_UART_Init+0x50>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 8000714:	f001 fe22 	bl	800235c <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800071e:	f000 f8ed 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	2000007c 	.word	0x2000007c
 800072c:	40004400 	.word	0x40004400

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	4b2e      	ldr	r3, [pc, #184]	; (8000804 <MX_GPIO_Init+0xd4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a2d      	ldr	r2, [pc, #180]	; (8000804 <MX_GPIO_Init+0xd4>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <MX_GPIO_Init+0xd4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	4b27      	ldr	r3, [pc, #156]	; (8000804 <MX_GPIO_Init+0xd4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a26      	ldr	r2, [pc, #152]	; (8000804 <MX_GPIO_Init+0xd4>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b24      	ldr	r3, [pc, #144]	; (8000804 <MX_GPIO_Init+0xd4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <MX_GPIO_Init+0xd4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a1f      	ldr	r2, [pc, #124]	; (8000804 <MX_GPIO_Init+0xd4>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_GPIO_Init+0xd4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <MX_GPIO_Init+0xd4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a18      	ldr	r2, [pc, #96]	; (8000804 <MX_GPIO_Init+0xd4>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_GPIO_Init+0xd4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 6187 	mov.w	r1, #1080	; 0x438
 80007bc:	4812      	ldr	r0, [pc, #72]	; (8000808 <MX_GPIO_Init+0xd8>)
 80007be:	f000 fca7 	bl	8001110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	480d      	ldr	r0, [pc, #52]	; (800080c <MX_GPIO_Init+0xdc>)
 80007d8:	f000 fb06 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80007dc:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_GPIO_Init+0xd8>)
 80007f6:	f000 faf7 	bl	8000de8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007fa:	bf00      	nop
 80007fc:	3728      	adds	r7, #40	; 0x28
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40020400 	.word	0x40020400
 800080c:	40020800 	.word	0x40020800

08000810 <StartAutoGreen>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartAutoGreen */
void StartAutoGreen(void *argument)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  osDelay(12000);
 8000818:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 800081c:	f002 f982 	bl	8002b24 <osDelay>

	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3, GPIO_PIN_SET);
 8000820:	2201      	movs	r2, #1
 8000822:	2108      	movs	r1, #8
 8000824:	4808      	ldr	r0, [pc, #32]	; (8000848 <StartAutoGreen+0x38>)
 8000826:	f000 fc73 	bl	8001110 <HAL_GPIO_WritePin>

	  osDelay(10000);
 800082a:	f242 7010 	movw	r0, #10000	; 0x2710
 800082e:	f002 f979 	bl	8002b24 <osDelay>

	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3, GPIO_PIN_RESET);//Auto Green LED
 8000832:	2200      	movs	r2, #0
 8000834:	2108      	movs	r1, #8
 8000836:	4804      	ldr	r0, [pc, #16]	; (8000848 <StartAutoGreen+0x38>)
 8000838:	f000 fc6a 	bl	8001110 <HAL_GPIO_WritePin>

	  osDelay(3000);
 800083c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000840:	f002 f970 	bl	8002b24 <osDelay>
	  osDelay(12000);
 8000844:	e7e8      	b.n	8000818 <StartAutoGreen+0x8>
 8000846:	bf00      	nop
 8000848:	40020400 	.word	0x40020400

0800084c <StartAutoYellow>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAutoYellow */
void StartAutoYellow(void *argument)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAutoYellow */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(10000);
 8000854:	f242 7010 	movw	r0, #10000	; 0x2710
 8000858:	f002 f964 	bl	8002b24 <osDelay>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	2120      	movs	r1, #32
 8000860:	480f      	ldr	r0, [pc, #60]	; (80008a0 <StartAutoYellow+0x54>)
 8000862:	f000 fc55 	bl	8001110 <HAL_GPIO_WritePin>
	  osDelay(2000);
 8000866:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800086a:	f002 f95b 	bl	8002b24 <osDelay>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2120      	movs	r1, #32
 8000872:	480b      	ldr	r0, [pc, #44]	; (80008a0 <StartAutoYellow+0x54>)
 8000874:	f000 fc4c 	bl	8001110 <HAL_GPIO_WritePin>
	  osDelay(10000);
 8000878:	f242 7010 	movw	r0, #10000	; 0x2710
 800087c:	f002 f952 	bl	8002b24 <osDelay>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5, GPIO_PIN_SET);
 8000880:	2201      	movs	r2, #1
 8000882:	2120      	movs	r1, #32
 8000884:	4806      	ldr	r0, [pc, #24]	; (80008a0 <StartAutoYellow+0x54>)
 8000886:	f000 fc43 	bl	8001110 <HAL_GPIO_WritePin>
	  osDelay(3000);
 800088a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800088e:	f002 f949 	bl	8002b24 <osDelay>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2120      	movs	r1, #32
 8000896:	4802      	ldr	r0, [pc, #8]	; (80008a0 <StartAutoYellow+0x54>)
 8000898:	f000 fc3a 	bl	8001110 <HAL_GPIO_WritePin>
	  osDelay(10000);
 800089c:	e7da      	b.n	8000854 <StartAutoYellow+0x8>
 800089e:	bf00      	nop
 80008a0:	40020400 	.word	0x40020400

080008a4 <StartAutoRed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAutoRed */
void StartAutoRed(void *argument)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAutoRed */
  /* Infinite loop */
  for(;;)
  {

	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4, GPIO_PIN_SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2110      	movs	r1, #16
 80008b0:	4808      	ldr	r0, [pc, #32]	; (80008d4 <StartAutoRed+0x30>)
 80008b2:	f000 fc2d 	bl	8001110 <HAL_GPIO_WritePin>
	  osDelay(12000);
 80008b6:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 80008ba:	f002 f933 	bl	8002b24 <osDelay>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2110      	movs	r1, #16
 80008c2:	4804      	ldr	r0, [pc, #16]	; (80008d4 <StartAutoRed+0x30>)
 80008c4:	f000 fc24 	bl	8001110 <HAL_GPIO_WritePin>
	  osDelay(13000);
 80008c8:	f243 20c8 	movw	r0, #13000	; 0x32c8
 80008cc:	f002 f92a 	bl	8002b24 <osDelay>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4, GPIO_PIN_SET);
 80008d0:	e7ec      	b.n	80008ac <StartAutoRed+0x8>
 80008d2:	bf00      	nop
 80008d4:	40020400 	.word	0x40020400

080008d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d101      	bne.n	80008ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ea:	f000 f97b 	bl	8000be4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40001000 	.word	0x40001000

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000904:	e7fe      	b.n	8000904 <Error_Handler+0x8>
	...

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <HAL_MspInit+0x54>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	4a11      	ldr	r2, [pc, #68]	; (800095c <HAL_MspInit+0x54>)
 8000918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091c:	6453      	str	r3, [r2, #68]	; 0x44
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <HAL_MspInit+0x54>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <HAL_MspInit+0x54>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <HAL_MspInit+0x54>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000938:	6413      	str	r3, [r2, #64]	; 0x40
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <HAL_MspInit+0x54>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	210f      	movs	r1, #15
 800094a:	f06f 0001 	mvn.w	r0, #1
 800094e:	f000 fa21 	bl	8000d94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800

08000960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	; 0x28
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a19      	ldr	r2, [pc, #100]	; (80009e4 <HAL_UART_MspInit+0x84>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d12b      	bne.n	80009da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <HAL_UART_MspInit+0x88>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	4a17      	ldr	r2, [pc, #92]	; (80009e8 <HAL_UART_MspInit+0x88>)
 800098c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000990:	6413      	str	r3, [r2, #64]	; 0x40
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <HAL_UART_MspInit+0x88>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <HAL_UART_MspInit+0x88>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a10      	ldr	r2, [pc, #64]	; (80009e8 <HAL_UART_MspInit+0x88>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <HAL_UART_MspInit+0x88>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009ba:	230c      	movs	r3, #12
 80009bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c6:	2303      	movs	r3, #3
 80009c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ca:	2307      	movs	r3, #7
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4619      	mov	r1, r3
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <HAL_UART_MspInit+0x8c>)
 80009d6:	f000 fa07 	bl	8000de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009da:	bf00      	nop
 80009dc:	3728      	adds	r7, #40	; 0x28
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40004400 	.word	0x40004400
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020000 	.word	0x40020000

080009f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08e      	sub	sp, #56	; 0x38
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	4b33      	ldr	r3, [pc, #204]	; (8000ad4 <HAL_InitTick+0xe4>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	4a32      	ldr	r2, [pc, #200]	; (8000ad4 <HAL_InitTick+0xe4>)
 8000a0a:	f043 0310 	orr.w	r3, r3, #16
 8000a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a10:	4b30      	ldr	r3, [pc, #192]	; (8000ad4 <HAL_InitTick+0xe4>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	f003 0310 	and.w	r3, r3, #16
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a1c:	f107 0210 	add.w	r2, r7, #16
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4611      	mov	r1, r2
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 fcf6 	bl	8001418 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a2c:	6a3b      	ldr	r3, [r7, #32]
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d103      	bne.n	8000a3e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a36:	f000 fcc7 	bl	80013c8 <HAL_RCC_GetPCLK1Freq>
 8000a3a:	6378      	str	r0, [r7, #52]	; 0x34
 8000a3c:	e004      	b.n	8000a48 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a3e:	f000 fcc3 	bl	80013c8 <HAL_RCC_GetPCLK1Freq>
 8000a42:	4603      	mov	r3, r0
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a4a:	4a23      	ldr	r2, [pc, #140]	; (8000ad8 <HAL_InitTick+0xe8>)
 8000a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a50:	0c9b      	lsrs	r3, r3, #18
 8000a52:	3b01      	subs	r3, #1
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a56:	4b21      	ldr	r3, [pc, #132]	; (8000adc <HAL_InitTick+0xec>)
 8000a58:	4a21      	ldr	r2, [pc, #132]	; (8000ae0 <HAL_InitTick+0xf0>)
 8000a5a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	; (8000adc <HAL_InitTick+0xec>)
 8000a5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a62:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a64:	4a1d      	ldr	r2, [pc, #116]	; (8000adc <HAL_InitTick+0xec>)
 8000a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a68:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <HAL_InitTick+0xec>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <HAL_InitTick+0xec>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a76:	4b19      	ldr	r3, [pc, #100]	; (8000adc <HAL_InitTick+0xec>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a7c:	4817      	ldr	r0, [pc, #92]	; (8000adc <HAL_InitTick+0xec>)
 8000a7e:	f001 f9cb 	bl	8001e18 <HAL_TIM_Base_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d11b      	bne.n	8000ac8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a90:	4812      	ldr	r0, [pc, #72]	; (8000adc <HAL_InitTick+0xec>)
 8000a92:	f001 fa1b 	bl	8001ecc <HAL_TIM_Base_Start_IT>
 8000a96:	4603      	mov	r3, r0
 8000a98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d111      	bne.n	8000ac8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000aa4:	2036      	movs	r0, #54	; 0x36
 8000aa6:	f000 f991 	bl	8000dcc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b0f      	cmp	r3, #15
 8000aae:	d808      	bhi.n	8000ac2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	2036      	movs	r0, #54	; 0x36
 8000ab6:	f000 f96d 	bl	8000d94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <HAL_InitTick+0xf4>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	e002      	b.n	8000ac8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ac8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3738      	adds	r7, #56	; 0x38
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	431bde83 	.word	0x431bde83
 8000adc:	200000e4 	.word	0x200000e4
 8000ae0:	40001000 	.word	0x40001000
 8000ae4:	20000004 	.word	0x20000004

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aec:	e7fe      	b.n	8000aec <NMI_Handler+0x4>

08000aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <MemManage_Handler+0x4>

08000afa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b18:	4802      	ldr	r0, [pc, #8]	; (8000b24 <TIM6_DAC_IRQHandler+0x10>)
 8000b1a:	f001 fa47 	bl	8001fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200000e4 	.word	0x200000e4

08000b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <SystemInit+0x20>)
 8000b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b32:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <SystemInit+0x20>)
 8000b34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b50:	f7ff ffea 	bl	8000b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b54:	480c      	ldr	r0, [pc, #48]	; (8000b88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b56:	490d      	ldr	r1, [pc, #52]	; (8000b8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b58:	4a0d      	ldr	r2, [pc, #52]	; (8000b90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b6c:	4c0a      	ldr	r4, [pc, #40]	; (8000b98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b7a:	f004 fe4d 	bl	8005818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b7e:	f7ff fcc5 	bl	800050c <main>
  bx  lr    
 8000b82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b8c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b90:	08005ac4 	.word	0x08005ac4
  ldr r2, =_sbss
 8000b94:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b98:	20004c58 	.word	0x20004c58

08000b9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b9c:	e7fe      	b.n	8000b9c <ADC_IRQHandler>
	...

08000ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	; (8000be0 <HAL_Init+0x40>)
 8000baa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <HAL_Init+0x40>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <HAL_Init+0x40>)
 8000bb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <HAL_Init+0x40>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <HAL_Init+0x40>)
 8000bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc8:	2003      	movs	r0, #3
 8000bca:	f000 f8d8 	bl	8000d7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bce:	200f      	movs	r0, #15
 8000bd0:	f7ff ff0e 	bl	80009f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd4:	f7ff fe98 	bl	8000908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40023c00 	.word	0x40023c00

08000be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_IncTick+0x20>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <HAL_IncTick+0x24>)
 8000bf6:	6013      	str	r3, [r2, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000008 	.word	0x20000008
 8000c08:	2000012c 	.word	0x2000012c

08000c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c10:	4b03      	ldr	r3, [pc, #12]	; (8000c20 <HAL_GetTick+0x14>)
 8000c12:	681b      	ldr	r3, [r3, #0]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	2000012c 	.word	0x2000012c

08000c24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3a:	68ba      	ldr	r2, [r7, #8]
 8000c3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c40:	4013      	ands	r3, r2
 8000c42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c56:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <__NVIC_SetPriorityGrouping+0x44>)
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	60d3      	str	r3, [r2, #12]
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <__NVIC_GetPriorityGrouping+0x18>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	0a1b      	lsrs	r3, r3, #8
 8000c76:	f003 0307 	and.w	r3, r3, #7
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db0b      	blt.n	8000cb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	f003 021f 	and.w	r2, r3, #31
 8000ca0:	4907      	ldr	r1, [pc, #28]	; (8000cc0 <__NVIC_EnableIRQ+0x38>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	095b      	lsrs	r3, r3, #5
 8000ca8:	2001      	movs	r0, #1
 8000caa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000e100 	.word	0xe000e100

08000cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	db0a      	blt.n	8000cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	490c      	ldr	r1, [pc, #48]	; (8000d10 <__NVIC_SetPriority+0x4c>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	0112      	lsls	r2, r2, #4
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cec:	e00a      	b.n	8000d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4908      	ldr	r1, [pc, #32]	; (8000d14 <__NVIC_SetPriority+0x50>)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	3b04      	subs	r3, #4
 8000cfc:	0112      	lsls	r2, r2, #4
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	440b      	add	r3, r1
 8000d02:	761a      	strb	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f1c3 0307 	rsb	r3, r3, #7
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	bf28      	it	cs
 8000d36:	2304      	movcs	r3, #4
 8000d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	2b06      	cmp	r3, #6
 8000d40:	d902      	bls.n	8000d48 <NVIC_EncodePriority+0x30>
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3b03      	subs	r3, #3
 8000d46:	e000      	b.n	8000d4a <NVIC_EncodePriority+0x32>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43da      	mvns	r2, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d60:	f04f 31ff 	mov.w	r1, #4294967295
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6a:	43d9      	mvns	r1, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	4313      	orrs	r3, r2
         );
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3724      	adds	r7, #36	; 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff ff4c 	bl	8000c24 <__NVIC_SetPriorityGrouping>
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
 8000da0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000da6:	f7ff ff61 	bl	8000c6c <__NVIC_GetPriorityGrouping>
 8000daa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	68b9      	ldr	r1, [r7, #8]
 8000db0:	6978      	ldr	r0, [r7, #20]
 8000db2:	f7ff ffb1 	bl	8000d18 <NVIC_EncodePriority>
 8000db6:	4602      	mov	r2, r0
 8000db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ff80 	bl	8000cc4 <__NVIC_SetPriority>
}
 8000dc4:	bf00      	nop
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff54 	bl	8000c88 <__NVIC_EnableIRQ>
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b089      	sub	sp, #36	; 0x24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
 8000e02:	e165      	b.n	80010d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e04:	2201      	movs	r2, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	697a      	ldr	r2, [r7, #20]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	f040 8154 	bne.w	80010ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d005      	beq.n	8000e3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d130      	bne.n	8000e9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	2203      	movs	r2, #3
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	68da      	ldr	r2, [r3, #12]
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e70:	2201      	movs	r2, #1
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	091b      	lsrs	r3, r3, #4
 8000e86:	f003 0201 	and.w	r2, r3, #1
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	2b03      	cmp	r3, #3
 8000ea6:	d017      	beq.n	8000ed8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d123      	bne.n	8000f2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	08da      	lsrs	r2, r3, #3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3208      	adds	r2, #8
 8000eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	f003 0307 	and.w	r3, r3, #7
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	220f      	movs	r2, #15
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	691a      	ldr	r2, [r3, #16]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	08da      	lsrs	r2, r3, #3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3208      	adds	r2, #8
 8000f26:	69b9      	ldr	r1, [r7, #24]
 8000f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0203 	and.w	r2, r3, #3
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f000 80ae 	beq.w	80010ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b5d      	ldr	r3, [pc, #372]	; (80010e8 <HAL_GPIO_Init+0x300>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	4a5c      	ldr	r2, [pc, #368]	; (80010e8 <HAL_GPIO_Init+0x300>)
 8000f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7e:	4b5a      	ldr	r3, [pc, #360]	; (80010e8 <HAL_GPIO_Init+0x300>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f8a:	4a58      	ldr	r2, [pc, #352]	; (80010ec <HAL_GPIO_Init+0x304>)
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	089b      	lsrs	r3, r3, #2
 8000f90:	3302      	adds	r3, #2
 8000f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	220f      	movs	r2, #15
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a4f      	ldr	r2, [pc, #316]	; (80010f0 <HAL_GPIO_Init+0x308>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d025      	beq.n	8001002 <HAL_GPIO_Init+0x21a>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a4e      	ldr	r2, [pc, #312]	; (80010f4 <HAL_GPIO_Init+0x30c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d01f      	beq.n	8000ffe <HAL_GPIO_Init+0x216>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4d      	ldr	r2, [pc, #308]	; (80010f8 <HAL_GPIO_Init+0x310>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d019      	beq.n	8000ffa <HAL_GPIO_Init+0x212>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4c      	ldr	r2, [pc, #304]	; (80010fc <HAL_GPIO_Init+0x314>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d013      	beq.n	8000ff6 <HAL_GPIO_Init+0x20e>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a4b      	ldr	r2, [pc, #300]	; (8001100 <HAL_GPIO_Init+0x318>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d00d      	beq.n	8000ff2 <HAL_GPIO_Init+0x20a>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a4a      	ldr	r2, [pc, #296]	; (8001104 <HAL_GPIO_Init+0x31c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d007      	beq.n	8000fee <HAL_GPIO_Init+0x206>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a49      	ldr	r2, [pc, #292]	; (8001108 <HAL_GPIO_Init+0x320>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d101      	bne.n	8000fea <HAL_GPIO_Init+0x202>
 8000fe6:	2306      	movs	r3, #6
 8000fe8:	e00c      	b.n	8001004 <HAL_GPIO_Init+0x21c>
 8000fea:	2307      	movs	r3, #7
 8000fec:	e00a      	b.n	8001004 <HAL_GPIO_Init+0x21c>
 8000fee:	2305      	movs	r3, #5
 8000ff0:	e008      	b.n	8001004 <HAL_GPIO_Init+0x21c>
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	e006      	b.n	8001004 <HAL_GPIO_Init+0x21c>
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e004      	b.n	8001004 <HAL_GPIO_Init+0x21c>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	e002      	b.n	8001004 <HAL_GPIO_Init+0x21c>
 8000ffe:	2301      	movs	r3, #1
 8001000:	e000      	b.n	8001004 <HAL_GPIO_Init+0x21c>
 8001002:	2300      	movs	r3, #0
 8001004:	69fa      	ldr	r2, [r7, #28]
 8001006:	f002 0203 	and.w	r2, r2, #3
 800100a:	0092      	lsls	r2, r2, #2
 800100c:	4093      	lsls	r3, r2
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001014:	4935      	ldr	r1, [pc, #212]	; (80010ec <HAL_GPIO_Init+0x304>)
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	089b      	lsrs	r3, r3, #2
 800101a:	3302      	adds	r3, #2
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001022:	4b3a      	ldr	r3, [pc, #232]	; (800110c <HAL_GPIO_Init+0x324>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001046:	4a31      	ldr	r2, [pc, #196]	; (800110c <HAL_GPIO_Init+0x324>)
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800104c:	4b2f      	ldr	r3, [pc, #188]	; (800110c <HAL_GPIO_Init+0x324>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001070:	4a26      	ldr	r2, [pc, #152]	; (800110c <HAL_GPIO_Init+0x324>)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001076:	4b25      	ldr	r3, [pc, #148]	; (800110c <HAL_GPIO_Init+0x324>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800109a:	4a1c      	ldr	r2, [pc, #112]	; (800110c <HAL_GPIO_Init+0x324>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010a0:	4b1a      	ldr	r3, [pc, #104]	; (800110c <HAL_GPIO_Init+0x324>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010c4:	4a11      	ldr	r2, [pc, #68]	; (800110c <HAL_GPIO_Init+0x324>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3301      	adds	r3, #1
 80010ce:	61fb      	str	r3, [r7, #28]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	2b0f      	cmp	r3, #15
 80010d4:	f67f ae96 	bls.w	8000e04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	3724      	adds	r7, #36	; 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40013800 	.word	0x40013800
 80010f0:	40020000 	.word	0x40020000
 80010f4:	40020400 	.word	0x40020400
 80010f8:	40020800 	.word	0x40020800
 80010fc:	40020c00 	.word	0x40020c00
 8001100:	40021000 	.word	0x40021000
 8001104:	40021400 	.word	0x40021400
 8001108:	40021800 	.word	0x40021800
 800110c:	40013c00 	.word	0x40013c00

08001110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	807b      	strh	r3, [r7, #2]
 800111c:	4613      	mov	r3, r2
 800111e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001120:	787b      	ldrb	r3, [r7, #1]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001126:	887a      	ldrh	r2, [r7, #2]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800112c:	e003      	b.n	8001136 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800112e:	887b      	ldrh	r3, [r7, #2]
 8001130:	041a      	lsls	r2, r3, #16
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	619a      	str	r2, [r3, #24]
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	4a1f      	ldr	r2, [pc, #124]	; (80011d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115c:	6413      	str	r3, [r2, #64]	; 0x40
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800116a:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <HAL_PWREx_EnableOverDrive+0x94>)
 800116c:	2201      	movs	r2, #1
 800116e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001170:	f7ff fd4c 	bl	8000c0c <HAL_GetTick>
 8001174:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001176:	e009      	b.n	800118c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001178:	f7ff fd48 	bl	8000c0c <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001186:	d901      	bls.n	800118c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e01f      	b.n	80011cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <HAL_PWREx_EnableOverDrive+0x98>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001198:	d1ee      	bne.n	8001178 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800119c:	2201      	movs	r2, #1
 800119e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011a0:	f7ff fd34 	bl	8000c0c <HAL_GetTick>
 80011a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011a6:	e009      	b.n	80011bc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011a8:	f7ff fd30 	bl	8000c0c <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011b6:	d901      	bls.n	80011bc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e007      	b.n	80011cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <HAL_PWREx_EnableOverDrive+0x98>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011c8:	d1ee      	bne.n	80011a8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40023800 	.word	0x40023800
 80011d8:	420e0040 	.word	0x420e0040
 80011dc:	40007000 	.word	0x40007000
 80011e0:	420e0044 	.word	0x420e0044

080011e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d101      	bne.n	80011f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e0cc      	b.n	8001392 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011f8:	4b68      	ldr	r3, [pc, #416]	; (800139c <HAL_RCC_ClockConfig+0x1b8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 030f 	and.w	r3, r3, #15
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	d90c      	bls.n	8001220 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001206:	4b65      	ldr	r3, [pc, #404]	; (800139c <HAL_RCC_ClockConfig+0x1b8>)
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800120e:	4b63      	ldr	r3, [pc, #396]	; (800139c <HAL_RCC_ClockConfig+0x1b8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	429a      	cmp	r2, r3
 800121a:	d001      	beq.n	8001220 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e0b8      	b.n	8001392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d020      	beq.n	800126e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	2b00      	cmp	r3, #0
 8001236:	d005      	beq.n	8001244 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001238:	4b59      	ldr	r3, [pc, #356]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	4a58      	ldr	r2, [pc, #352]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 800123e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001242:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0308 	and.w	r3, r3, #8
 800124c:	2b00      	cmp	r3, #0
 800124e:	d005      	beq.n	800125c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001250:	4b53      	ldr	r3, [pc, #332]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	4a52      	ldr	r2, [pc, #328]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001256:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800125a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800125c:	4b50      	ldr	r3, [pc, #320]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	494d      	ldr	r1, [pc, #308]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 800126a:	4313      	orrs	r3, r2
 800126c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	d044      	beq.n	8001304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d107      	bne.n	8001292 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001282:	4b47      	ldr	r3, [pc, #284]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d119      	bne.n	80012c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e07f      	b.n	8001392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d003      	beq.n	80012a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800129e:	2b03      	cmp	r3, #3
 80012a0:	d107      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012a2:	4b3f      	ldr	r3, [pc, #252]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d109      	bne.n	80012c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e06f      	b.n	8001392 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b2:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e067      	b.n	8001392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012c2:	4b37      	ldr	r3, [pc, #220]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f023 0203 	bic.w	r2, r3, #3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	4934      	ldr	r1, [pc, #208]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012d4:	f7ff fc9a 	bl	8000c0c <HAL_GetTick>
 80012d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012da:	e00a      	b.n	80012f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012dc:	f7ff fc96 	bl	8000c0c <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e04f      	b.n	8001392 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012f2:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 020c 	and.w	r2, r3, #12
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	429a      	cmp	r2, r3
 8001302:	d1eb      	bne.n	80012dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001304:	4b25      	ldr	r3, [pc, #148]	; (800139c <HAL_RCC_ClockConfig+0x1b8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 030f 	and.w	r3, r3, #15
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	429a      	cmp	r2, r3
 8001310:	d20c      	bcs.n	800132c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001312:	4b22      	ldr	r3, [pc, #136]	; (800139c <HAL_RCC_ClockConfig+0x1b8>)
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <HAL_RCC_ClockConfig+0x1b8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	429a      	cmp	r2, r3
 8001326:	d001      	beq.n	800132c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e032      	b.n	8001392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	d008      	beq.n	800134a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	4916      	ldr	r1, [pc, #88]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001346:	4313      	orrs	r3, r2
 8001348:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	2b00      	cmp	r3, #0
 8001354:	d009      	beq.n	800136a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001356:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	490e      	ldr	r1, [pc, #56]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001366:	4313      	orrs	r3, r2
 8001368:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800136a:	f000 f887 	bl	800147c <HAL_RCC_GetSysClockFreq>
 800136e:	4602      	mov	r2, r0
 8001370:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	091b      	lsrs	r3, r3, #4
 8001376:	f003 030f 	and.w	r3, r3, #15
 800137a:	490a      	ldr	r1, [pc, #40]	; (80013a4 <HAL_RCC_ClockConfig+0x1c0>)
 800137c:	5ccb      	ldrb	r3, [r1, r3]
 800137e:	fa22 f303 	lsr.w	r3, r2, r3
 8001382:	4a09      	ldr	r2, [pc, #36]	; (80013a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <HAL_RCC_ClockConfig+0x1c8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fb30 	bl	80009f0 <HAL_InitTick>

  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023c00 	.word	0x40023c00
 80013a0:	40023800 	.word	0x40023800
 80013a4:	08005a9c 	.word	0x08005a9c
 80013a8:	20000000 	.word	0x20000000
 80013ac:	20000004 	.word	0x20000004

080013b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013b4:	4b03      	ldr	r3, [pc, #12]	; (80013c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80013b6:	681b      	ldr	r3, [r3, #0]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000000 	.word	0x20000000

080013c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013cc:	f7ff fff0 	bl	80013b0 <HAL_RCC_GetHCLKFreq>
 80013d0:	4602      	mov	r2, r0
 80013d2:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	0a9b      	lsrs	r3, r3, #10
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	4903      	ldr	r1, [pc, #12]	; (80013ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80013de:	5ccb      	ldrb	r3, [r1, r3]
 80013e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800
 80013ec:	08005aac 	.word	0x08005aac

080013f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013f4:	f7ff ffdc 	bl	80013b0 <HAL_RCC_GetHCLKFreq>
 80013f8:	4602      	mov	r2, r0
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	0b5b      	lsrs	r3, r3, #13
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	4903      	ldr	r1, [pc, #12]	; (8001414 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001406:	5ccb      	ldrb	r3, [r1, r3]
 8001408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800140c:	4618      	mov	r0, r3
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40023800 	.word	0x40023800
 8001414:	08005aac 	.word	0x08005aac

08001418 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	220f      	movs	r2, #15
 8001426:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_RCC_GetClockConfig+0x5c>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 0203 	and.w	r2, r3, #3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <HAL_RCC_GetClockConfig+0x5c>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <HAL_RCC_GetClockConfig+0x5c>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_RCC_GetClockConfig+0x5c>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	08db      	lsrs	r3, r3, #3
 8001452:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800145a:	4b07      	ldr	r3, [pc, #28]	; (8001478 <HAL_RCC_GetClockConfig+0x60>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 020f 	and.w	r2, r3, #15
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	601a      	str	r2, [r3, #0]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40023c00 	.word	0x40023c00

0800147c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800147c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001480:	b0ae      	sub	sp, #184	; 0xb8
 8001482:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001496:	2300      	movs	r3, #0
 8001498:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800149c:	2300      	movs	r3, #0
 800149e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014a2:	4bcb      	ldr	r3, [pc, #812]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b0c      	cmp	r3, #12
 80014ac:	f200 8206 	bhi.w	80018bc <HAL_RCC_GetSysClockFreq+0x440>
 80014b0:	a201      	add	r2, pc, #4	; (adr r2, 80014b8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80014b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b6:	bf00      	nop
 80014b8:	080014ed 	.word	0x080014ed
 80014bc:	080018bd 	.word	0x080018bd
 80014c0:	080018bd 	.word	0x080018bd
 80014c4:	080018bd 	.word	0x080018bd
 80014c8:	080014f5 	.word	0x080014f5
 80014cc:	080018bd 	.word	0x080018bd
 80014d0:	080018bd 	.word	0x080018bd
 80014d4:	080018bd 	.word	0x080018bd
 80014d8:	080014fd 	.word	0x080014fd
 80014dc:	080018bd 	.word	0x080018bd
 80014e0:	080018bd 	.word	0x080018bd
 80014e4:	080018bd 	.word	0x080018bd
 80014e8:	080016ed 	.word	0x080016ed
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014ec:	4bb9      	ldr	r3, [pc, #740]	; (80017d4 <HAL_RCC_GetSysClockFreq+0x358>)
 80014ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80014f2:	e1e7      	b.n	80018c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014f4:	4bb8      	ldr	r3, [pc, #736]	; (80017d8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80014f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80014fa:	e1e3      	b.n	80018c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014fc:	4bb4      	ldr	r3, [pc, #720]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001504:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001508:	4bb1      	ldr	r3, [pc, #708]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x354>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d071      	beq.n	80015f8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001514:	4bae      	ldr	r3, [pc, #696]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	099b      	lsrs	r3, r3, #6
 800151a:	2200      	movs	r2, #0
 800151c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001520:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001524:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800152c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001530:	2300      	movs	r3, #0
 8001532:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001536:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800153a:	4622      	mov	r2, r4
 800153c:	462b      	mov	r3, r5
 800153e:	f04f 0000 	mov.w	r0, #0
 8001542:	f04f 0100 	mov.w	r1, #0
 8001546:	0159      	lsls	r1, r3, #5
 8001548:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800154c:	0150      	lsls	r0, r2, #5
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4621      	mov	r1, r4
 8001554:	1a51      	subs	r1, r2, r1
 8001556:	6439      	str	r1, [r7, #64]	; 0x40
 8001558:	4629      	mov	r1, r5
 800155a:	eb63 0301 	sbc.w	r3, r3, r1
 800155e:	647b      	str	r3, [r7, #68]	; 0x44
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800156c:	4649      	mov	r1, r9
 800156e:	018b      	lsls	r3, r1, #6
 8001570:	4641      	mov	r1, r8
 8001572:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001576:	4641      	mov	r1, r8
 8001578:	018a      	lsls	r2, r1, #6
 800157a:	4641      	mov	r1, r8
 800157c:	1a51      	subs	r1, r2, r1
 800157e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001580:	4649      	mov	r1, r9
 8001582:	eb63 0301 	sbc.w	r3, r3, r1
 8001586:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001594:	4649      	mov	r1, r9
 8001596:	00cb      	lsls	r3, r1, #3
 8001598:	4641      	mov	r1, r8
 800159a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800159e:	4641      	mov	r1, r8
 80015a0:	00ca      	lsls	r2, r1, #3
 80015a2:	4610      	mov	r0, r2
 80015a4:	4619      	mov	r1, r3
 80015a6:	4603      	mov	r3, r0
 80015a8:	4622      	mov	r2, r4
 80015aa:	189b      	adds	r3, r3, r2
 80015ac:	633b      	str	r3, [r7, #48]	; 0x30
 80015ae:	462b      	mov	r3, r5
 80015b0:	460a      	mov	r2, r1
 80015b2:	eb42 0303 	adc.w	r3, r2, r3
 80015b6:	637b      	str	r3, [r7, #52]	; 0x34
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80015c4:	4629      	mov	r1, r5
 80015c6:	024b      	lsls	r3, r1, #9
 80015c8:	4621      	mov	r1, r4
 80015ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015ce:	4621      	mov	r1, r4
 80015d0:	024a      	lsls	r2, r1, #9
 80015d2:	4610      	mov	r0, r2
 80015d4:	4619      	mov	r1, r3
 80015d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015da:	2200      	movs	r2, #0
 80015dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80015e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80015e4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80015e8:	f7fe fe12 	bl	8000210 <__aeabi_uldivmod>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4613      	mov	r3, r2
 80015f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80015f6:	e067      	b.n	80016c8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015f8:	4b75      	ldr	r3, [pc, #468]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	099b      	lsrs	r3, r3, #6
 80015fe:	2200      	movs	r2, #0
 8001600:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001604:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001608:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800160c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001610:	67bb      	str	r3, [r7, #120]	; 0x78
 8001612:	2300      	movs	r3, #0
 8001614:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001616:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800161a:	4622      	mov	r2, r4
 800161c:	462b      	mov	r3, r5
 800161e:	f04f 0000 	mov.w	r0, #0
 8001622:	f04f 0100 	mov.w	r1, #0
 8001626:	0159      	lsls	r1, r3, #5
 8001628:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800162c:	0150      	lsls	r0, r2, #5
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4621      	mov	r1, r4
 8001634:	1a51      	subs	r1, r2, r1
 8001636:	62b9      	str	r1, [r7, #40]	; 0x28
 8001638:	4629      	mov	r1, r5
 800163a:	eb63 0301 	sbc.w	r3, r3, r1
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	f04f 0300 	mov.w	r3, #0
 8001648:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800164c:	4649      	mov	r1, r9
 800164e:	018b      	lsls	r3, r1, #6
 8001650:	4641      	mov	r1, r8
 8001652:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001656:	4641      	mov	r1, r8
 8001658:	018a      	lsls	r2, r1, #6
 800165a:	4641      	mov	r1, r8
 800165c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001660:	4649      	mov	r1, r9
 8001662:	eb63 0b01 	sbc.w	fp, r3, r1
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001672:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001676:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800167a:	4692      	mov	sl, r2
 800167c:	469b      	mov	fp, r3
 800167e:	4623      	mov	r3, r4
 8001680:	eb1a 0303 	adds.w	r3, sl, r3
 8001684:	623b      	str	r3, [r7, #32]
 8001686:	462b      	mov	r3, r5
 8001688:	eb4b 0303 	adc.w	r3, fp, r3
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800169a:	4629      	mov	r1, r5
 800169c:	028b      	lsls	r3, r1, #10
 800169e:	4621      	mov	r1, r4
 80016a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016a4:	4621      	mov	r1, r4
 80016a6:	028a      	lsls	r2, r1, #10
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016b0:	2200      	movs	r2, #0
 80016b2:	673b      	str	r3, [r7, #112]	; 0x70
 80016b4:	677a      	str	r2, [r7, #116]	; 0x74
 80016b6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80016ba:	f7fe fda9 	bl	8000210 <__aeabi_uldivmod>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4613      	mov	r3, r2
 80016c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016c8:	4b41      	ldr	r3, [pc, #260]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	0c1b      	lsrs	r3, r3, #16
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	3301      	adds	r3, #1
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80016da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80016de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016ea:	e0eb      	b.n	80018c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016ec:	4b38      	ldr	r3, [pc, #224]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016f8:	4b35      	ldr	r3, [pc, #212]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d06b      	beq.n	80017dc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001704:	4b32      	ldr	r3, [pc, #200]	; (80017d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	099b      	lsrs	r3, r3, #6
 800170a:	2200      	movs	r2, #0
 800170c:	66bb      	str	r3, [r7, #104]	; 0x68
 800170e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001710:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001716:	663b      	str	r3, [r7, #96]	; 0x60
 8001718:	2300      	movs	r3, #0
 800171a:	667b      	str	r3, [r7, #100]	; 0x64
 800171c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001720:	4622      	mov	r2, r4
 8001722:	462b      	mov	r3, r5
 8001724:	f04f 0000 	mov.w	r0, #0
 8001728:	f04f 0100 	mov.w	r1, #0
 800172c:	0159      	lsls	r1, r3, #5
 800172e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001732:	0150      	lsls	r0, r2, #5
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4621      	mov	r1, r4
 800173a:	1a51      	subs	r1, r2, r1
 800173c:	61b9      	str	r1, [r7, #24]
 800173e:	4629      	mov	r1, r5
 8001740:	eb63 0301 	sbc.w	r3, r3, r1
 8001744:	61fb      	str	r3, [r7, #28]
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001752:	4659      	mov	r1, fp
 8001754:	018b      	lsls	r3, r1, #6
 8001756:	4651      	mov	r1, sl
 8001758:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800175c:	4651      	mov	r1, sl
 800175e:	018a      	lsls	r2, r1, #6
 8001760:	4651      	mov	r1, sl
 8001762:	ebb2 0801 	subs.w	r8, r2, r1
 8001766:	4659      	mov	r1, fp
 8001768:	eb63 0901 	sbc.w	r9, r3, r1
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001778:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800177c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001780:	4690      	mov	r8, r2
 8001782:	4699      	mov	r9, r3
 8001784:	4623      	mov	r3, r4
 8001786:	eb18 0303 	adds.w	r3, r8, r3
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	462b      	mov	r3, r5
 800178e:	eb49 0303 	adc.w	r3, r9, r3
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80017a0:	4629      	mov	r1, r5
 80017a2:	024b      	lsls	r3, r1, #9
 80017a4:	4621      	mov	r1, r4
 80017a6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017aa:	4621      	mov	r1, r4
 80017ac:	024a      	lsls	r2, r1, #9
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017b6:	2200      	movs	r2, #0
 80017b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80017ba:	65fa      	str	r2, [r7, #92]	; 0x5c
 80017bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80017c0:	f7fe fd26 	bl	8000210 <__aeabi_uldivmod>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4613      	mov	r3, r2
 80017ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80017ce:	e065      	b.n	800189c <HAL_RCC_GetSysClockFreq+0x420>
 80017d0:	40023800 	.word	0x40023800
 80017d4:	00f42400 	.word	0x00f42400
 80017d8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017dc:	4b3d      	ldr	r3, [pc, #244]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x458>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	099b      	lsrs	r3, r3, #6
 80017e2:	2200      	movs	r2, #0
 80017e4:	4618      	mov	r0, r3
 80017e6:	4611      	mov	r1, r2
 80017e8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017ec:	653b      	str	r3, [r7, #80]	; 0x50
 80017ee:	2300      	movs	r3, #0
 80017f0:	657b      	str	r3, [r7, #84]	; 0x54
 80017f2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80017f6:	4642      	mov	r2, r8
 80017f8:	464b      	mov	r3, r9
 80017fa:	f04f 0000 	mov.w	r0, #0
 80017fe:	f04f 0100 	mov.w	r1, #0
 8001802:	0159      	lsls	r1, r3, #5
 8001804:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001808:	0150      	lsls	r0, r2, #5
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4641      	mov	r1, r8
 8001810:	1a51      	subs	r1, r2, r1
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	4649      	mov	r1, r9
 8001816:	eb63 0301 	sbc.w	r3, r3, r1
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001828:	4659      	mov	r1, fp
 800182a:	018b      	lsls	r3, r1, #6
 800182c:	4651      	mov	r1, sl
 800182e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001832:	4651      	mov	r1, sl
 8001834:	018a      	lsls	r2, r1, #6
 8001836:	4651      	mov	r1, sl
 8001838:	1a54      	subs	r4, r2, r1
 800183a:	4659      	mov	r1, fp
 800183c:	eb63 0501 	sbc.w	r5, r3, r1
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	00eb      	lsls	r3, r5, #3
 800184a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800184e:	00e2      	lsls	r2, r4, #3
 8001850:	4614      	mov	r4, r2
 8001852:	461d      	mov	r5, r3
 8001854:	4643      	mov	r3, r8
 8001856:	18e3      	adds	r3, r4, r3
 8001858:	603b      	str	r3, [r7, #0]
 800185a:	464b      	mov	r3, r9
 800185c:	eb45 0303 	adc.w	r3, r5, r3
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800186e:	4629      	mov	r1, r5
 8001870:	028b      	lsls	r3, r1, #10
 8001872:	4621      	mov	r1, r4
 8001874:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001878:	4621      	mov	r1, r4
 800187a:	028a      	lsls	r2, r1, #10
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001884:	2200      	movs	r2, #0
 8001886:	64bb      	str	r3, [r7, #72]	; 0x48
 8001888:	64fa      	str	r2, [r7, #76]	; 0x4c
 800188a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800188e:	f7fe fcbf 	bl	8000210 <__aeabi_uldivmod>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4613      	mov	r3, r2
 8001898:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800189c:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <HAL_RCC_GetSysClockFreq+0x458>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	0f1b      	lsrs	r3, r3, #28
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80018aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80018ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80018b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80018ba:	e003      	b.n	80018c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80018be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80018c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	37b8      	adds	r7, #184	; 0xb8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018d2:	bf00      	nop
 80018d4:	40023800 	.word	0x40023800
 80018d8:	00f42400 	.word	0x00f42400

080018dc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e28d      	b.n	8001e0a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 8083 	beq.w	8001a02 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018fc:	4b94      	ldr	r3, [pc, #592]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 030c 	and.w	r3, r3, #12
 8001904:	2b04      	cmp	r3, #4
 8001906:	d019      	beq.n	800193c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001908:	4b91      	ldr	r3, [pc, #580]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001910:	2b08      	cmp	r3, #8
 8001912:	d106      	bne.n	8001922 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001914:	4b8e      	ldr	r3, [pc, #568]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800191c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001920:	d00c      	beq.n	800193c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001922:	4b8b      	ldr	r3, [pc, #556]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800192a:	2b0c      	cmp	r3, #12
 800192c:	d112      	bne.n	8001954 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800192e:	4b88      	ldr	r3, [pc, #544]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001936:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800193a:	d10b      	bne.n	8001954 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193c:	4b84      	ldr	r3, [pc, #528]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d05b      	beq.n	8001a00 <HAL_RCC_OscConfig+0x124>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d157      	bne.n	8001a00 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e25a      	b.n	8001e0a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800195c:	d106      	bne.n	800196c <HAL_RCC_OscConfig+0x90>
 800195e:	4b7c      	ldr	r3, [pc, #496]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a7b      	ldr	r2, [pc, #492]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	e01d      	b.n	80019a8 <HAL_RCC_OscConfig+0xcc>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001974:	d10c      	bne.n	8001990 <HAL_RCC_OscConfig+0xb4>
 8001976:	4b76      	ldr	r3, [pc, #472]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a75      	ldr	r2, [pc, #468]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 800197c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	4b73      	ldr	r3, [pc, #460]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a72      	ldr	r2, [pc, #456]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	e00b      	b.n	80019a8 <HAL_RCC_OscConfig+0xcc>
 8001990:	4b6f      	ldr	r3, [pc, #444]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a6e      	ldr	r2, [pc, #440]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	4b6c      	ldr	r3, [pc, #432]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a6b      	ldr	r2, [pc, #428]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 80019a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d013      	beq.n	80019d8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b0:	f7ff f92c 	bl	8000c0c <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b8:	f7ff f928 	bl	8000c0c <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b64      	cmp	r3, #100	; 0x64
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e21f      	b.n	8001e0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ca:	4b61      	ldr	r3, [pc, #388]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0xdc>
 80019d6:	e014      	b.n	8001a02 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d8:	f7ff f918 	bl	8000c0c <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019e0:	f7ff f914 	bl	8000c0c <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b64      	cmp	r3, #100	; 0x64
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e20b      	b.n	8001e0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f2:	4b57      	ldr	r3, [pc, #348]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0x104>
 80019fe:	e000      	b.n	8001a02 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d06f      	beq.n	8001aee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a0e:	4b50      	ldr	r3, [pc, #320]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 030c 	and.w	r3, r3, #12
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d017      	beq.n	8001a4a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a1a:	4b4d      	ldr	r3, [pc, #308]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a22:	2b08      	cmp	r3, #8
 8001a24:	d105      	bne.n	8001a32 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a26:	4b4a      	ldr	r3, [pc, #296]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00b      	beq.n	8001a4a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a32:	4b47      	ldr	r3, [pc, #284]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a3a:	2b0c      	cmp	r3, #12
 8001a3c:	d11c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a3e:	4b44      	ldr	r3, [pc, #272]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d116      	bne.n	8001a78 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4a:	4b41      	ldr	r3, [pc, #260]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <HAL_RCC_OscConfig+0x186>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d001      	beq.n	8001a62 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e1d3      	b.n	8001e0a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a62:	4b3b      	ldr	r3, [pc, #236]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	4937      	ldr	r1, [pc, #220]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a76:	e03a      	b.n	8001aee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d020      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a80:	4b34      	ldr	r3, [pc, #208]	; (8001b54 <HAL_RCC_OscConfig+0x278>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a86:	f7ff f8c1 	bl	8000c0c <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a8e:	f7ff f8bd 	bl	8000c0c <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e1b4      	b.n	8001e0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa0:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aac:	4b28      	ldr	r3, [pc, #160]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4925      	ldr	r1, [pc, #148]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	600b      	str	r3, [r1, #0]
 8001ac0:	e015      	b.n	8001aee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ac2:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <HAL_RCC_OscConfig+0x278>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7ff f8a0 	bl	8000c0c <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ad0:	f7ff f89c 	bl	8000c0c <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e193      	b.n	8001e0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae2:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d036      	beq.n	8001b68 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d016      	beq.n	8001b30 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b02:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <HAL_RCC_OscConfig+0x27c>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b08:	f7ff f880 	bl	8000c0c <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b10:	f7ff f87c 	bl	8000c0c <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e173      	b.n	8001e0a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b22:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_RCC_OscConfig+0x274>)
 8001b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0x234>
 8001b2e:	e01b      	b.n	8001b68 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b30:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <HAL_RCC_OscConfig+0x27c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b36:	f7ff f869 	bl	8000c0c <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b3c:	e00e      	b.n	8001b5c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b3e:	f7ff f865 	bl	8000c0c <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d907      	bls.n	8001b5c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e15c      	b.n	8001e0a <HAL_RCC_OscConfig+0x52e>
 8001b50:	40023800 	.word	0x40023800
 8001b54:	42470000 	.word	0x42470000
 8001b58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b5c:	4b8a      	ldr	r3, [pc, #552]	; (8001d88 <HAL_RCC_OscConfig+0x4ac>)
 8001b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1ea      	bne.n	8001b3e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 8097 	beq.w	8001ca4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b76:	2300      	movs	r3, #0
 8001b78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b7a:	4b83      	ldr	r3, [pc, #524]	; (8001d88 <HAL_RCC_OscConfig+0x4ac>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10f      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	4b7f      	ldr	r3, [pc, #508]	; (8001d88 <HAL_RCC_OscConfig+0x4ac>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	4a7e      	ldr	r2, [pc, #504]	; (8001d88 <HAL_RCC_OscConfig+0x4ac>)
 8001b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b94:	6413      	str	r3, [r2, #64]	; 0x40
 8001b96:	4b7c      	ldr	r3, [pc, #496]	; (8001d88 <HAL_RCC_OscConfig+0x4ac>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba6:	4b79      	ldr	r3, [pc, #484]	; (8001d8c <HAL_RCC_OscConfig+0x4b0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d118      	bne.n	8001be4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bb2:	4b76      	ldr	r3, [pc, #472]	; (8001d8c <HAL_RCC_OscConfig+0x4b0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a75      	ldr	r2, [pc, #468]	; (8001d8c <HAL_RCC_OscConfig+0x4b0>)
 8001bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bbe:	f7ff f825 	bl	8000c0c <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bc6:	f7ff f821 	bl	8000c0c <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e118      	b.n	8001e0a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd8:	4b6c      	ldr	r3, [pc, #432]	; (8001d8c <HAL_RCC_OscConfig+0x4b0>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0f0      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d106      	bne.n	8001bfa <HAL_RCC_OscConfig+0x31e>
 8001bec:	4b66      	ldr	r3, [pc, #408]	; (8001d88 <HAL_RCC_OscConfig+0x4ac>)
 8001bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf0:	4a65      	ldr	r2, [pc, #404]	; (8001d88 <HAL_RCC_OscConfig+0x4ac>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf8:	e01c      	b.n	8001c34 <HAL_RCC_OscConfig+0x358>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b05      	cmp	r3, #5
 8001c00:	d10c      	bne.n	8001c1c <HAL_RCC_OscConfig+0x340>
 8001c02:	4b61      	ldr	r3, [pc, #388]	; (8001d88 <HAL_RCC_OscConfig+0x4ac>)
 8001c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c06:	4a60      	ldr	r2, [pc, #384]	; (8001d88 <HAL_RCC_OscConfig+0x4ac>)
 8001c08:	f043 0304 	orr.w	r3, r3, #4
 8001c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c0e:	4b5e      	ldr	r3, [pc, #376]	; (8001d88 <HAL_RCC_OscConfig+0x4ac>)
 8001c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c12:	4a5d      	ldr	r2, [pc, #372]	; (8001d88 <HAL_RCC_OscConfig+0x4ac>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6713      	str	r3, [r2, #112]	; 0x70
 8001c1a:	e00b      	b.n	8001c34 <HAL_RCC_OscConfig+0x358>
 8001c1c:	4b5a      	ldr	r3, [pc, #360]	; (8001d88 <HAL_RCC_OscConfig+0x4ac>)
 8001c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c20:	4a59      	ldr	r2, [pc, #356]	; (8001d88 <HAL_RCC_OscConfig+0x4ac>)
 8001c22:	f023 0301 	bic.w	r3, r3, #1
 8001c26:	6713      	str	r3, [r2, #112]	; 0x70
 8001c28:	4b57      	ldr	r3, [pc, #348]	; (8001d88 <HAL_RCC_OscConfig+0x4ac>)
 8001c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2c:	4a56      	ldr	r2, [pc, #344]	; (8001d88 <HAL_RCC_OscConfig+0x4ac>)
 8001c2e:	f023 0304 	bic.w	r3, r3, #4
 8001c32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d015      	beq.n	8001c68 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3c:	f7fe ffe6 	bl	8000c0c <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c42:	e00a      	b.n	8001c5a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c44:	f7fe ffe2 	bl	8000c0c <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e0d7      	b.n	8001e0a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c5a:	4b4b      	ldr	r3, [pc, #300]	; (8001d88 <HAL_RCC_OscConfig+0x4ac>)
 8001c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0ee      	beq.n	8001c44 <HAL_RCC_OscConfig+0x368>
 8001c66:	e014      	b.n	8001c92 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c68:	f7fe ffd0 	bl	8000c0c <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c6e:	e00a      	b.n	8001c86 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c70:	f7fe ffcc 	bl	8000c0c <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e0c1      	b.n	8001e0a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c86:	4b40      	ldr	r3, [pc, #256]	; (8001d88 <HAL_RCC_OscConfig+0x4ac>)
 8001c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1ee      	bne.n	8001c70 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c92:	7dfb      	ldrb	r3, [r7, #23]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d105      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c98:	4b3b      	ldr	r3, [pc, #236]	; (8001d88 <HAL_RCC_OscConfig+0x4ac>)
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	4a3a      	ldr	r2, [pc, #232]	; (8001d88 <HAL_RCC_OscConfig+0x4ac>)
 8001c9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 80ad 	beq.w	8001e08 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cae:	4b36      	ldr	r3, [pc, #216]	; (8001d88 <HAL_RCC_OscConfig+0x4ac>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d060      	beq.n	8001d7c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d145      	bne.n	8001d4e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc2:	4b33      	ldr	r3, [pc, #204]	; (8001d90 <HAL_RCC_OscConfig+0x4b4>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7fe ffa0 	bl	8000c0c <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd0:	f7fe ff9c 	bl	8000c0c <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e093      	b.n	8001e0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce2:	4b29      	ldr	r3, [pc, #164]	; (8001d88 <HAL_RCC_OscConfig+0x4ac>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69da      	ldr	r2, [r3, #28]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	019b      	lsls	r3, r3, #6
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d04:	085b      	lsrs	r3, r3, #1
 8001d06:	3b01      	subs	r3, #1
 8001d08:	041b      	lsls	r3, r3, #16
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	061b      	lsls	r3, r3, #24
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d18:	071b      	lsls	r3, r3, #28
 8001d1a:	491b      	ldr	r1, [pc, #108]	; (8001d88 <HAL_RCC_OscConfig+0x4ac>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d20:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <HAL_RCC_OscConfig+0x4b4>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d26:	f7fe ff71 	bl	8000c0c <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d2e:	f7fe ff6d 	bl	8000c0c <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e064      	b.n	8001e0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <HAL_RCC_OscConfig+0x4ac>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0f0      	beq.n	8001d2e <HAL_RCC_OscConfig+0x452>
 8001d4c:	e05c      	b.n	8001e08 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <HAL_RCC_OscConfig+0x4b4>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7fe ff5a 	bl	8000c0c <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d5c:	f7fe ff56 	bl	8000c0c <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e04d      	b.n	8001e0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <HAL_RCC_OscConfig+0x4ac>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f0      	bne.n	8001d5c <HAL_RCC_OscConfig+0x480>
 8001d7a:	e045      	b.n	8001e08 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d107      	bne.n	8001d94 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e040      	b.n	8001e0a <HAL_RCC_OscConfig+0x52e>
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40007000 	.word	0x40007000
 8001d90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d94:	4b1f      	ldr	r3, [pc, #124]	; (8001e14 <HAL_RCC_OscConfig+0x538>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d030      	beq.n	8001e04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d129      	bne.n	8001e04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d122      	bne.n	8001e04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001dca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d119      	bne.n	8001e04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dda:	085b      	lsrs	r3, r3, #1
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d10f      	bne.n	8001e04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d107      	bne.n	8001e04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d001      	beq.n	8001e08 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e000      	b.n	8001e0a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40023800 	.word	0x40023800

08001e18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e041      	b.n	8001eae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d106      	bne.n	8001e44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f839 	bl	8001eb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3304      	adds	r3, #4
 8001e54:	4619      	mov	r1, r3
 8001e56:	4610      	mov	r0, r2
 8001e58:	f000 f9c0 	bl	80021dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
	...

08001ecc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d001      	beq.n	8001ee4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e04e      	b.n	8001f82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0201 	orr.w	r2, r2, #1
 8001efa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a23      	ldr	r2, [pc, #140]	; (8001f90 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d022      	beq.n	8001f4c <HAL_TIM_Base_Start_IT+0x80>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f0e:	d01d      	beq.n	8001f4c <HAL_TIM_Base_Start_IT+0x80>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a1f      	ldr	r2, [pc, #124]	; (8001f94 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d018      	beq.n	8001f4c <HAL_TIM_Base_Start_IT+0x80>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a1e      	ldr	r2, [pc, #120]	; (8001f98 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d013      	beq.n	8001f4c <HAL_TIM_Base_Start_IT+0x80>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <HAL_TIM_Base_Start_IT+0xd0>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d00e      	beq.n	8001f4c <HAL_TIM_Base_Start_IT+0x80>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a1b      	ldr	r2, [pc, #108]	; (8001fa0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d009      	beq.n	8001f4c <HAL_TIM_Base_Start_IT+0x80>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a19      	ldr	r2, [pc, #100]	; (8001fa4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d004      	beq.n	8001f4c <HAL_TIM_Base_Start_IT+0x80>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a18      	ldr	r2, [pc, #96]	; (8001fa8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d111      	bne.n	8001f70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2b06      	cmp	r3, #6
 8001f5c:	d010      	beq.n	8001f80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f042 0201 	orr.w	r2, r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f6e:	e007      	b.n	8001f80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0201 	orr.w	r2, r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40010000 	.word	0x40010000
 8001f94:	40000400 	.word	0x40000400
 8001f98:	40000800 	.word	0x40000800
 8001f9c:	40000c00 	.word	0x40000c00
 8001fa0:	40010400 	.word	0x40010400
 8001fa4:	40014000 	.word	0x40014000
 8001fa8:	40001800 	.word	0x40001800

08001fac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d020      	beq.n	8002010 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d01b      	beq.n	8002010 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0202 	mvn.w	r2, #2
 8001fe0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f8d2 	bl	80021a0 <HAL_TIM_IC_CaptureCallback>
 8001ffc:	e005      	b.n	800200a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f8c4 	bl	800218c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f8d5 	bl	80021b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	2b00      	cmp	r3, #0
 8002018:	d020      	beq.n	800205c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d01b      	beq.n	800205c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0204 	mvn.w	r2, #4
 800202c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2202      	movs	r2, #2
 8002032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f8ac 	bl	80021a0 <HAL_TIM_IC_CaptureCallback>
 8002048:	e005      	b.n	8002056 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f89e 	bl	800218c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f8af 	bl	80021b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d020      	beq.n	80020a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f003 0308 	and.w	r3, r3, #8
 800206c:	2b00      	cmp	r3, #0
 800206e:	d01b      	beq.n	80020a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0208 	mvn.w	r2, #8
 8002078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2204      	movs	r2, #4
 800207e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f886 	bl	80021a0 <HAL_TIM_IC_CaptureCallback>
 8002094:	e005      	b.n	80020a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f878 	bl	800218c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f889 	bl	80021b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d020      	beq.n	80020f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f003 0310 	and.w	r3, r3, #16
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d01b      	beq.n	80020f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0210 	mvn.w	r2, #16
 80020c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2208      	movs	r2, #8
 80020ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f860 	bl	80021a0 <HAL_TIM_IC_CaptureCallback>
 80020e0:	e005      	b.n	80020ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f852 	bl	800218c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f863 	bl	80021b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00c      	beq.n	8002118 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d007      	beq.n	8002118 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f06f 0201 	mvn.w	r2, #1
 8002110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7fe fbe0 	bl	80008d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00c      	beq.n	800213c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002128:	2b00      	cmp	r3, #0
 800212a:	d007      	beq.n	800213c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f906 	bl	8002348 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00c      	beq.n	8002160 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214c:	2b00      	cmp	r3, #0
 800214e:	d007      	beq.n	8002160 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f834 	bl	80021c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f003 0320 	and.w	r3, r3, #32
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00c      	beq.n	8002184 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f003 0320 	and.w	r3, r3, #32
 8002170:	2b00      	cmp	r3, #0
 8002172:	d007      	beq.n	8002184 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f06f 0220 	mvn.w	r2, #32
 800217c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f8d8 	bl	8002334 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002184:	bf00      	nop
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a46      	ldr	r2, [pc, #280]	; (8002308 <TIM_Base_SetConfig+0x12c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d013      	beq.n	800221c <TIM_Base_SetConfig+0x40>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021fa:	d00f      	beq.n	800221c <TIM_Base_SetConfig+0x40>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a43      	ldr	r2, [pc, #268]	; (800230c <TIM_Base_SetConfig+0x130>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d00b      	beq.n	800221c <TIM_Base_SetConfig+0x40>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a42      	ldr	r2, [pc, #264]	; (8002310 <TIM_Base_SetConfig+0x134>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d007      	beq.n	800221c <TIM_Base_SetConfig+0x40>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a41      	ldr	r2, [pc, #260]	; (8002314 <TIM_Base_SetConfig+0x138>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d003      	beq.n	800221c <TIM_Base_SetConfig+0x40>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a40      	ldr	r2, [pc, #256]	; (8002318 <TIM_Base_SetConfig+0x13c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d108      	bne.n	800222e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a35      	ldr	r2, [pc, #212]	; (8002308 <TIM_Base_SetConfig+0x12c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d02b      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800223c:	d027      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a32      	ldr	r2, [pc, #200]	; (800230c <TIM_Base_SetConfig+0x130>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d023      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a31      	ldr	r2, [pc, #196]	; (8002310 <TIM_Base_SetConfig+0x134>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d01f      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a30      	ldr	r2, [pc, #192]	; (8002314 <TIM_Base_SetConfig+0x138>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d01b      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a2f      	ldr	r2, [pc, #188]	; (8002318 <TIM_Base_SetConfig+0x13c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d017      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a2e      	ldr	r2, [pc, #184]	; (800231c <TIM_Base_SetConfig+0x140>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d013      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a2d      	ldr	r2, [pc, #180]	; (8002320 <TIM_Base_SetConfig+0x144>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00f      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a2c      	ldr	r2, [pc, #176]	; (8002324 <TIM_Base_SetConfig+0x148>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00b      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a2b      	ldr	r2, [pc, #172]	; (8002328 <TIM_Base_SetConfig+0x14c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d007      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a2a      	ldr	r2, [pc, #168]	; (800232c <TIM_Base_SetConfig+0x150>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d003      	beq.n	800228e <TIM_Base_SetConfig+0xb2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a29      	ldr	r2, [pc, #164]	; (8002330 <TIM_Base_SetConfig+0x154>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d108      	bne.n	80022a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	4313      	orrs	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a10      	ldr	r2, [pc, #64]	; (8002308 <TIM_Base_SetConfig+0x12c>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d003      	beq.n	80022d4 <TIM_Base_SetConfig+0xf8>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a12      	ldr	r2, [pc, #72]	; (8002318 <TIM_Base_SetConfig+0x13c>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d103      	bne.n	80022dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	691a      	ldr	r2, [r3, #16]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d105      	bne.n	80022fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	f023 0201 	bic.w	r2, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	611a      	str	r2, [r3, #16]
  }
}
 80022fa:	bf00      	nop
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40010000 	.word	0x40010000
 800230c:	40000400 	.word	0x40000400
 8002310:	40000800 	.word	0x40000800
 8002314:	40000c00 	.word	0x40000c00
 8002318:	40010400 	.word	0x40010400
 800231c:	40014000 	.word	0x40014000
 8002320:	40014400 	.word	0x40014400
 8002324:	40014800 	.word	0x40014800
 8002328:	40001800 	.word	0x40001800
 800232c:	40001c00 	.word	0x40001c00
 8002330:	40002000 	.word	0x40002000

08002334 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e042      	b.n	80023f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d106      	bne.n	8002388 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7fe faec 	bl	8000960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2224      	movs	r2, #36	; 0x24
 800238c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68da      	ldr	r2, [r3, #12]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800239e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f82b 	bl	80023fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2220      	movs	r2, #32
 80023e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2220      	movs	r2, #32
 80023e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002400:	b0c0      	sub	sp, #256	; 0x100
 8002402:	af00      	add	r7, sp, #0
 8002404:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002418:	68d9      	ldr	r1, [r3, #12]
 800241a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	ea40 0301 	orr.w	r3, r0, r1
 8002424:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	431a      	orrs	r2, r3
 8002434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	431a      	orrs	r2, r3
 800243c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	4313      	orrs	r3, r2
 8002444:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002454:	f021 010c 	bic.w	r1, r1, #12
 8002458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002462:	430b      	orrs	r3, r1
 8002464:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002476:	6999      	ldr	r1, [r3, #24]
 8002478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	ea40 0301 	orr.w	r3, r0, r1
 8002482:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	4b8f      	ldr	r3, [pc, #572]	; (80026c8 <UART_SetConfig+0x2cc>)
 800248c:	429a      	cmp	r2, r3
 800248e:	d005      	beq.n	800249c <UART_SetConfig+0xa0>
 8002490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	4b8d      	ldr	r3, [pc, #564]	; (80026cc <UART_SetConfig+0x2d0>)
 8002498:	429a      	cmp	r2, r3
 800249a:	d104      	bne.n	80024a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800249c:	f7fe ffa8 	bl	80013f0 <HAL_RCC_GetPCLK2Freq>
 80024a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80024a4:	e003      	b.n	80024ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80024a6:	f7fe ff8f 	bl	80013c8 <HAL_RCC_GetPCLK1Freq>
 80024aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024b8:	f040 810c 	bne.w	80026d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024c0:	2200      	movs	r2, #0
 80024c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80024c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80024ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80024ce:	4622      	mov	r2, r4
 80024d0:	462b      	mov	r3, r5
 80024d2:	1891      	adds	r1, r2, r2
 80024d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80024d6:	415b      	adcs	r3, r3
 80024d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80024de:	4621      	mov	r1, r4
 80024e0:	eb12 0801 	adds.w	r8, r2, r1
 80024e4:	4629      	mov	r1, r5
 80024e6:	eb43 0901 	adc.w	r9, r3, r1
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024fe:	4690      	mov	r8, r2
 8002500:	4699      	mov	r9, r3
 8002502:	4623      	mov	r3, r4
 8002504:	eb18 0303 	adds.w	r3, r8, r3
 8002508:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800250c:	462b      	mov	r3, r5
 800250e:	eb49 0303 	adc.w	r3, r9, r3
 8002512:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002522:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002526:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800252a:	460b      	mov	r3, r1
 800252c:	18db      	adds	r3, r3, r3
 800252e:	653b      	str	r3, [r7, #80]	; 0x50
 8002530:	4613      	mov	r3, r2
 8002532:	eb42 0303 	adc.w	r3, r2, r3
 8002536:	657b      	str	r3, [r7, #84]	; 0x54
 8002538:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800253c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002540:	f7fd fe66 	bl	8000210 <__aeabi_uldivmod>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4b61      	ldr	r3, [pc, #388]	; (80026d0 <UART_SetConfig+0x2d4>)
 800254a:	fba3 2302 	umull	r2, r3, r3, r2
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	011c      	lsls	r4, r3, #4
 8002552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002556:	2200      	movs	r2, #0
 8002558:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800255c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002560:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002564:	4642      	mov	r2, r8
 8002566:	464b      	mov	r3, r9
 8002568:	1891      	adds	r1, r2, r2
 800256a:	64b9      	str	r1, [r7, #72]	; 0x48
 800256c:	415b      	adcs	r3, r3
 800256e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002570:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002574:	4641      	mov	r1, r8
 8002576:	eb12 0a01 	adds.w	sl, r2, r1
 800257a:	4649      	mov	r1, r9
 800257c:	eb43 0b01 	adc.w	fp, r3, r1
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	f04f 0300 	mov.w	r3, #0
 8002588:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800258c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002590:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002594:	4692      	mov	sl, r2
 8002596:	469b      	mov	fp, r3
 8002598:	4643      	mov	r3, r8
 800259a:	eb1a 0303 	adds.w	r3, sl, r3
 800259e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80025a2:	464b      	mov	r3, r9
 80025a4:	eb4b 0303 	adc.w	r3, fp, r3
 80025a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80025ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80025b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80025bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80025c0:	460b      	mov	r3, r1
 80025c2:	18db      	adds	r3, r3, r3
 80025c4:	643b      	str	r3, [r7, #64]	; 0x40
 80025c6:	4613      	mov	r3, r2
 80025c8:	eb42 0303 	adc.w	r3, r2, r3
 80025cc:	647b      	str	r3, [r7, #68]	; 0x44
 80025ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80025d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80025d6:	f7fd fe1b 	bl	8000210 <__aeabi_uldivmod>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4611      	mov	r1, r2
 80025e0:	4b3b      	ldr	r3, [pc, #236]	; (80026d0 <UART_SetConfig+0x2d4>)
 80025e2:	fba3 2301 	umull	r2, r3, r3, r1
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	2264      	movs	r2, #100	; 0x64
 80025ea:	fb02 f303 	mul.w	r3, r2, r3
 80025ee:	1acb      	subs	r3, r1, r3
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80025f6:	4b36      	ldr	r3, [pc, #216]	; (80026d0 <UART_SetConfig+0x2d4>)
 80025f8:	fba3 2302 	umull	r2, r3, r3, r2
 80025fc:	095b      	lsrs	r3, r3, #5
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002604:	441c      	add	r4, r3
 8002606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800260a:	2200      	movs	r2, #0
 800260c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002610:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002614:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002618:	4642      	mov	r2, r8
 800261a:	464b      	mov	r3, r9
 800261c:	1891      	adds	r1, r2, r2
 800261e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002620:	415b      	adcs	r3, r3
 8002622:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002624:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002628:	4641      	mov	r1, r8
 800262a:	1851      	adds	r1, r2, r1
 800262c:	6339      	str	r1, [r7, #48]	; 0x30
 800262e:	4649      	mov	r1, r9
 8002630:	414b      	adcs	r3, r1
 8002632:	637b      	str	r3, [r7, #52]	; 0x34
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002640:	4659      	mov	r1, fp
 8002642:	00cb      	lsls	r3, r1, #3
 8002644:	4651      	mov	r1, sl
 8002646:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800264a:	4651      	mov	r1, sl
 800264c:	00ca      	lsls	r2, r1, #3
 800264e:	4610      	mov	r0, r2
 8002650:	4619      	mov	r1, r3
 8002652:	4603      	mov	r3, r0
 8002654:	4642      	mov	r2, r8
 8002656:	189b      	adds	r3, r3, r2
 8002658:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800265c:	464b      	mov	r3, r9
 800265e:	460a      	mov	r2, r1
 8002660:	eb42 0303 	adc.w	r3, r2, r3
 8002664:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002674:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002678:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800267c:	460b      	mov	r3, r1
 800267e:	18db      	adds	r3, r3, r3
 8002680:	62bb      	str	r3, [r7, #40]	; 0x28
 8002682:	4613      	mov	r3, r2
 8002684:	eb42 0303 	adc.w	r3, r2, r3
 8002688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800268a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800268e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002692:	f7fd fdbd 	bl	8000210 <__aeabi_uldivmod>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4b0d      	ldr	r3, [pc, #52]	; (80026d0 <UART_SetConfig+0x2d4>)
 800269c:	fba3 1302 	umull	r1, r3, r3, r2
 80026a0:	095b      	lsrs	r3, r3, #5
 80026a2:	2164      	movs	r1, #100	; 0x64
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	3332      	adds	r3, #50	; 0x32
 80026ae:	4a08      	ldr	r2, [pc, #32]	; (80026d0 <UART_SetConfig+0x2d4>)
 80026b0:	fba2 2303 	umull	r2, r3, r2, r3
 80026b4:	095b      	lsrs	r3, r3, #5
 80026b6:	f003 0207 	and.w	r2, r3, #7
 80026ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4422      	add	r2, r4
 80026c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026c4:	e106      	b.n	80028d4 <UART_SetConfig+0x4d8>
 80026c6:	bf00      	nop
 80026c8:	40011000 	.word	0x40011000
 80026cc:	40011400 	.word	0x40011400
 80026d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026d8:	2200      	movs	r2, #0
 80026da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80026de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80026e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80026e6:	4642      	mov	r2, r8
 80026e8:	464b      	mov	r3, r9
 80026ea:	1891      	adds	r1, r2, r2
 80026ec:	6239      	str	r1, [r7, #32]
 80026ee:	415b      	adcs	r3, r3
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
 80026f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026f6:	4641      	mov	r1, r8
 80026f8:	1854      	adds	r4, r2, r1
 80026fa:	4649      	mov	r1, r9
 80026fc:	eb43 0501 	adc.w	r5, r3, r1
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	f04f 0300 	mov.w	r3, #0
 8002708:	00eb      	lsls	r3, r5, #3
 800270a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800270e:	00e2      	lsls	r2, r4, #3
 8002710:	4614      	mov	r4, r2
 8002712:	461d      	mov	r5, r3
 8002714:	4643      	mov	r3, r8
 8002716:	18e3      	adds	r3, r4, r3
 8002718:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800271c:	464b      	mov	r3, r9
 800271e:	eb45 0303 	adc.w	r3, r5, r3
 8002722:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002732:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	f04f 0300 	mov.w	r3, #0
 800273e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002742:	4629      	mov	r1, r5
 8002744:	008b      	lsls	r3, r1, #2
 8002746:	4621      	mov	r1, r4
 8002748:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800274c:	4621      	mov	r1, r4
 800274e:	008a      	lsls	r2, r1, #2
 8002750:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002754:	f7fd fd5c 	bl	8000210 <__aeabi_uldivmod>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4b60      	ldr	r3, [pc, #384]	; (80028e0 <UART_SetConfig+0x4e4>)
 800275e:	fba3 2302 	umull	r2, r3, r3, r2
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	011c      	lsls	r4, r3, #4
 8002766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800276a:	2200      	movs	r2, #0
 800276c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002770:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002774:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002778:	4642      	mov	r2, r8
 800277a:	464b      	mov	r3, r9
 800277c:	1891      	adds	r1, r2, r2
 800277e:	61b9      	str	r1, [r7, #24]
 8002780:	415b      	adcs	r3, r3
 8002782:	61fb      	str	r3, [r7, #28]
 8002784:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002788:	4641      	mov	r1, r8
 800278a:	1851      	adds	r1, r2, r1
 800278c:	6139      	str	r1, [r7, #16]
 800278e:	4649      	mov	r1, r9
 8002790:	414b      	adcs	r3, r1
 8002792:	617b      	str	r3, [r7, #20]
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027a0:	4659      	mov	r1, fp
 80027a2:	00cb      	lsls	r3, r1, #3
 80027a4:	4651      	mov	r1, sl
 80027a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027aa:	4651      	mov	r1, sl
 80027ac:	00ca      	lsls	r2, r1, #3
 80027ae:	4610      	mov	r0, r2
 80027b0:	4619      	mov	r1, r3
 80027b2:	4603      	mov	r3, r0
 80027b4:	4642      	mov	r2, r8
 80027b6:	189b      	adds	r3, r3, r2
 80027b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027bc:	464b      	mov	r3, r9
 80027be:	460a      	mov	r2, r1
 80027c0:	eb42 0303 	adc.w	r3, r2, r3
 80027c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80027d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80027e0:	4649      	mov	r1, r9
 80027e2:	008b      	lsls	r3, r1, #2
 80027e4:	4641      	mov	r1, r8
 80027e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027ea:	4641      	mov	r1, r8
 80027ec:	008a      	lsls	r2, r1, #2
 80027ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80027f2:	f7fd fd0d 	bl	8000210 <__aeabi_uldivmod>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4611      	mov	r1, r2
 80027fc:	4b38      	ldr	r3, [pc, #224]	; (80028e0 <UART_SetConfig+0x4e4>)
 80027fe:	fba3 2301 	umull	r2, r3, r3, r1
 8002802:	095b      	lsrs	r3, r3, #5
 8002804:	2264      	movs	r2, #100	; 0x64
 8002806:	fb02 f303 	mul.w	r3, r2, r3
 800280a:	1acb      	subs	r3, r1, r3
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	3332      	adds	r3, #50	; 0x32
 8002810:	4a33      	ldr	r2, [pc, #204]	; (80028e0 <UART_SetConfig+0x4e4>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800281c:	441c      	add	r4, r3
 800281e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002822:	2200      	movs	r2, #0
 8002824:	673b      	str	r3, [r7, #112]	; 0x70
 8002826:	677a      	str	r2, [r7, #116]	; 0x74
 8002828:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800282c:	4642      	mov	r2, r8
 800282e:	464b      	mov	r3, r9
 8002830:	1891      	adds	r1, r2, r2
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	415b      	adcs	r3, r3
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800283c:	4641      	mov	r1, r8
 800283e:	1851      	adds	r1, r2, r1
 8002840:	6039      	str	r1, [r7, #0]
 8002842:	4649      	mov	r1, r9
 8002844:	414b      	adcs	r3, r1
 8002846:	607b      	str	r3, [r7, #4]
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	f04f 0300 	mov.w	r3, #0
 8002850:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002854:	4659      	mov	r1, fp
 8002856:	00cb      	lsls	r3, r1, #3
 8002858:	4651      	mov	r1, sl
 800285a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800285e:	4651      	mov	r1, sl
 8002860:	00ca      	lsls	r2, r1, #3
 8002862:	4610      	mov	r0, r2
 8002864:	4619      	mov	r1, r3
 8002866:	4603      	mov	r3, r0
 8002868:	4642      	mov	r2, r8
 800286a:	189b      	adds	r3, r3, r2
 800286c:	66bb      	str	r3, [r7, #104]	; 0x68
 800286e:	464b      	mov	r3, r9
 8002870:	460a      	mov	r2, r1
 8002872:	eb42 0303 	adc.w	r3, r2, r3
 8002876:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	663b      	str	r3, [r7, #96]	; 0x60
 8002882:	667a      	str	r2, [r7, #100]	; 0x64
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002890:	4649      	mov	r1, r9
 8002892:	008b      	lsls	r3, r1, #2
 8002894:	4641      	mov	r1, r8
 8002896:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800289a:	4641      	mov	r1, r8
 800289c:	008a      	lsls	r2, r1, #2
 800289e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80028a2:	f7fd fcb5 	bl	8000210 <__aeabi_uldivmod>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <UART_SetConfig+0x4e4>)
 80028ac:	fba3 1302 	umull	r1, r3, r3, r2
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	2164      	movs	r1, #100	; 0x64
 80028b4:	fb01 f303 	mul.w	r3, r1, r3
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	3332      	adds	r3, #50	; 0x32
 80028be:	4a08      	ldr	r2, [pc, #32]	; (80028e0 <UART_SetConfig+0x4e4>)
 80028c0:	fba2 2303 	umull	r2, r3, r2, r3
 80028c4:	095b      	lsrs	r3, r3, #5
 80028c6:	f003 020f 	and.w	r2, r3, #15
 80028ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4422      	add	r2, r4
 80028d2:	609a      	str	r2, [r3, #8]
}
 80028d4:	bf00      	nop
 80028d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80028da:	46bd      	mov	sp, r7
 80028dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028e0:	51eb851f 	.word	0x51eb851f

080028e4 <__NVIC_SetPriority>:
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	6039      	str	r1, [r7, #0]
 80028ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	db0a      	blt.n	800290e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	490c      	ldr	r1, [pc, #48]	; (8002930 <__NVIC_SetPriority+0x4c>)
 80028fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002902:	0112      	lsls	r2, r2, #4
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	440b      	add	r3, r1
 8002908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800290c:	e00a      	b.n	8002924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	b2da      	uxtb	r2, r3
 8002912:	4908      	ldr	r1, [pc, #32]	; (8002934 <__NVIC_SetPriority+0x50>)
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	3b04      	subs	r3, #4
 800291c:	0112      	lsls	r2, r2, #4
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	440b      	add	r3, r1
 8002922:	761a      	strb	r2, [r3, #24]
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	e000e100 	.word	0xe000e100
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <SysTick_Handler+0x1c>)
 800293e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002940:	f001 fea2 	bl	8004688 <xTaskGetSchedulerState>
 8002944:	4603      	mov	r3, r0
 8002946:	2b01      	cmp	r3, #1
 8002948:	d001      	beq.n	800294e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800294a:	f002 fc8d 	bl	8005268 <xPortSysTickHandler>
  }
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	e000e010 	.word	0xe000e010

08002958 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800295c:	2100      	movs	r1, #0
 800295e:	f06f 0004 	mvn.w	r0, #4
 8002962:	f7ff ffbf 	bl	80028e4 <__NVIC_SetPriority>
#endif
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002972:	f3ef 8305 	mrs	r3, IPSR
 8002976:	603b      	str	r3, [r7, #0]
  return(result);
 8002978:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800297e:	f06f 0305 	mvn.w	r3, #5
 8002982:	607b      	str	r3, [r7, #4]
 8002984:	e00c      	b.n	80029a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002986:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <osKernelInitialize+0x44>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d105      	bne.n	800299a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800298e:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <osKernelInitialize+0x44>)
 8002990:	2201      	movs	r2, #1
 8002992:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002994:	2300      	movs	r3, #0
 8002996:	607b      	str	r3, [r7, #4]
 8002998:	e002      	b.n	80029a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800299a:	f04f 33ff 	mov.w	r3, #4294967295
 800299e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80029a0:	687b      	ldr	r3, [r7, #4]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	20000130 	.word	0x20000130

080029b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029ba:	f3ef 8305 	mrs	r3, IPSR
 80029be:	603b      	str	r3, [r7, #0]
  return(result);
 80029c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80029c6:	f06f 0305 	mvn.w	r3, #5
 80029ca:	607b      	str	r3, [r7, #4]
 80029cc:	e010      	b.n	80029f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80029ce:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <osKernelStart+0x48>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d109      	bne.n	80029ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80029d6:	f7ff ffbf 	bl	8002958 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80029da:	4b08      	ldr	r3, [pc, #32]	; (80029fc <osKernelStart+0x48>)
 80029dc:	2202      	movs	r2, #2
 80029de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80029e0:	f001 f9f6 	bl	8003dd0 <vTaskStartScheduler>
      stat = osOK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	607b      	str	r3, [r7, #4]
 80029e8:	e002      	b.n	80029f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80029ea:	f04f 33ff 	mov.w	r3, #4294967295
 80029ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80029f0:	687b      	ldr	r3, [r7, #4]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20000130 	.word	0x20000130

08002a00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08e      	sub	sp, #56	; 0x38
 8002a04:	af04      	add	r7, sp, #16
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a10:	f3ef 8305 	mrs	r3, IPSR
 8002a14:	617b      	str	r3, [r7, #20]
  return(result);
 8002a16:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d17e      	bne.n	8002b1a <osThreadNew+0x11a>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d07b      	beq.n	8002b1a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002a26:	2318      	movs	r3, #24
 8002a28:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d045      	beq.n	8002ac6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d002      	beq.n	8002a48 <osThreadNew+0x48>
        name = attr->name;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d002      	beq.n	8002a56 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <osThreadNew+0x6e>
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	2b38      	cmp	r3, #56	; 0x38
 8002a60:	d805      	bhi.n	8002a6e <osThreadNew+0x6e>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <osThreadNew+0x72>
        return (NULL);
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e054      	b.n	8002b1c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	089b      	lsrs	r3, r3, #2
 8002a80:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00e      	beq.n	8002aa8 <osThreadNew+0xa8>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	2ba7      	cmp	r3, #167	; 0xa7
 8002a90:	d90a      	bls.n	8002aa8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d006      	beq.n	8002aa8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <osThreadNew+0xa8>
        mem = 1;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	61bb      	str	r3, [r7, #24]
 8002aa6:	e010      	b.n	8002aca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10c      	bne.n	8002aca <osThreadNew+0xca>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d108      	bne.n	8002aca <osThreadNew+0xca>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d104      	bne.n	8002aca <osThreadNew+0xca>
          mem = 0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61bb      	str	r3, [r7, #24]
 8002ac4:	e001      	b.n	8002aca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d110      	bne.n	8002af2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ad8:	9202      	str	r2, [sp, #8]
 8002ada:	9301      	str	r3, [sp, #4]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	6a3a      	ldr	r2, [r7, #32]
 8002ae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 ff86 	bl	80039f8 <xTaskCreateStatic>
 8002aec:	4603      	mov	r3, r0
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	e013      	b.n	8002b1a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d110      	bne.n	8002b1a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	f107 0310 	add.w	r3, r7, #16
 8002b00:	9301      	str	r3, [sp, #4]
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 ffd1 	bl	8003ab2 <xTaskCreate>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d001      	beq.n	8002b1a <osThreadNew+0x11a>
            hTask = NULL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002b1a:	693b      	ldr	r3, [r7, #16]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3728      	adds	r7, #40	; 0x28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b2c:	f3ef 8305 	mrs	r3, IPSR
 8002b30:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b32:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <osDelay+0x1c>
    stat = osErrorISR;
 8002b38:	f06f 0305 	mvn.w	r3, #5
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	e007      	b.n	8002b50 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f001 f90c 	bl	8003d68 <vTaskDelay>
    }
  }

  return (stat);
 8002b50:	68fb      	ldr	r3, [r7, #12]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b08a      	sub	sp, #40	; 0x28
 8002b5e:	af02      	add	r7, sp, #8
 8002b60:	60f8      	str	r0, [r7, #12]
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b6a:	f3ef 8305 	mrs	r3, IPSR
 8002b6e:	613b      	str	r3, [r7, #16]
  return(result);
 8002b70:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d175      	bne.n	8002c62 <osSemaphoreNew+0x108>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d072      	beq.n	8002c62 <osSemaphoreNew+0x108>
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d86e      	bhi.n	8002c62 <osSemaphoreNew+0x108>
    mem = -1;
 8002b84:	f04f 33ff 	mov.w	r3, #4294967295
 8002b88:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d015      	beq.n	8002bbc <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d006      	beq.n	8002ba6 <osSemaphoreNew+0x4c>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	2b4f      	cmp	r3, #79	; 0x4f
 8002b9e:	d902      	bls.n	8002ba6 <osSemaphoreNew+0x4c>
        mem = 1;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	61bb      	str	r3, [r7, #24]
 8002ba4:	e00c      	b.n	8002bc0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d108      	bne.n	8002bc0 <osSemaphoreNew+0x66>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d104      	bne.n	8002bc0 <osSemaphoreNew+0x66>
          mem = 0;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61bb      	str	r3, [r7, #24]
 8002bba:	e001      	b.n	8002bc0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc6:	d04c      	beq.n	8002c62 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d128      	bne.n	8002c20 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d10a      	bne.n	8002bea <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	2203      	movs	r2, #3
 8002bda:	9200      	str	r2, [sp, #0]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2100      	movs	r1, #0
 8002be0:	2001      	movs	r0, #1
 8002be2:	f000 f993 	bl	8002f0c <xQueueGenericCreateStatic>
 8002be6:	61f8      	str	r0, [r7, #28]
 8002be8:	e005      	b.n	8002bf6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8002bea:	2203      	movs	r2, #3
 8002bec:	2100      	movs	r1, #0
 8002bee:	2001      	movs	r0, #1
 8002bf0:	f000 fa04 	bl	8002ffc <xQueueGenericCreate>
 8002bf4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d022      	beq.n	8002c42 <osSemaphoreNew+0xe8>
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d01f      	beq.n	8002c42 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002c02:	2300      	movs	r3, #0
 8002c04:	2200      	movs	r2, #0
 8002c06:	2100      	movs	r1, #0
 8002c08:	69f8      	ldr	r0, [r7, #28]
 8002c0a:	f000 fabf 	bl	800318c <xQueueGenericSend>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d016      	beq.n	8002c42 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8002c14:	69f8      	ldr	r0, [r7, #28]
 8002c16:	f000 fd33 	bl	8003680 <vQueueDelete>
            hSemaphore = NULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	e010      	b.n	8002c42 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d108      	bne.n	8002c38 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68b9      	ldr	r1, [r7, #8]
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f000 fa41 	bl	80030b6 <xQueueCreateCountingSemaphoreStatic>
 8002c34:	61f8      	str	r0, [r7, #28]
 8002c36:	e004      	b.n	8002c42 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002c38:	68b9      	ldr	r1, [r7, #8]
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 fa72 	bl	8003124 <xQueueCreateCountingSemaphore>
 8002c40:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00c      	beq.n	8002c62 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <osSemaphoreNew+0xfc>
          name = attr->name;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	e001      	b.n	8002c5a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002c5a:	6979      	ldr	r1, [r7, #20]
 8002c5c:	69f8      	ldr	r0, [r7, #28]
 8002c5e:	f000 fe43 	bl	80038e8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8002c62:	69fb      	ldr	r3, [r7, #28]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3720      	adds	r7, #32
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4a07      	ldr	r2, [pc, #28]	; (8002c98 <vApplicationGetIdleTaskMemory+0x2c>)
 8002c7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	4a06      	ldr	r2, [pc, #24]	; (8002c9c <vApplicationGetIdleTaskMemory+0x30>)
 8002c82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2280      	movs	r2, #128	; 0x80
 8002c88:	601a      	str	r2, [r3, #0]
}
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	20000134 	.word	0x20000134
 8002c9c:	200001dc 	.word	0x200001dc

08002ca0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4a07      	ldr	r2, [pc, #28]	; (8002ccc <vApplicationGetTimerTaskMemory+0x2c>)
 8002cb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	4a06      	ldr	r2, [pc, #24]	; (8002cd0 <vApplicationGetTimerTaskMemory+0x30>)
 8002cb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cbe:	601a      	str	r2, [r3, #0]
}
 8002cc0:	bf00      	nop
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	200003dc 	.word	0x200003dc
 8002cd0:	20000484 	.word	0x20000484

08002cd4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f103 0208 	add.w	r2, r3, #8
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f103 0208 	add.w	r2, r3, #8
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f103 0208 	add.w	r2, r3, #8
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b085      	sub	sp, #20
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	601a      	str	r2, [r3, #0]
}
 8002d6a:	bf00      	nop
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d76:	b480      	push	{r7}
 8002d78:	b085      	sub	sp, #20
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8c:	d103      	bne.n	8002d96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	e00c      	b.n	8002db0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3308      	adds	r3, #8
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	e002      	b.n	8002da4 <vListInsert+0x2e>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d2f6      	bcs.n	8002d9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	601a      	str	r2, [r3, #0]
}
 8002ddc:	bf00      	nop
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6892      	ldr	r2, [r2, #8]
 8002dfe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6852      	ldr	r2, [r2, #4]
 8002e08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d103      	bne.n	8002e1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	1e5a      	subs	r2, r3, #1
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10a      	bne.n	8002e66 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e54:	f383 8811 	msr	BASEPRI, r3
 8002e58:	f3bf 8f6f 	isb	sy
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e62:	bf00      	nop
 8002e64:	e7fe      	b.n	8002e64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002e66:	f002 f96d 	bl	8005144 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e72:	68f9      	ldr	r1, [r7, #12]
 8002e74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e76:	fb01 f303 	mul.w	r3, r1, r3
 8002e7a:	441a      	add	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e96:	3b01      	subs	r3, #1
 8002e98:	68f9      	ldr	r1, [r7, #12]
 8002e9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	441a      	add	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	22ff      	movs	r2, #255	; 0xff
 8002eaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	22ff      	movs	r2, #255	; 0xff
 8002eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d114      	bne.n	8002ee6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d01a      	beq.n	8002efa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	3310      	adds	r3, #16
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f001 fa1b 	bl	8004304 <xTaskRemoveFromEventList>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d012      	beq.n	8002efa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <xQueueGenericReset+0xcc>)
 8002ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	f3bf 8f6f 	isb	sy
 8002ee4:	e009      	b.n	8002efa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	3310      	adds	r3, #16
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff fef2 	bl	8002cd4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	3324      	adds	r3, #36	; 0x24
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff feed 	bl	8002cd4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002efa:	f002 f953 	bl	80051a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002efe:	2301      	movs	r3, #1
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	e000ed04 	.word	0xe000ed04

08002f0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08e      	sub	sp, #56	; 0x38
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10a      	bne.n	8002f36 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f32:	bf00      	nop
 8002f34:	e7fe      	b.n	8002f34 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10a      	bne.n	8002f52 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f40:	f383 8811 	msr	BASEPRI, r3
 8002f44:	f3bf 8f6f 	isb	sy
 8002f48:	f3bf 8f4f 	dsb	sy
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f4e:	bf00      	nop
 8002f50:	e7fe      	b.n	8002f50 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <xQueueGenericCreateStatic+0x52>
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <xQueueGenericCreateStatic+0x56>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <xQueueGenericCreateStatic+0x58>
 8002f62:	2300      	movs	r3, #0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10a      	bne.n	8002f7e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6c:	f383 8811 	msr	BASEPRI, r3
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	623b      	str	r3, [r7, #32]
}
 8002f7a:	bf00      	nop
 8002f7c:	e7fe      	b.n	8002f7c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d102      	bne.n	8002f8a <xQueueGenericCreateStatic+0x7e>
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <xQueueGenericCreateStatic+0x82>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <xQueueGenericCreateStatic+0x84>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10a      	bne.n	8002faa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f98:	f383 8811 	msr	BASEPRI, r3
 8002f9c:	f3bf 8f6f 	isb	sy
 8002fa0:	f3bf 8f4f 	dsb	sy
 8002fa4:	61fb      	str	r3, [r7, #28]
}
 8002fa6:	bf00      	nop
 8002fa8:	e7fe      	b.n	8002fa8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002faa:	2350      	movs	r3, #80	; 0x50
 8002fac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2b50      	cmp	r3, #80	; 0x50
 8002fb2:	d00a      	beq.n	8002fca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb8:	f383 8811 	msr	BASEPRI, r3
 8002fbc:	f3bf 8f6f 	isb	sy
 8002fc0:	f3bf 8f4f 	dsb	sy
 8002fc4:	61bb      	str	r3, [r7, #24]
}
 8002fc6:	bf00      	nop
 8002fc8:	e7fe      	b.n	8002fc8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002fca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00d      	beq.n	8002ff2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002fde:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	68b9      	ldr	r1, [r7, #8]
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 f83f 	bl	8003070 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3730      	adds	r7, #48	; 0x30
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08a      	sub	sp, #40	; 0x28
 8003000:	af02      	add	r7, sp, #8
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	4613      	mov	r3, r2
 8003008:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10a      	bne.n	8003026 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003014:	f383 8811 	msr	BASEPRI, r3
 8003018:	f3bf 8f6f 	isb	sy
 800301c:	f3bf 8f4f 	dsb	sy
 8003020:	613b      	str	r3, [r7, #16]
}
 8003022:	bf00      	nop
 8003024:	e7fe      	b.n	8003024 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	fb02 f303 	mul.w	r3, r2, r3
 800302e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	3350      	adds	r3, #80	; 0x50
 8003034:	4618      	mov	r0, r3
 8003036:	f002 f9a7 	bl	8005388 <pvPortMalloc>
 800303a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d011      	beq.n	8003066 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	3350      	adds	r3, #80	; 0x50
 800304a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003054:	79fa      	ldrb	r2, [r7, #7]
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	4613      	mov	r3, r2
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	68b9      	ldr	r1, [r7, #8]
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 f805 	bl	8003070 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003066:	69bb      	ldr	r3, [r7, #24]
	}
 8003068:	4618      	mov	r0, r3
 800306a:	3720      	adds	r7, #32
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
 800307c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d103      	bne.n	800308c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	e002      	b.n	8003092 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800309e:	2101      	movs	r1, #1
 80030a0:	69b8      	ldr	r0, [r7, #24]
 80030a2:	f7ff fecb 	bl	8002e3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	78fa      	ldrb	r2, [r7, #3]
 80030aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80030ae:	bf00      	nop
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b08a      	sub	sp, #40	; 0x28
 80030ba:	af02      	add	r7, sp, #8
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10a      	bne.n	80030de <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80030c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	61bb      	str	r3, [r7, #24]
}
 80030da:	bf00      	nop
 80030dc:	e7fe      	b.n	80030dc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d90a      	bls.n	80030fc <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80030e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ea:	f383 8811 	msr	BASEPRI, r3
 80030ee:	f3bf 8f6f 	isb	sy
 80030f2:	f3bf 8f4f 	dsb	sy
 80030f6:	617b      	str	r3, [r7, #20]
}
 80030f8:	bf00      	nop
 80030fa:	e7fe      	b.n	80030fa <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80030fc:	2302      	movs	r3, #2
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	2100      	movs	r1, #0
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f7ff ff00 	bl	8002f0c <xQueueGenericCreateStatic>
 800310c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800311a:	69fb      	ldr	r3, [r7, #28]
	}
 800311c:	4618      	mov	r0, r3
 800311e:	3720      	adds	r7, #32
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10a      	bne.n	800314a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8003134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003138:	f383 8811 	msr	BASEPRI, r3
 800313c:	f3bf 8f6f 	isb	sy
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	613b      	str	r3, [r7, #16]
}
 8003146:	bf00      	nop
 8003148:	e7fe      	b.n	8003148 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	429a      	cmp	r2, r3
 8003150:	d90a      	bls.n	8003168 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8003152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003156:	f383 8811 	msr	BASEPRI, r3
 800315a:	f3bf 8f6f 	isb	sy
 800315e:	f3bf 8f4f 	dsb	sy
 8003162:	60fb      	str	r3, [r7, #12]
}
 8003164:	bf00      	nop
 8003166:	e7fe      	b.n	8003166 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003168:	2202      	movs	r2, #2
 800316a:	2100      	movs	r1, #0
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7ff ff45 	bl	8002ffc <xQueueGenericCreate>
 8003172:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003180:	697b      	ldr	r3, [r7, #20]
	}
 8003182:	4618      	mov	r0, r3
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
	...

0800318c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08e      	sub	sp, #56	; 0x38
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800319a:	2300      	movs	r3, #0
 800319c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10a      	bne.n	80031be <xQueueGenericSend+0x32>
	__asm volatile
 80031a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ac:	f383 8811 	msr	BASEPRI, r3
 80031b0:	f3bf 8f6f 	isb	sy
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80031ba:	bf00      	nop
 80031bc:	e7fe      	b.n	80031bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d103      	bne.n	80031cc <xQueueGenericSend+0x40>
 80031c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <xQueueGenericSend+0x44>
 80031cc:	2301      	movs	r3, #1
 80031ce:	e000      	b.n	80031d2 <xQueueGenericSend+0x46>
 80031d0:	2300      	movs	r3, #0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10a      	bne.n	80031ec <xQueueGenericSend+0x60>
	__asm volatile
 80031d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031da:	f383 8811 	msr	BASEPRI, r3
 80031de:	f3bf 8f6f 	isb	sy
 80031e2:	f3bf 8f4f 	dsb	sy
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031e8:	bf00      	nop
 80031ea:	e7fe      	b.n	80031ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d103      	bne.n	80031fa <xQueueGenericSend+0x6e>
 80031f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d101      	bne.n	80031fe <xQueueGenericSend+0x72>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <xQueueGenericSend+0x74>
 80031fe:	2300      	movs	r3, #0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10a      	bne.n	800321a <xQueueGenericSend+0x8e>
	__asm volatile
 8003204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003208:	f383 8811 	msr	BASEPRI, r3
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f3bf 8f4f 	dsb	sy
 8003214:	623b      	str	r3, [r7, #32]
}
 8003216:	bf00      	nop
 8003218:	e7fe      	b.n	8003218 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800321a:	f001 fa35 	bl	8004688 <xTaskGetSchedulerState>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d102      	bne.n	800322a <xQueueGenericSend+0x9e>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <xQueueGenericSend+0xa2>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <xQueueGenericSend+0xa4>
 800322e:	2300      	movs	r3, #0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10a      	bne.n	800324a <xQueueGenericSend+0xbe>
	__asm volatile
 8003234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003238:	f383 8811 	msr	BASEPRI, r3
 800323c:	f3bf 8f6f 	isb	sy
 8003240:	f3bf 8f4f 	dsb	sy
 8003244:	61fb      	str	r3, [r7, #28]
}
 8003246:	bf00      	nop
 8003248:	e7fe      	b.n	8003248 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800324a:	f001 ff7b 	bl	8005144 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800324e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003256:	429a      	cmp	r2, r3
 8003258:	d302      	bcc.n	8003260 <xQueueGenericSend+0xd4>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d129      	bne.n	80032b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	68b9      	ldr	r1, [r7, #8]
 8003264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003266:	f000 fa2e 	bl	80036c6 <prvCopyDataToQueue>
 800326a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800326c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	2b00      	cmp	r3, #0
 8003272:	d010      	beq.n	8003296 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003276:	3324      	adds	r3, #36	; 0x24
 8003278:	4618      	mov	r0, r3
 800327a:	f001 f843 	bl	8004304 <xTaskRemoveFromEventList>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d013      	beq.n	80032ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003284:	4b3f      	ldr	r3, [pc, #252]	; (8003384 <xQueueGenericSend+0x1f8>)
 8003286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	f3bf 8f4f 	dsb	sy
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	e00a      	b.n	80032ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003298:	2b00      	cmp	r3, #0
 800329a:	d007      	beq.n	80032ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800329c:	4b39      	ldr	r3, [pc, #228]	; (8003384 <xQueueGenericSend+0x1f8>)
 800329e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	f3bf 8f4f 	dsb	sy
 80032a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80032ac:	f001 ff7a 	bl	80051a4 <vPortExitCritical>
				return pdPASS;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e063      	b.n	800337c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d103      	bne.n	80032c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032ba:	f001 ff73 	bl	80051a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	e05c      	b.n	800337c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d106      	bne.n	80032d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032c8:	f107 0314 	add.w	r3, r7, #20
 80032cc:	4618      	mov	r0, r3
 80032ce:	f001 f87d 	bl	80043cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032d2:	2301      	movs	r3, #1
 80032d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032d6:	f001 ff65 	bl	80051a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032da:	f000 fde9 	bl	8003eb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032de:	f001 ff31 	bl	8005144 <vPortEnterCritical>
 80032e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032e8:	b25b      	sxtb	r3, r3
 80032ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ee:	d103      	bne.n	80032f8 <xQueueGenericSend+0x16c>
 80032f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032fe:	b25b      	sxtb	r3, r3
 8003300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003304:	d103      	bne.n	800330e <xQueueGenericSend+0x182>
 8003306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800330e:	f001 ff49 	bl	80051a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003312:	1d3a      	adds	r2, r7, #4
 8003314:	f107 0314 	add.w	r3, r7, #20
 8003318:	4611      	mov	r1, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f001 f86c 	bl	80043f8 <xTaskCheckForTimeOut>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d124      	bne.n	8003370 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003326:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003328:	f000 fac5 	bl	80038b6 <prvIsQueueFull>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d018      	beq.n	8003364 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003334:	3310      	adds	r3, #16
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	4611      	mov	r1, r2
 800333a:	4618      	mov	r0, r3
 800333c:	f000 ff92 	bl	8004264 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003340:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003342:	f000 fa50 	bl	80037e6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003346:	f000 fdc1 	bl	8003ecc <xTaskResumeAll>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	f47f af7c 	bne.w	800324a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003352:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <xQueueGenericSend+0x1f8>)
 8003354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	f3bf 8f6f 	isb	sy
 8003362:	e772      	b.n	800324a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003364:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003366:	f000 fa3e 	bl	80037e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800336a:	f000 fdaf 	bl	8003ecc <xTaskResumeAll>
 800336e:	e76c      	b.n	800324a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003370:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003372:	f000 fa38 	bl	80037e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003376:	f000 fda9 	bl	8003ecc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800337a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800337c:	4618      	mov	r0, r3
 800337e:	3738      	adds	r7, #56	; 0x38
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	e000ed04 	.word	0xe000ed04

08003388 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b090      	sub	sp, #64	; 0x40
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
 8003394:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800339a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10a      	bne.n	80033b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80033a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a4:	f383 8811 	msr	BASEPRI, r3
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80033b2:	bf00      	nop
 80033b4:	e7fe      	b.n	80033b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d103      	bne.n	80033c4 <xQueueGenericSendFromISR+0x3c>
 80033bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <xQueueGenericSendFromISR+0x40>
 80033c4:	2301      	movs	r3, #1
 80033c6:	e000      	b.n	80033ca <xQueueGenericSendFromISR+0x42>
 80033c8:	2300      	movs	r3, #0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10a      	bne.n	80033e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80033ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d2:	f383 8811 	msr	BASEPRI, r3
 80033d6:	f3bf 8f6f 	isb	sy
 80033da:	f3bf 8f4f 	dsb	sy
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80033e0:	bf00      	nop
 80033e2:	e7fe      	b.n	80033e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d103      	bne.n	80033f2 <xQueueGenericSendFromISR+0x6a>
 80033ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <xQueueGenericSendFromISR+0x6e>
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <xQueueGenericSendFromISR+0x70>
 80033f6:	2300      	movs	r3, #0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10a      	bne.n	8003412 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80033fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003400:	f383 8811 	msr	BASEPRI, r3
 8003404:	f3bf 8f6f 	isb	sy
 8003408:	f3bf 8f4f 	dsb	sy
 800340c:	623b      	str	r3, [r7, #32]
}
 800340e:	bf00      	nop
 8003410:	e7fe      	b.n	8003410 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003412:	f001 ff79 	bl	8005308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003416:	f3ef 8211 	mrs	r2, BASEPRI
 800341a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341e:	f383 8811 	msr	BASEPRI, r3
 8003422:	f3bf 8f6f 	isb	sy
 8003426:	f3bf 8f4f 	dsb	sy
 800342a:	61fa      	str	r2, [r7, #28]
 800342c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800342e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003430:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343a:	429a      	cmp	r2, r3
 800343c:	d302      	bcc.n	8003444 <xQueueGenericSendFromISR+0xbc>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b02      	cmp	r3, #2
 8003442:	d12f      	bne.n	80034a4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003446:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800344a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800344e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003452:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	68b9      	ldr	r1, [r7, #8]
 8003458:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800345a:	f000 f934 	bl	80036c6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800345e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003466:	d112      	bne.n	800348e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	2b00      	cmp	r3, #0
 800346e:	d016      	beq.n	800349e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003472:	3324      	adds	r3, #36	; 0x24
 8003474:	4618      	mov	r0, r3
 8003476:	f000 ff45 	bl	8004304 <xTaskRemoveFromEventList>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00e      	beq.n	800349e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00b      	beq.n	800349e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	e007      	b.n	800349e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800348e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003492:	3301      	adds	r3, #1
 8003494:	b2db      	uxtb	r3, r3
 8003496:	b25a      	sxtb	r2, r3
 8003498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800349e:	2301      	movs	r3, #1
 80034a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80034a2:	e001      	b.n	80034a8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034aa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80034b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80034b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3740      	adds	r7, #64	; 0x40
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08c      	sub	sp, #48	; 0x30
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80034cc:	2300      	movs	r3, #0
 80034ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10a      	bne.n	80034f0 <xQueueReceive+0x30>
	__asm volatile
 80034da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034de:	f383 8811 	msr	BASEPRI, r3
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	623b      	str	r3, [r7, #32]
}
 80034ec:	bf00      	nop
 80034ee:	e7fe      	b.n	80034ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d103      	bne.n	80034fe <xQueueReceive+0x3e>
 80034f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <xQueueReceive+0x42>
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <xQueueReceive+0x44>
 8003502:	2300      	movs	r3, #0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10a      	bne.n	800351e <xQueueReceive+0x5e>
	__asm volatile
 8003508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800350c:	f383 8811 	msr	BASEPRI, r3
 8003510:	f3bf 8f6f 	isb	sy
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	61fb      	str	r3, [r7, #28]
}
 800351a:	bf00      	nop
 800351c:	e7fe      	b.n	800351c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800351e:	f001 f8b3 	bl	8004688 <xTaskGetSchedulerState>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d102      	bne.n	800352e <xQueueReceive+0x6e>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <xQueueReceive+0x72>
 800352e:	2301      	movs	r3, #1
 8003530:	e000      	b.n	8003534 <xQueueReceive+0x74>
 8003532:	2300      	movs	r3, #0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10a      	bne.n	800354e <xQueueReceive+0x8e>
	__asm volatile
 8003538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353c:	f383 8811 	msr	BASEPRI, r3
 8003540:	f3bf 8f6f 	isb	sy
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	61bb      	str	r3, [r7, #24]
}
 800354a:	bf00      	nop
 800354c:	e7fe      	b.n	800354c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800354e:	f001 fdf9 	bl	8005144 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003556:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	2b00      	cmp	r3, #0
 800355c:	d01f      	beq.n	800359e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800355e:	68b9      	ldr	r1, [r7, #8]
 8003560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003562:	f000 f91a 	bl	800379a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	1e5a      	subs	r2, r3, #1
 800356a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800356e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00f      	beq.n	8003596 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003578:	3310      	adds	r3, #16
 800357a:	4618      	mov	r0, r3
 800357c:	f000 fec2 	bl	8004304 <xTaskRemoveFromEventList>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d007      	beq.n	8003596 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003586:	4b3d      	ldr	r3, [pc, #244]	; (800367c <xQueueReceive+0x1bc>)
 8003588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003596:	f001 fe05 	bl	80051a4 <vPortExitCritical>
				return pdPASS;
 800359a:	2301      	movs	r3, #1
 800359c:	e069      	b.n	8003672 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d103      	bne.n	80035ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035a4:	f001 fdfe 	bl	80051a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80035a8:	2300      	movs	r3, #0
 80035aa:	e062      	b.n	8003672 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035b2:	f107 0310 	add.w	r3, r7, #16
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 ff08 	bl	80043cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035bc:	2301      	movs	r3, #1
 80035be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035c0:	f001 fdf0 	bl	80051a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035c4:	f000 fc74 	bl	8003eb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035c8:	f001 fdbc 	bl	8005144 <vPortEnterCritical>
 80035cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035d2:	b25b      	sxtb	r3, r3
 80035d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d8:	d103      	bne.n	80035e2 <xQueueReceive+0x122>
 80035da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035e8:	b25b      	sxtb	r3, r3
 80035ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ee:	d103      	bne.n	80035f8 <xQueueReceive+0x138>
 80035f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035f8:	f001 fdd4 	bl	80051a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035fc:	1d3a      	adds	r2, r7, #4
 80035fe:	f107 0310 	add.w	r3, r7, #16
 8003602:	4611      	mov	r1, r2
 8003604:	4618      	mov	r0, r3
 8003606:	f000 fef7 	bl	80043f8 <xTaskCheckForTimeOut>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d123      	bne.n	8003658 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003612:	f000 f93a 	bl	800388a <prvIsQueueEmpty>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d017      	beq.n	800364c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800361c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361e:	3324      	adds	r3, #36	; 0x24
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	4611      	mov	r1, r2
 8003624:	4618      	mov	r0, r3
 8003626:	f000 fe1d 	bl	8004264 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800362a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800362c:	f000 f8db 	bl	80037e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003630:	f000 fc4c 	bl	8003ecc <xTaskResumeAll>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d189      	bne.n	800354e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800363a:	4b10      	ldr	r3, [pc, #64]	; (800367c <xQueueReceive+0x1bc>)
 800363c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	f3bf 8f6f 	isb	sy
 800364a:	e780      	b.n	800354e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800364c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800364e:	f000 f8ca 	bl	80037e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003652:	f000 fc3b 	bl	8003ecc <xTaskResumeAll>
 8003656:	e77a      	b.n	800354e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800365a:	f000 f8c4 	bl	80037e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800365e:	f000 fc35 	bl	8003ecc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003662:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003664:	f000 f911 	bl	800388a <prvIsQueueEmpty>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	f43f af6f 	beq.w	800354e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003670:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003672:	4618      	mov	r0, r3
 8003674:	3730      	adds	r7, #48	; 0x30
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	e000ed04 	.word	0xe000ed04

08003680 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10a      	bne.n	80036a8 <vQueueDelete+0x28>
	__asm volatile
 8003692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003696:	f383 8811 	msr	BASEPRI, r3
 800369a:	f3bf 8f6f 	isb	sy
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	60bb      	str	r3, [r7, #8]
}
 80036a4:	bf00      	nop
 80036a6:	e7fe      	b.n	80036a6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 f947 	bl	800393c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d102      	bne.n	80036be <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f001 ff31 	bl	8005520 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80036be:	bf00      	nop
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b086      	sub	sp, #24
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80036d2:	2300      	movs	r3, #0
 80036d4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10d      	bne.n	8003700 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d14d      	bne.n	8003788 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 ffe7 	bl	80046c4 <xTaskPriorityDisinherit>
 80036f6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	609a      	str	r2, [r3, #8]
 80036fe:	e043      	b.n	8003788 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d119      	bne.n	800373a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6858      	ldr	r0, [r3, #4]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	461a      	mov	r2, r3
 8003710:	68b9      	ldr	r1, [r7, #8]
 8003712:	f002 f8a7 	bl	8005864 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	441a      	add	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	429a      	cmp	r2, r3
 800372e:	d32b      	bcc.n	8003788 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	605a      	str	r2, [r3, #4]
 8003738:	e026      	b.n	8003788 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	68d8      	ldr	r0, [r3, #12]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	461a      	mov	r2, r3
 8003744:	68b9      	ldr	r1, [r7, #8]
 8003746:	f002 f88d 	bl	8005864 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	425b      	negs	r3, r3
 8003754:	441a      	add	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d207      	bcs.n	8003776 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	425b      	negs	r3, r3
 8003770:	441a      	add	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b02      	cmp	r3, #2
 800377a:	d105      	bne.n	8003788 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	3b01      	subs	r3, #1
 8003786:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003790:	697b      	ldr	r3, [r7, #20]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b082      	sub	sp, #8
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d018      	beq.n	80037de <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	441a      	add	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d303      	bcc.n	80037ce <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68d9      	ldr	r1, [r3, #12]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	461a      	mov	r2, r3
 80037d8:	6838      	ldr	r0, [r7, #0]
 80037da:	f002 f843 	bl	8005864 <memcpy>
	}
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b084      	sub	sp, #16
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80037ee:	f001 fca9 	bl	8005144 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037f8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037fa:	e011      	b.n	8003820 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	2b00      	cmp	r3, #0
 8003802:	d012      	beq.n	800382a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3324      	adds	r3, #36	; 0x24
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fd7b 	bl	8004304 <xTaskRemoveFromEventList>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003814:	f000 fe52 	bl	80044bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003818:	7bfb      	ldrb	r3, [r7, #15]
 800381a:	3b01      	subs	r3, #1
 800381c:	b2db      	uxtb	r3, r3
 800381e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003824:	2b00      	cmp	r3, #0
 8003826:	dce9      	bgt.n	80037fc <prvUnlockQueue+0x16>
 8003828:	e000      	b.n	800382c <prvUnlockQueue+0x46>
					break;
 800382a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	22ff      	movs	r2, #255	; 0xff
 8003830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003834:	f001 fcb6 	bl	80051a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003838:	f001 fc84 	bl	8005144 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003842:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003844:	e011      	b.n	800386a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d012      	beq.n	8003874 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3310      	adds	r3, #16
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fd56 	bl	8004304 <xTaskRemoveFromEventList>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800385e:	f000 fe2d 	bl	80044bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003862:	7bbb      	ldrb	r3, [r7, #14]
 8003864:	3b01      	subs	r3, #1
 8003866:	b2db      	uxtb	r3, r3
 8003868:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800386a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800386e:	2b00      	cmp	r3, #0
 8003870:	dce9      	bgt.n	8003846 <prvUnlockQueue+0x60>
 8003872:	e000      	b.n	8003876 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003874:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	22ff      	movs	r2, #255	; 0xff
 800387a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800387e:	f001 fc91 	bl	80051a4 <vPortExitCritical>
}
 8003882:	bf00      	nop
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b084      	sub	sp, #16
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003892:	f001 fc57 	bl	8005144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389a:	2b00      	cmp	r3, #0
 800389c:	d102      	bne.n	80038a4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800389e:	2301      	movs	r3, #1
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	e001      	b.n	80038a8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038a4:	2300      	movs	r3, #0
 80038a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038a8:	f001 fc7c 	bl	80051a4 <vPortExitCritical>

	return xReturn;
 80038ac:	68fb      	ldr	r3, [r7, #12]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b084      	sub	sp, #16
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038be:	f001 fc41 	bl	8005144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d102      	bne.n	80038d4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80038ce:	2301      	movs	r3, #1
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	e001      	b.n	80038d8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80038d4:	2300      	movs	r3, #0
 80038d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038d8:	f001 fc64 	bl	80051a4 <vPortExitCritical>

	return xReturn;
 80038dc:	68fb      	ldr	r3, [r7, #12]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038f2:	2300      	movs	r3, #0
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	e014      	b.n	8003922 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80038f8:	4a0f      	ldr	r2, [pc, #60]	; (8003938 <vQueueAddToRegistry+0x50>)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10b      	bne.n	800391c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003904:	490c      	ldr	r1, [pc, #48]	; (8003938 <vQueueAddToRegistry+0x50>)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800390e:	4a0a      	ldr	r2, [pc, #40]	; (8003938 <vQueueAddToRegistry+0x50>)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	4413      	add	r3, r2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800391a:	e006      	b.n	800392a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	3301      	adds	r3, #1
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2b07      	cmp	r3, #7
 8003926:	d9e7      	bls.n	80038f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003928:	bf00      	nop
 800392a:	bf00      	nop
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	20000884 	.word	0x20000884

0800393c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003944:	2300      	movs	r3, #0
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	e016      	b.n	8003978 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800394a:	4a10      	ldr	r2, [pc, #64]	; (800398c <vQueueUnregisterQueue+0x50>)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	4413      	add	r3, r2
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	429a      	cmp	r2, r3
 8003958:	d10b      	bne.n	8003972 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800395a:	4a0c      	ldr	r2, [pc, #48]	; (800398c <vQueueUnregisterQueue+0x50>)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2100      	movs	r1, #0
 8003960:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003964:	4a09      	ldr	r2, [pc, #36]	; (800398c <vQueueUnregisterQueue+0x50>)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	4413      	add	r3, r2
 800396c:	2200      	movs	r2, #0
 800396e:	605a      	str	r2, [r3, #4]
				break;
 8003970:	e006      	b.n	8003980 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3301      	adds	r3, #1
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b07      	cmp	r3, #7
 800397c:	d9e5      	bls.n	800394a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800397e:	bf00      	nop
 8003980:	bf00      	nop
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	20000884 	.word	0x20000884

08003990 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80039a0:	f001 fbd0 	bl	8005144 <vPortEnterCritical>
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039aa:	b25b      	sxtb	r3, r3
 80039ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b0:	d103      	bne.n	80039ba <vQueueWaitForMessageRestricted+0x2a>
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039c0:	b25b      	sxtb	r3, r3
 80039c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c6:	d103      	bne.n	80039d0 <vQueueWaitForMessageRestricted+0x40>
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039d0:	f001 fbe8 	bl	80051a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d106      	bne.n	80039ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	3324      	adds	r3, #36	; 0x24
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 fc61 	bl	80042ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80039ea:	6978      	ldr	r0, [r7, #20]
 80039ec:	f7ff fefb 	bl	80037e6 <prvUnlockQueue>
	}
 80039f0:	bf00      	nop
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08e      	sub	sp, #56	; 0x38
 80039fc:	af04      	add	r7, sp, #16
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10a      	bne.n	8003a22 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	623b      	str	r3, [r7, #32]
}
 8003a1e:	bf00      	nop
 8003a20:	e7fe      	b.n	8003a20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10a      	bne.n	8003a3e <xTaskCreateStatic+0x46>
	__asm volatile
 8003a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	61fb      	str	r3, [r7, #28]
}
 8003a3a:	bf00      	nop
 8003a3c:	e7fe      	b.n	8003a3c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a3e:	23a8      	movs	r3, #168	; 0xa8
 8003a40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	2ba8      	cmp	r3, #168	; 0xa8
 8003a46:	d00a      	beq.n	8003a5e <xTaskCreateStatic+0x66>
	__asm volatile
 8003a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4c:	f383 8811 	msr	BASEPRI, r3
 8003a50:	f3bf 8f6f 	isb	sy
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	61bb      	str	r3, [r7, #24]
}
 8003a5a:	bf00      	nop
 8003a5c:	e7fe      	b.n	8003a5c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a5e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d01e      	beq.n	8003aa4 <xTaskCreateStatic+0xac>
 8003a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d01b      	beq.n	8003aa4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a74:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	2202      	movs	r2, #2
 8003a7a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a7e:	2300      	movs	r3, #0
 8003a80:	9303      	str	r3, [sp, #12]
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	9302      	str	r3, [sp, #8]
 8003a86:	f107 0314 	add.w	r3, r7, #20
 8003a8a:	9301      	str	r3, [sp, #4]
 8003a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	68b9      	ldr	r1, [r7, #8]
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f000 f850 	bl	8003b3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a9e:	f000 f8f3 	bl	8003c88 <prvAddNewTaskToReadyList>
 8003aa2:	e001      	b.n	8003aa8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003aa8:	697b      	ldr	r3, [r7, #20]
	}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3728      	adds	r7, #40	; 0x28
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b08c      	sub	sp, #48	; 0x30
 8003ab6:	af04      	add	r7, sp, #16
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	603b      	str	r3, [r7, #0]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f001 fc5e 	bl	8005388 <pvPortMalloc>
 8003acc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00e      	beq.n	8003af2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ad4:	20a8      	movs	r0, #168	; 0xa8
 8003ad6:	f001 fc57 	bl	8005388 <pvPortMalloc>
 8003ada:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	631a      	str	r2, [r3, #48]	; 0x30
 8003ae8:	e005      	b.n	8003af6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003aea:	6978      	ldr	r0, [r7, #20]
 8003aec:	f001 fd18 	bl	8005520 <vPortFree>
 8003af0:	e001      	b.n	8003af6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d017      	beq.n	8003b2c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b04:	88fa      	ldrh	r2, [r7, #6]
 8003b06:	2300      	movs	r3, #0
 8003b08:	9303      	str	r3, [sp, #12]
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	9302      	str	r3, [sp, #8]
 8003b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b10:	9301      	str	r3, [sp, #4]
 8003b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 f80e 	bl	8003b3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b20:	69f8      	ldr	r0, [r7, #28]
 8003b22:	f000 f8b1 	bl	8003c88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b26:	2301      	movs	r3, #1
 8003b28:	61bb      	str	r3, [r7, #24]
 8003b2a:	e002      	b.n	8003b32 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b32:	69bb      	ldr	r3, [r7, #24]
	}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3720      	adds	r7, #32
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	461a      	mov	r2, r3
 8003b54:	21a5      	movs	r1, #165	; 0xa5
 8003b56:	f001 fe01 	bl	800575c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b64:	3b01      	subs	r3, #1
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	f023 0307 	bic.w	r3, r3, #7
 8003b72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	617b      	str	r3, [r7, #20]
}
 8003b90:	bf00      	nop
 8003b92:	e7fe      	b.n	8003b92 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d01f      	beq.n	8003bda <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61fb      	str	r3, [r7, #28]
 8003b9e:	e012      	b.n	8003bc6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	7819      	ldrb	r1, [r3, #0]
 8003ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	4413      	add	r3, r2
 8003bae:	3334      	adds	r3, #52	; 0x34
 8003bb0:	460a      	mov	r2, r1
 8003bb2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	4413      	add	r3, r2
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d006      	beq.n	8003bce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	61fb      	str	r3, [r7, #28]
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	2b0f      	cmp	r3, #15
 8003bca:	d9e9      	bls.n	8003ba0 <prvInitialiseNewTask+0x64>
 8003bcc:	e000      	b.n	8003bd0 <prvInitialiseNewTask+0x94>
			{
				break;
 8003bce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bd8:	e003      	b.n	8003be2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be4:	2b37      	cmp	r3, #55	; 0x37
 8003be6:	d901      	bls.n	8003bec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003be8:	2337      	movs	r3, #55	; 0x37
 8003bea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bf0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bf6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c00:	3304      	adds	r3, #4
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff f886 	bl	8002d14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0a:	3318      	adds	r3, #24
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff f881 	bl	8002d14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c26:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	3354      	adds	r3, #84	; 0x54
 8003c3c:	224c      	movs	r2, #76	; 0x4c
 8003c3e:	2100      	movs	r1, #0
 8003c40:	4618      	mov	r0, r3
 8003c42:	f001 fd8b 	bl	800575c <memset>
 8003c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c48:	4a0c      	ldr	r2, [pc, #48]	; (8003c7c <prvInitialiseNewTask+0x140>)
 8003c4a:	659a      	str	r2, [r3, #88]	; 0x58
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4e:	4a0c      	ldr	r2, [pc, #48]	; (8003c80 <prvInitialiseNewTask+0x144>)
 8003c50:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c54:	4a0b      	ldr	r2, [pc, #44]	; (8003c84 <prvInitialiseNewTask+0x148>)
 8003c56:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	68f9      	ldr	r1, [r7, #12]
 8003c5c:	69b8      	ldr	r0, [r7, #24]
 8003c5e:	f001 f941 	bl	8004ee4 <pxPortInitialiseStack>
 8003c62:	4602      	mov	r2, r0
 8003c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c66:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c72:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c74:	bf00      	nop
 8003c76:	3720      	adds	r7, #32
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20004b18 	.word	0x20004b18
 8003c80:	20004b80 	.word	0x20004b80
 8003c84:	20004be8 	.word	0x20004be8

08003c88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c90:	f001 fa58 	bl	8005144 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c94:	4b2d      	ldr	r3, [pc, #180]	; (8003d4c <prvAddNewTaskToReadyList+0xc4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	4a2c      	ldr	r2, [pc, #176]	; (8003d4c <prvAddNewTaskToReadyList+0xc4>)
 8003c9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c9e:	4b2c      	ldr	r3, [pc, #176]	; (8003d50 <prvAddNewTaskToReadyList+0xc8>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d109      	bne.n	8003cba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ca6:	4a2a      	ldr	r2, [pc, #168]	; (8003d50 <prvAddNewTaskToReadyList+0xc8>)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cac:	4b27      	ldr	r3, [pc, #156]	; (8003d4c <prvAddNewTaskToReadyList+0xc4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d110      	bne.n	8003cd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003cb4:	f000 fc26 	bl	8004504 <prvInitialiseTaskLists>
 8003cb8:	e00d      	b.n	8003cd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cba:	4b26      	ldr	r3, [pc, #152]	; (8003d54 <prvAddNewTaskToReadyList+0xcc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d109      	bne.n	8003cd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cc2:	4b23      	ldr	r3, [pc, #140]	; (8003d50 <prvAddNewTaskToReadyList+0xc8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d802      	bhi.n	8003cd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003cd0:	4a1f      	ldr	r2, [pc, #124]	; (8003d50 <prvAddNewTaskToReadyList+0xc8>)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003cd6:	4b20      	ldr	r3, [pc, #128]	; (8003d58 <prvAddNewTaskToReadyList+0xd0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	4a1e      	ldr	r2, [pc, #120]	; (8003d58 <prvAddNewTaskToReadyList+0xd0>)
 8003cde:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ce0:	4b1d      	ldr	r3, [pc, #116]	; (8003d58 <prvAddNewTaskToReadyList+0xd0>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cec:	4b1b      	ldr	r3, [pc, #108]	; (8003d5c <prvAddNewTaskToReadyList+0xd4>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d903      	bls.n	8003cfc <prvAddNewTaskToReadyList+0x74>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	4a18      	ldr	r2, [pc, #96]	; (8003d5c <prvAddNewTaskToReadyList+0xd4>)
 8003cfa:	6013      	str	r3, [r2, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d00:	4613      	mov	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4a15      	ldr	r2, [pc, #84]	; (8003d60 <prvAddNewTaskToReadyList+0xd8>)
 8003d0a:	441a      	add	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	4619      	mov	r1, r3
 8003d12:	4610      	mov	r0, r2
 8003d14:	f7ff f80b 	bl	8002d2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d18:	f001 fa44 	bl	80051a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d1c:	4b0d      	ldr	r3, [pc, #52]	; (8003d54 <prvAddNewTaskToReadyList+0xcc>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00e      	beq.n	8003d42 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d24:	4b0a      	ldr	r3, [pc, #40]	; (8003d50 <prvAddNewTaskToReadyList+0xc8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d207      	bcs.n	8003d42 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d32:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <prvAddNewTaskToReadyList+0xdc>)
 8003d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d42:	bf00      	nop
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20000d98 	.word	0x20000d98
 8003d50:	200008c4 	.word	0x200008c4
 8003d54:	20000da4 	.word	0x20000da4
 8003d58:	20000db4 	.word	0x20000db4
 8003d5c:	20000da0 	.word	0x20000da0
 8003d60:	200008c8 	.word	0x200008c8
 8003d64:	e000ed04 	.word	0xe000ed04

08003d68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d70:	2300      	movs	r3, #0
 8003d72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d017      	beq.n	8003daa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d7a:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <vTaskDelay+0x60>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <vTaskDelay+0x30>
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	60bb      	str	r3, [r7, #8]
}
 8003d94:	bf00      	nop
 8003d96:	e7fe      	b.n	8003d96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003d98:	f000 f88a 	bl	8003eb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fcfe 	bl	80047a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003da4:	f000 f892 	bl	8003ecc <xTaskResumeAll>
 8003da8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d107      	bne.n	8003dc0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003db0:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <vTaskDelay+0x64>)
 8003db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003dc0:	bf00      	nop
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20000dc0 	.word	0x20000dc0
 8003dcc:	e000ed04 	.word	0xe000ed04

08003dd0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08a      	sub	sp, #40	; 0x28
 8003dd4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003dde:	463a      	mov	r2, r7
 8003de0:	1d39      	adds	r1, r7, #4
 8003de2:	f107 0308 	add.w	r3, r7, #8
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fe ff40 	bl	8002c6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003dec:	6839      	ldr	r1, [r7, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	9202      	str	r2, [sp, #8]
 8003df4:	9301      	str	r3, [sp, #4]
 8003df6:	2300      	movs	r3, #0
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	460a      	mov	r2, r1
 8003dfe:	4924      	ldr	r1, [pc, #144]	; (8003e90 <vTaskStartScheduler+0xc0>)
 8003e00:	4824      	ldr	r0, [pc, #144]	; (8003e94 <vTaskStartScheduler+0xc4>)
 8003e02:	f7ff fdf9 	bl	80039f8 <xTaskCreateStatic>
 8003e06:	4603      	mov	r3, r0
 8003e08:	4a23      	ldr	r2, [pc, #140]	; (8003e98 <vTaskStartScheduler+0xc8>)
 8003e0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e0c:	4b22      	ldr	r3, [pc, #136]	; (8003e98 <vTaskStartScheduler+0xc8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e14:	2301      	movs	r3, #1
 8003e16:	617b      	str	r3, [r7, #20]
 8003e18:	e001      	b.n	8003e1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d102      	bne.n	8003e2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003e24:	f000 fd10 	bl	8004848 <xTimerCreateTimerTask>
 8003e28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d11b      	bne.n	8003e68 <vTaskStartScheduler+0x98>
	__asm volatile
 8003e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e34:	f383 8811 	msr	BASEPRI, r3
 8003e38:	f3bf 8f6f 	isb	sy
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	613b      	str	r3, [r7, #16]
}
 8003e42:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e44:	4b15      	ldr	r3, [pc, #84]	; (8003e9c <vTaskStartScheduler+0xcc>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3354      	adds	r3, #84	; 0x54
 8003e4a:	4a15      	ldr	r2, [pc, #84]	; (8003ea0 <vTaskStartScheduler+0xd0>)
 8003e4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e4e:	4b15      	ldr	r3, [pc, #84]	; (8003ea4 <vTaskStartScheduler+0xd4>)
 8003e50:	f04f 32ff 	mov.w	r2, #4294967295
 8003e54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e56:	4b14      	ldr	r3, [pc, #80]	; (8003ea8 <vTaskStartScheduler+0xd8>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e5c:	4b13      	ldr	r3, [pc, #76]	; (8003eac <vTaskStartScheduler+0xdc>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e62:	f001 f8cd 	bl	8005000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e66:	e00e      	b.n	8003e86 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6e:	d10a      	bne.n	8003e86 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e74:	f383 8811 	msr	BASEPRI, r3
 8003e78:	f3bf 8f6f 	isb	sy
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	60fb      	str	r3, [r7, #12]
}
 8003e82:	bf00      	nop
 8003e84:	e7fe      	b.n	8003e84 <vTaskStartScheduler+0xb4>
}
 8003e86:	bf00      	nop
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	080059c8 	.word	0x080059c8
 8003e94:	080044d5 	.word	0x080044d5
 8003e98:	20000dbc 	.word	0x20000dbc
 8003e9c:	200008c4 	.word	0x200008c4
 8003ea0:	2000005c 	.word	0x2000005c
 8003ea4:	20000db8 	.word	0x20000db8
 8003ea8:	20000da4 	.word	0x20000da4
 8003eac:	20000d9c 	.word	0x20000d9c

08003eb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003eb4:	4b04      	ldr	r3, [pc, #16]	; (8003ec8 <vTaskSuspendAll+0x18>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	4a03      	ldr	r2, [pc, #12]	; (8003ec8 <vTaskSuspendAll+0x18>)
 8003ebc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003ebe:	bf00      	nop
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	20000dc0 	.word	0x20000dc0

08003ecc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003eda:	4b42      	ldr	r3, [pc, #264]	; (8003fe4 <xTaskResumeAll+0x118>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10a      	bne.n	8003ef8 <xTaskResumeAll+0x2c>
	__asm volatile
 8003ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee6:	f383 8811 	msr	BASEPRI, r3
 8003eea:	f3bf 8f6f 	isb	sy
 8003eee:	f3bf 8f4f 	dsb	sy
 8003ef2:	603b      	str	r3, [r7, #0]
}
 8003ef4:	bf00      	nop
 8003ef6:	e7fe      	b.n	8003ef6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ef8:	f001 f924 	bl	8005144 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003efc:	4b39      	ldr	r3, [pc, #228]	; (8003fe4 <xTaskResumeAll+0x118>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3b01      	subs	r3, #1
 8003f02:	4a38      	ldr	r2, [pc, #224]	; (8003fe4 <xTaskResumeAll+0x118>)
 8003f04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f06:	4b37      	ldr	r3, [pc, #220]	; (8003fe4 <xTaskResumeAll+0x118>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d162      	bne.n	8003fd4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f0e:	4b36      	ldr	r3, [pc, #216]	; (8003fe8 <xTaskResumeAll+0x11c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d05e      	beq.n	8003fd4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f16:	e02f      	b.n	8003f78 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f18:	4b34      	ldr	r3, [pc, #208]	; (8003fec <xTaskResumeAll+0x120>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	3318      	adds	r3, #24
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fe ff5f 	bl	8002de8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fe ff5a 	bl	8002de8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f38:	4b2d      	ldr	r3, [pc, #180]	; (8003ff0 <xTaskResumeAll+0x124>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d903      	bls.n	8003f48 <xTaskResumeAll+0x7c>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f44:	4a2a      	ldr	r2, [pc, #168]	; (8003ff0 <xTaskResumeAll+0x124>)
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4a27      	ldr	r2, [pc, #156]	; (8003ff4 <xTaskResumeAll+0x128>)
 8003f56:	441a      	add	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4610      	mov	r0, r2
 8003f60:	f7fe fee5 	bl	8002d2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f68:	4b23      	ldr	r3, [pc, #140]	; (8003ff8 <xTaskResumeAll+0x12c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d302      	bcc.n	8003f78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003f72:	4b22      	ldr	r3, [pc, #136]	; (8003ffc <xTaskResumeAll+0x130>)
 8003f74:	2201      	movs	r2, #1
 8003f76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f78:	4b1c      	ldr	r3, [pc, #112]	; (8003fec <xTaskResumeAll+0x120>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1cb      	bne.n	8003f18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f86:	f000 fb5f 	bl	8004648 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f8a:	4b1d      	ldr	r3, [pc, #116]	; (8004000 <xTaskResumeAll+0x134>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d010      	beq.n	8003fb8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f96:	f000 f847 	bl	8004028 <xTaskIncrementTick>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003fa0:	4b16      	ldr	r3, [pc, #88]	; (8003ffc <xTaskResumeAll+0x130>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1f1      	bne.n	8003f96 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003fb2:	4b13      	ldr	r3, [pc, #76]	; (8004000 <xTaskResumeAll+0x134>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003fb8:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <xTaskResumeAll+0x130>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d009      	beq.n	8003fd4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003fc4:	4b0f      	ldr	r3, [pc, #60]	; (8004004 <xTaskResumeAll+0x138>)
 8003fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fd4:	f001 f8e6 	bl	80051a4 <vPortExitCritical>

	return xAlreadyYielded;
 8003fd8:	68bb      	ldr	r3, [r7, #8]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20000dc0 	.word	0x20000dc0
 8003fe8:	20000d98 	.word	0x20000d98
 8003fec:	20000d58 	.word	0x20000d58
 8003ff0:	20000da0 	.word	0x20000da0
 8003ff4:	200008c8 	.word	0x200008c8
 8003ff8:	200008c4 	.word	0x200008c4
 8003ffc:	20000dac 	.word	0x20000dac
 8004000:	20000da8 	.word	0x20000da8
 8004004:	e000ed04 	.word	0xe000ed04

08004008 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800400e:	4b05      	ldr	r3, [pc, #20]	; (8004024 <xTaskGetTickCount+0x1c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004014:	687b      	ldr	r3, [r7, #4]
}
 8004016:	4618      	mov	r0, r3
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	20000d9c 	.word	0x20000d9c

08004028 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004032:	4b4f      	ldr	r3, [pc, #316]	; (8004170 <xTaskIncrementTick+0x148>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	f040 808f 	bne.w	800415a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800403c:	4b4d      	ldr	r3, [pc, #308]	; (8004174 <xTaskIncrementTick+0x14c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3301      	adds	r3, #1
 8004042:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004044:	4a4b      	ldr	r2, [pc, #300]	; (8004174 <xTaskIncrementTick+0x14c>)
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d120      	bne.n	8004092 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004050:	4b49      	ldr	r3, [pc, #292]	; (8004178 <xTaskIncrementTick+0x150>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <xTaskIncrementTick+0x48>
	__asm volatile
 800405a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	603b      	str	r3, [r7, #0]
}
 800406c:	bf00      	nop
 800406e:	e7fe      	b.n	800406e <xTaskIncrementTick+0x46>
 8004070:	4b41      	ldr	r3, [pc, #260]	; (8004178 <xTaskIncrementTick+0x150>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	4b41      	ldr	r3, [pc, #260]	; (800417c <xTaskIncrementTick+0x154>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a3f      	ldr	r2, [pc, #252]	; (8004178 <xTaskIncrementTick+0x150>)
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	4a3f      	ldr	r2, [pc, #252]	; (800417c <xTaskIncrementTick+0x154>)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	4b3e      	ldr	r3, [pc, #248]	; (8004180 <xTaskIncrementTick+0x158>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3301      	adds	r3, #1
 800408a:	4a3d      	ldr	r2, [pc, #244]	; (8004180 <xTaskIncrementTick+0x158>)
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	f000 fadb 	bl	8004648 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004092:	4b3c      	ldr	r3, [pc, #240]	; (8004184 <xTaskIncrementTick+0x15c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	429a      	cmp	r2, r3
 800409a:	d349      	bcc.n	8004130 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800409c:	4b36      	ldr	r3, [pc, #216]	; (8004178 <xTaskIncrementTick+0x150>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d104      	bne.n	80040b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040a6:	4b37      	ldr	r3, [pc, #220]	; (8004184 <xTaskIncrementTick+0x15c>)
 80040a8:	f04f 32ff 	mov.w	r2, #4294967295
 80040ac:	601a      	str	r2, [r3, #0]
					break;
 80040ae:	e03f      	b.n	8004130 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040b0:	4b31      	ldr	r3, [pc, #196]	; (8004178 <xTaskIncrementTick+0x150>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d203      	bcs.n	80040d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80040c8:	4a2e      	ldr	r2, [pc, #184]	; (8004184 <xTaskIncrementTick+0x15c>)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80040ce:	e02f      	b.n	8004130 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	3304      	adds	r3, #4
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7fe fe87 	bl	8002de8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d004      	beq.n	80040ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	3318      	adds	r3, #24
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fe fe7e 	bl	8002de8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f0:	4b25      	ldr	r3, [pc, #148]	; (8004188 <xTaskIncrementTick+0x160>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d903      	bls.n	8004100 <xTaskIncrementTick+0xd8>
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	4a22      	ldr	r2, [pc, #136]	; (8004188 <xTaskIncrementTick+0x160>)
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004104:	4613      	mov	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	4413      	add	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4a1f      	ldr	r2, [pc, #124]	; (800418c <xTaskIncrementTick+0x164>)
 800410e:	441a      	add	r2, r3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	3304      	adds	r3, #4
 8004114:	4619      	mov	r1, r3
 8004116:	4610      	mov	r0, r2
 8004118:	f7fe fe09 	bl	8002d2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004120:	4b1b      	ldr	r3, [pc, #108]	; (8004190 <xTaskIncrementTick+0x168>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004126:	429a      	cmp	r2, r3
 8004128:	d3b8      	bcc.n	800409c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800412a:	2301      	movs	r3, #1
 800412c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800412e:	e7b5      	b.n	800409c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004130:	4b17      	ldr	r3, [pc, #92]	; (8004190 <xTaskIncrementTick+0x168>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004136:	4915      	ldr	r1, [pc, #84]	; (800418c <xTaskIncrementTick+0x164>)
 8004138:	4613      	mov	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d901      	bls.n	800414c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004148:	2301      	movs	r3, #1
 800414a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800414c:	4b11      	ldr	r3, [pc, #68]	; (8004194 <xTaskIncrementTick+0x16c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d007      	beq.n	8004164 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004154:	2301      	movs	r3, #1
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	e004      	b.n	8004164 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800415a:	4b0f      	ldr	r3, [pc, #60]	; (8004198 <xTaskIncrementTick+0x170>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3301      	adds	r3, #1
 8004160:	4a0d      	ldr	r2, [pc, #52]	; (8004198 <xTaskIncrementTick+0x170>)
 8004162:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004164:	697b      	ldr	r3, [r7, #20]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20000dc0 	.word	0x20000dc0
 8004174:	20000d9c 	.word	0x20000d9c
 8004178:	20000d50 	.word	0x20000d50
 800417c:	20000d54 	.word	0x20000d54
 8004180:	20000db0 	.word	0x20000db0
 8004184:	20000db8 	.word	0x20000db8
 8004188:	20000da0 	.word	0x20000da0
 800418c:	200008c8 	.word	0x200008c8
 8004190:	200008c4 	.word	0x200008c4
 8004194:	20000dac 	.word	0x20000dac
 8004198:	20000da8 	.word	0x20000da8

0800419c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80041a2:	4b2a      	ldr	r3, [pc, #168]	; (800424c <vTaskSwitchContext+0xb0>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80041aa:	4b29      	ldr	r3, [pc, #164]	; (8004250 <vTaskSwitchContext+0xb4>)
 80041ac:	2201      	movs	r2, #1
 80041ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80041b0:	e046      	b.n	8004240 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80041b2:	4b27      	ldr	r3, [pc, #156]	; (8004250 <vTaskSwitchContext+0xb4>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041b8:	4b26      	ldr	r3, [pc, #152]	; (8004254 <vTaskSwitchContext+0xb8>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	e010      	b.n	80041e2 <vTaskSwitchContext+0x46>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10a      	bne.n	80041dc <vTaskSwitchContext+0x40>
	__asm volatile
 80041c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ca:	f383 8811 	msr	BASEPRI, r3
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	607b      	str	r3, [r7, #4]
}
 80041d8:	bf00      	nop
 80041da:	e7fe      	b.n	80041da <vTaskSwitchContext+0x3e>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	3b01      	subs	r3, #1
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	491d      	ldr	r1, [pc, #116]	; (8004258 <vTaskSwitchContext+0xbc>)
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4613      	mov	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0e4      	beq.n	80041c0 <vTaskSwitchContext+0x24>
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4613      	mov	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4a15      	ldr	r2, [pc, #84]	; (8004258 <vTaskSwitchContext+0xbc>)
 8004202:	4413      	add	r3, r2
 8004204:	60bb      	str	r3, [r7, #8]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	605a      	str	r2, [r3, #4]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	3308      	adds	r3, #8
 8004218:	429a      	cmp	r2, r3
 800421a:	d104      	bne.n	8004226 <vTaskSwitchContext+0x8a>
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	605a      	str	r2, [r3, #4]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	4a0b      	ldr	r2, [pc, #44]	; (800425c <vTaskSwitchContext+0xc0>)
 800422e:	6013      	str	r3, [r2, #0]
 8004230:	4a08      	ldr	r2, [pc, #32]	; (8004254 <vTaskSwitchContext+0xb8>)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004236:	4b09      	ldr	r3, [pc, #36]	; (800425c <vTaskSwitchContext+0xc0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3354      	adds	r3, #84	; 0x54
 800423c:	4a08      	ldr	r2, [pc, #32]	; (8004260 <vTaskSwitchContext+0xc4>)
 800423e:	6013      	str	r3, [r2, #0]
}
 8004240:	bf00      	nop
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	20000dc0 	.word	0x20000dc0
 8004250:	20000dac 	.word	0x20000dac
 8004254:	20000da0 	.word	0x20000da0
 8004258:	200008c8 	.word	0x200008c8
 800425c:	200008c4 	.word	0x200008c4
 8004260:	2000005c 	.word	0x2000005c

08004264 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10a      	bne.n	800428a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	60fb      	str	r3, [r7, #12]
}
 8004286:	bf00      	nop
 8004288:	e7fe      	b.n	8004288 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800428a:	4b07      	ldr	r3, [pc, #28]	; (80042a8 <vTaskPlaceOnEventList+0x44>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3318      	adds	r3, #24
 8004290:	4619      	mov	r1, r3
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7fe fd6f 	bl	8002d76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004298:	2101      	movs	r1, #1
 800429a:	6838      	ldr	r0, [r7, #0]
 800429c:	f000 fa80 	bl	80047a0 <prvAddCurrentTaskToDelayedList>
}
 80042a0:	bf00      	nop
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	200008c4 	.word	0x200008c4

080042ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10a      	bne.n	80042d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80042be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	617b      	str	r3, [r7, #20]
}
 80042d0:	bf00      	nop
 80042d2:	e7fe      	b.n	80042d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042d4:	4b0a      	ldr	r3, [pc, #40]	; (8004300 <vTaskPlaceOnEventListRestricted+0x54>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3318      	adds	r3, #24
 80042da:	4619      	mov	r1, r3
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f7fe fd26 	bl	8002d2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d002      	beq.n	80042ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80042e8:	f04f 33ff 	mov.w	r3, #4294967295
 80042ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	68b8      	ldr	r0, [r7, #8]
 80042f2:	f000 fa55 	bl	80047a0 <prvAddCurrentTaskToDelayedList>
	}
 80042f6:	bf00      	nop
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	200008c4 	.word	0x200008c4

08004304 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10a      	bne.n	8004330 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	60fb      	str	r3, [r7, #12]
}
 800432c:	bf00      	nop
 800432e:	e7fe      	b.n	800432e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	3318      	adds	r3, #24
 8004334:	4618      	mov	r0, r3
 8004336:	f7fe fd57 	bl	8002de8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800433a:	4b1e      	ldr	r3, [pc, #120]	; (80043b4 <xTaskRemoveFromEventList+0xb0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d11d      	bne.n	800437e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	3304      	adds	r3, #4
 8004346:	4618      	mov	r0, r3
 8004348:	f7fe fd4e 	bl	8002de8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004350:	4b19      	ldr	r3, [pc, #100]	; (80043b8 <xTaskRemoveFromEventList+0xb4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d903      	bls.n	8004360 <xTaskRemoveFromEventList+0x5c>
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	4a16      	ldr	r2, [pc, #88]	; (80043b8 <xTaskRemoveFromEventList+0xb4>)
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004364:	4613      	mov	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4a13      	ldr	r2, [pc, #76]	; (80043bc <xTaskRemoveFromEventList+0xb8>)
 800436e:	441a      	add	r2, r3
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	3304      	adds	r3, #4
 8004374:	4619      	mov	r1, r3
 8004376:	4610      	mov	r0, r2
 8004378:	f7fe fcd9 	bl	8002d2e <vListInsertEnd>
 800437c:	e005      	b.n	800438a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	3318      	adds	r3, #24
 8004382:	4619      	mov	r1, r3
 8004384:	480e      	ldr	r0, [pc, #56]	; (80043c0 <xTaskRemoveFromEventList+0xbc>)
 8004386:	f7fe fcd2 	bl	8002d2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438e:	4b0d      	ldr	r3, [pc, #52]	; (80043c4 <xTaskRemoveFromEventList+0xc0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004394:	429a      	cmp	r2, r3
 8004396:	d905      	bls.n	80043a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004398:	2301      	movs	r3, #1
 800439a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800439c:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <xTaskRemoveFromEventList+0xc4>)
 800439e:	2201      	movs	r2, #1
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	e001      	b.n	80043a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80043a4:	2300      	movs	r3, #0
 80043a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80043a8:	697b      	ldr	r3, [r7, #20]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	20000dc0 	.word	0x20000dc0
 80043b8:	20000da0 	.word	0x20000da0
 80043bc:	200008c8 	.word	0x200008c8
 80043c0:	20000d58 	.word	0x20000d58
 80043c4:	200008c4 	.word	0x200008c4
 80043c8:	20000dac 	.word	0x20000dac

080043cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80043d4:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <vTaskInternalSetTimeOutState+0x24>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80043dc:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <vTaskInternalSetTimeOutState+0x28>)
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	605a      	str	r2, [r3, #4]
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	20000db0 	.word	0x20000db0
 80043f4:	20000d9c 	.word	0x20000d9c

080043f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10a      	bne.n	800441e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	613b      	str	r3, [r7, #16]
}
 800441a:	bf00      	nop
 800441c:	e7fe      	b.n	800441c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10a      	bne.n	800443a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	60fb      	str	r3, [r7, #12]
}
 8004436:	bf00      	nop
 8004438:	e7fe      	b.n	8004438 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800443a:	f000 fe83 	bl	8005144 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800443e:	4b1d      	ldr	r3, [pc, #116]	; (80044b4 <xTaskCheckForTimeOut+0xbc>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004456:	d102      	bne.n	800445e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004458:	2300      	movs	r3, #0
 800445a:	61fb      	str	r3, [r7, #28]
 800445c:	e023      	b.n	80044a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	4b15      	ldr	r3, [pc, #84]	; (80044b8 <xTaskCheckForTimeOut+0xc0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d007      	beq.n	800447a <xTaskCheckForTimeOut+0x82>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	429a      	cmp	r2, r3
 8004472:	d302      	bcc.n	800447a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004474:	2301      	movs	r3, #1
 8004476:	61fb      	str	r3, [r7, #28]
 8004478:	e015      	b.n	80044a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	429a      	cmp	r2, r3
 8004482:	d20b      	bcs.n	800449c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	1ad2      	subs	r2, r2, r3
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7ff ff9b 	bl	80043cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004496:	2300      	movs	r3, #0
 8004498:	61fb      	str	r3, [r7, #28]
 800449a:	e004      	b.n	80044a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80044a2:	2301      	movs	r3, #1
 80044a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80044a6:	f000 fe7d 	bl	80051a4 <vPortExitCritical>

	return xReturn;
 80044aa:	69fb      	ldr	r3, [r7, #28]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3720      	adds	r7, #32
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	20000d9c 	.word	0x20000d9c
 80044b8:	20000db0 	.word	0x20000db0

080044bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80044c0:	4b03      	ldr	r3, [pc, #12]	; (80044d0 <vTaskMissedYield+0x14>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	601a      	str	r2, [r3, #0]
}
 80044c6:	bf00      	nop
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	20000dac 	.word	0x20000dac

080044d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80044dc:	f000 f852 	bl	8004584 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80044e0:	4b06      	ldr	r3, [pc, #24]	; (80044fc <prvIdleTask+0x28>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d9f9      	bls.n	80044dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80044e8:	4b05      	ldr	r3, [pc, #20]	; (8004500 <prvIdleTask+0x2c>)
 80044ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80044f8:	e7f0      	b.n	80044dc <prvIdleTask+0x8>
 80044fa:	bf00      	nop
 80044fc:	200008c8 	.word	0x200008c8
 8004500:	e000ed04 	.word	0xe000ed04

08004504 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800450a:	2300      	movs	r3, #0
 800450c:	607b      	str	r3, [r7, #4]
 800450e:	e00c      	b.n	800452a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4a12      	ldr	r2, [pc, #72]	; (8004564 <prvInitialiseTaskLists+0x60>)
 800451c:	4413      	add	r3, r2
 800451e:	4618      	mov	r0, r3
 8004520:	f7fe fbd8 	bl	8002cd4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	3301      	adds	r3, #1
 8004528:	607b      	str	r3, [r7, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b37      	cmp	r3, #55	; 0x37
 800452e:	d9ef      	bls.n	8004510 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004530:	480d      	ldr	r0, [pc, #52]	; (8004568 <prvInitialiseTaskLists+0x64>)
 8004532:	f7fe fbcf 	bl	8002cd4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004536:	480d      	ldr	r0, [pc, #52]	; (800456c <prvInitialiseTaskLists+0x68>)
 8004538:	f7fe fbcc 	bl	8002cd4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800453c:	480c      	ldr	r0, [pc, #48]	; (8004570 <prvInitialiseTaskLists+0x6c>)
 800453e:	f7fe fbc9 	bl	8002cd4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004542:	480c      	ldr	r0, [pc, #48]	; (8004574 <prvInitialiseTaskLists+0x70>)
 8004544:	f7fe fbc6 	bl	8002cd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004548:	480b      	ldr	r0, [pc, #44]	; (8004578 <prvInitialiseTaskLists+0x74>)
 800454a:	f7fe fbc3 	bl	8002cd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800454e:	4b0b      	ldr	r3, [pc, #44]	; (800457c <prvInitialiseTaskLists+0x78>)
 8004550:	4a05      	ldr	r2, [pc, #20]	; (8004568 <prvInitialiseTaskLists+0x64>)
 8004552:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004554:	4b0a      	ldr	r3, [pc, #40]	; (8004580 <prvInitialiseTaskLists+0x7c>)
 8004556:	4a05      	ldr	r2, [pc, #20]	; (800456c <prvInitialiseTaskLists+0x68>)
 8004558:	601a      	str	r2, [r3, #0]
}
 800455a:	bf00      	nop
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	200008c8 	.word	0x200008c8
 8004568:	20000d28 	.word	0x20000d28
 800456c:	20000d3c 	.word	0x20000d3c
 8004570:	20000d58 	.word	0x20000d58
 8004574:	20000d6c 	.word	0x20000d6c
 8004578:	20000d84 	.word	0x20000d84
 800457c:	20000d50 	.word	0x20000d50
 8004580:	20000d54 	.word	0x20000d54

08004584 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800458a:	e019      	b.n	80045c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800458c:	f000 fdda 	bl	8005144 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004590:	4b10      	ldr	r3, [pc, #64]	; (80045d4 <prvCheckTasksWaitingTermination+0x50>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3304      	adds	r3, #4
 800459c:	4618      	mov	r0, r3
 800459e:	f7fe fc23 	bl	8002de8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80045a2:	4b0d      	ldr	r3, [pc, #52]	; (80045d8 <prvCheckTasksWaitingTermination+0x54>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	4a0b      	ldr	r2, [pc, #44]	; (80045d8 <prvCheckTasksWaitingTermination+0x54>)
 80045aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80045ac:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <prvCheckTasksWaitingTermination+0x58>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3b01      	subs	r3, #1
 80045b2:	4a0a      	ldr	r2, [pc, #40]	; (80045dc <prvCheckTasksWaitingTermination+0x58>)
 80045b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80045b6:	f000 fdf5 	bl	80051a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f810 	bl	80045e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045c0:	4b06      	ldr	r3, [pc, #24]	; (80045dc <prvCheckTasksWaitingTermination+0x58>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1e1      	bne.n	800458c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80045c8:	bf00      	nop
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20000d6c 	.word	0x20000d6c
 80045d8:	20000d98 	.word	0x20000d98
 80045dc:	20000d80 	.word	0x20000d80

080045e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3354      	adds	r3, #84	; 0x54
 80045ec:	4618      	mov	r0, r3
 80045ee:	f001 f8bd 	bl	800576c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d108      	bne.n	800460e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004600:	4618      	mov	r0, r3
 8004602:	f000 ff8d 	bl	8005520 <vPortFree>
				vPortFree( pxTCB );
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 ff8a 	bl	8005520 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800460c:	e018      	b.n	8004640 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004614:	2b01      	cmp	r3, #1
 8004616:	d103      	bne.n	8004620 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 ff81 	bl	8005520 <vPortFree>
	}
 800461e:	e00f      	b.n	8004640 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004626:	2b02      	cmp	r3, #2
 8004628:	d00a      	beq.n	8004640 <prvDeleteTCB+0x60>
	__asm volatile
 800462a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462e:	f383 8811 	msr	BASEPRI, r3
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	60fb      	str	r3, [r7, #12]
}
 800463c:	bf00      	nop
 800463e:	e7fe      	b.n	800463e <prvDeleteTCB+0x5e>
	}
 8004640:	bf00      	nop
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800464e:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <prvResetNextTaskUnblockTime+0x38>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d104      	bne.n	8004662 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004658:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <prvResetNextTaskUnblockTime+0x3c>)
 800465a:	f04f 32ff 	mov.w	r2, #4294967295
 800465e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004660:	e008      	b.n	8004674 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004662:	4b07      	ldr	r3, [pc, #28]	; (8004680 <prvResetNextTaskUnblockTime+0x38>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	4a04      	ldr	r2, [pc, #16]	; (8004684 <prvResetNextTaskUnblockTime+0x3c>)
 8004672:	6013      	str	r3, [r2, #0]
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	20000d50 	.word	0x20000d50
 8004684:	20000db8 	.word	0x20000db8

08004688 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800468e:	4b0b      	ldr	r3, [pc, #44]	; (80046bc <xTaskGetSchedulerState+0x34>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d102      	bne.n	800469c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004696:	2301      	movs	r3, #1
 8004698:	607b      	str	r3, [r7, #4]
 800469a:	e008      	b.n	80046ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800469c:	4b08      	ldr	r3, [pc, #32]	; (80046c0 <xTaskGetSchedulerState+0x38>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d102      	bne.n	80046aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80046a4:	2302      	movs	r3, #2
 80046a6:	607b      	str	r3, [r7, #4]
 80046a8:	e001      	b.n	80046ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80046aa:	2300      	movs	r3, #0
 80046ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80046ae:	687b      	ldr	r3, [r7, #4]
	}
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	20000da4 	.word	0x20000da4
 80046c0:	20000dc0 	.word	0x20000dc0

080046c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d056      	beq.n	8004788 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80046da:	4b2e      	ldr	r3, [pc, #184]	; (8004794 <xTaskPriorityDisinherit+0xd0>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d00a      	beq.n	80046fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80046e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	60fb      	str	r3, [r7, #12]
}
 80046f6:	bf00      	nop
 80046f8:	e7fe      	b.n	80046f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10a      	bne.n	8004718 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004706:	f383 8811 	msr	BASEPRI, r3
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	60bb      	str	r3, [r7, #8]
}
 8004714:	bf00      	nop
 8004716:	e7fe      	b.n	8004716 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800471c:	1e5a      	subs	r2, r3, #1
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800472a:	429a      	cmp	r2, r3
 800472c:	d02c      	beq.n	8004788 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004732:	2b00      	cmp	r3, #0
 8004734:	d128      	bne.n	8004788 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	3304      	adds	r3, #4
 800473a:	4618      	mov	r0, r3
 800473c:	f7fe fb54 	bl	8002de8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004758:	4b0f      	ldr	r3, [pc, #60]	; (8004798 <xTaskPriorityDisinherit+0xd4>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	429a      	cmp	r2, r3
 800475e:	d903      	bls.n	8004768 <xTaskPriorityDisinherit+0xa4>
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004764:	4a0c      	ldr	r2, [pc, #48]	; (8004798 <xTaskPriorityDisinherit+0xd4>)
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476c:	4613      	mov	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4a09      	ldr	r2, [pc, #36]	; (800479c <xTaskPriorityDisinherit+0xd8>)
 8004776:	441a      	add	r2, r3
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	3304      	adds	r3, #4
 800477c:	4619      	mov	r1, r3
 800477e:	4610      	mov	r0, r2
 8004780:	f7fe fad5 	bl	8002d2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004784:	2301      	movs	r3, #1
 8004786:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004788:	697b      	ldr	r3, [r7, #20]
	}
 800478a:	4618      	mov	r0, r3
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	200008c4 	.word	0x200008c4
 8004798:	20000da0 	.word	0x20000da0
 800479c:	200008c8 	.word	0x200008c8

080047a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047aa:	4b21      	ldr	r3, [pc, #132]	; (8004830 <prvAddCurrentTaskToDelayedList+0x90>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047b0:	4b20      	ldr	r3, [pc, #128]	; (8004834 <prvAddCurrentTaskToDelayedList+0x94>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3304      	adds	r3, #4
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fe fb16 	bl	8002de8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c2:	d10a      	bne.n	80047da <prvAddCurrentTaskToDelayedList+0x3a>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d007      	beq.n	80047da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047ca:	4b1a      	ldr	r3, [pc, #104]	; (8004834 <prvAddCurrentTaskToDelayedList+0x94>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3304      	adds	r3, #4
 80047d0:	4619      	mov	r1, r3
 80047d2:	4819      	ldr	r0, [pc, #100]	; (8004838 <prvAddCurrentTaskToDelayedList+0x98>)
 80047d4:	f7fe faab 	bl	8002d2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047d8:	e026      	b.n	8004828 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4413      	add	r3, r2
 80047e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047e2:	4b14      	ldr	r3, [pc, #80]	; (8004834 <prvAddCurrentTaskToDelayedList+0x94>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d209      	bcs.n	8004806 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047f2:	4b12      	ldr	r3, [pc, #72]	; (800483c <prvAddCurrentTaskToDelayedList+0x9c>)
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4b0f      	ldr	r3, [pc, #60]	; (8004834 <prvAddCurrentTaskToDelayedList+0x94>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3304      	adds	r3, #4
 80047fc:	4619      	mov	r1, r3
 80047fe:	4610      	mov	r0, r2
 8004800:	f7fe fab9 	bl	8002d76 <vListInsert>
}
 8004804:	e010      	b.n	8004828 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004806:	4b0e      	ldr	r3, [pc, #56]	; (8004840 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	4b0a      	ldr	r3, [pc, #40]	; (8004834 <prvAddCurrentTaskToDelayedList+0x94>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3304      	adds	r3, #4
 8004810:	4619      	mov	r1, r3
 8004812:	4610      	mov	r0, r2
 8004814:	f7fe faaf 	bl	8002d76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004818:	4b0a      	ldr	r3, [pc, #40]	; (8004844 <prvAddCurrentTaskToDelayedList+0xa4>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	429a      	cmp	r2, r3
 8004820:	d202      	bcs.n	8004828 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004822:	4a08      	ldr	r2, [pc, #32]	; (8004844 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	6013      	str	r3, [r2, #0]
}
 8004828:	bf00      	nop
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	20000d9c 	.word	0x20000d9c
 8004834:	200008c4 	.word	0x200008c4
 8004838:	20000d84 	.word	0x20000d84
 800483c:	20000d54 	.word	0x20000d54
 8004840:	20000d50 	.word	0x20000d50
 8004844:	20000db8 	.word	0x20000db8

08004848 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b08a      	sub	sp, #40	; 0x28
 800484c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004852:	f000 fb07 	bl	8004e64 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004856:	4b1c      	ldr	r3, [pc, #112]	; (80048c8 <xTimerCreateTimerTask+0x80>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d021      	beq.n	80048a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004862:	2300      	movs	r3, #0
 8004864:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004866:	1d3a      	adds	r2, r7, #4
 8004868:	f107 0108 	add.w	r1, r7, #8
 800486c:	f107 030c 	add.w	r3, r7, #12
 8004870:	4618      	mov	r0, r3
 8004872:	f7fe fa15 	bl	8002ca0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	9202      	str	r2, [sp, #8]
 800487e:	9301      	str	r3, [sp, #4]
 8004880:	2302      	movs	r3, #2
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	2300      	movs	r3, #0
 8004886:	460a      	mov	r2, r1
 8004888:	4910      	ldr	r1, [pc, #64]	; (80048cc <xTimerCreateTimerTask+0x84>)
 800488a:	4811      	ldr	r0, [pc, #68]	; (80048d0 <xTimerCreateTimerTask+0x88>)
 800488c:	f7ff f8b4 	bl	80039f8 <xTaskCreateStatic>
 8004890:	4603      	mov	r3, r0
 8004892:	4a10      	ldr	r2, [pc, #64]	; (80048d4 <xTimerCreateTimerTask+0x8c>)
 8004894:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004896:	4b0f      	ldr	r3, [pc, #60]	; (80048d4 <xTimerCreateTimerTask+0x8c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800489e:	2301      	movs	r3, #1
 80048a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10a      	bne.n	80048be <xTimerCreateTimerTask+0x76>
	__asm volatile
 80048a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	613b      	str	r3, [r7, #16]
}
 80048ba:	bf00      	nop
 80048bc:	e7fe      	b.n	80048bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80048be:	697b      	ldr	r3, [r7, #20]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	20000df4 	.word	0x20000df4
 80048cc:	080059d0 	.word	0x080059d0
 80048d0:	08004a0d 	.word	0x08004a0d
 80048d4:	20000df8 	.word	0x20000df8

080048d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08a      	sub	sp, #40	; 0x28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
 80048e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80048e6:	2300      	movs	r3, #0
 80048e8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10a      	bne.n	8004906 <xTimerGenericCommand+0x2e>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	623b      	str	r3, [r7, #32]
}
 8004902:	bf00      	nop
 8004904:	e7fe      	b.n	8004904 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004906:	4b1a      	ldr	r3, [pc, #104]	; (8004970 <xTimerGenericCommand+0x98>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d02a      	beq.n	8004964 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b05      	cmp	r3, #5
 800491e:	dc18      	bgt.n	8004952 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004920:	f7ff feb2 	bl	8004688 <xTaskGetSchedulerState>
 8004924:	4603      	mov	r3, r0
 8004926:	2b02      	cmp	r3, #2
 8004928:	d109      	bne.n	800493e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800492a:	4b11      	ldr	r3, [pc, #68]	; (8004970 <xTimerGenericCommand+0x98>)
 800492c:	6818      	ldr	r0, [r3, #0]
 800492e:	f107 0110 	add.w	r1, r7, #16
 8004932:	2300      	movs	r3, #0
 8004934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004936:	f7fe fc29 	bl	800318c <xQueueGenericSend>
 800493a:	6278      	str	r0, [r7, #36]	; 0x24
 800493c:	e012      	b.n	8004964 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800493e:	4b0c      	ldr	r3, [pc, #48]	; (8004970 <xTimerGenericCommand+0x98>)
 8004940:	6818      	ldr	r0, [r3, #0]
 8004942:	f107 0110 	add.w	r1, r7, #16
 8004946:	2300      	movs	r3, #0
 8004948:	2200      	movs	r2, #0
 800494a:	f7fe fc1f 	bl	800318c <xQueueGenericSend>
 800494e:	6278      	str	r0, [r7, #36]	; 0x24
 8004950:	e008      	b.n	8004964 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004952:	4b07      	ldr	r3, [pc, #28]	; (8004970 <xTimerGenericCommand+0x98>)
 8004954:	6818      	ldr	r0, [r3, #0]
 8004956:	f107 0110 	add.w	r1, r7, #16
 800495a:	2300      	movs	r3, #0
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	f7fe fd13 	bl	8003388 <xQueueGenericSendFromISR>
 8004962:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004966:	4618      	mov	r0, r3
 8004968:	3728      	adds	r7, #40	; 0x28
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	20000df4 	.word	0x20000df4

08004974 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af02      	add	r7, sp, #8
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800497e:	4b22      	ldr	r3, [pc, #136]	; (8004a08 <prvProcessExpiredTimer+0x94>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	3304      	adds	r3, #4
 800498c:	4618      	mov	r0, r3
 800498e:	f7fe fa2b 	bl	8002de8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b00      	cmp	r3, #0
 800499e:	d022      	beq.n	80049e6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	699a      	ldr	r2, [r3, #24]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	18d1      	adds	r1, r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	6978      	ldr	r0, [r7, #20]
 80049ae:	f000 f8d1 	bl	8004b54 <prvInsertTimerInActiveList>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d01f      	beq.n	80049f8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049b8:	2300      	movs	r3, #0
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	2300      	movs	r3, #0
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	2100      	movs	r1, #0
 80049c2:	6978      	ldr	r0, [r7, #20]
 80049c4:	f7ff ff88 	bl	80048d8 <xTimerGenericCommand>
 80049c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d113      	bne.n	80049f8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80049d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	60fb      	str	r3, [r7, #12]
}
 80049e2:	bf00      	nop
 80049e4:	e7fe      	b.n	80049e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049ec:	f023 0301 	bic.w	r3, r3, #1
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	6978      	ldr	r0, [r7, #20]
 80049fe:	4798      	blx	r3
}
 8004a00:	bf00      	nop
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	20000dec 	.word	0x20000dec

08004a0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a14:	f107 0308 	add.w	r3, r7, #8
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 f857 	bl	8004acc <prvGetNextExpireTime>
 8004a1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4619      	mov	r1, r3
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 f803 	bl	8004a30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a2a:	f000 f8d5 	bl	8004bd8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a2e:	e7f1      	b.n	8004a14 <prvTimerTask+0x8>

08004a30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004a3a:	f7ff fa39 	bl	8003eb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a3e:	f107 0308 	add.w	r3, r7, #8
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 f866 	bl	8004b14 <prvSampleTimeNow>
 8004a48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d130      	bne.n	8004ab2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10a      	bne.n	8004a6c <prvProcessTimerOrBlockTask+0x3c>
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d806      	bhi.n	8004a6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004a5e:	f7ff fa35 	bl	8003ecc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a62:	68f9      	ldr	r1, [r7, #12]
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7ff ff85 	bl	8004974 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004a6a:	e024      	b.n	8004ab6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d008      	beq.n	8004a84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a72:	4b13      	ldr	r3, [pc, #76]	; (8004ac0 <prvProcessTimerOrBlockTask+0x90>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <prvProcessTimerOrBlockTask+0x50>
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e000      	b.n	8004a82 <prvProcessTimerOrBlockTask+0x52>
 8004a80:	2300      	movs	r3, #0
 8004a82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a84:	4b0f      	ldr	r3, [pc, #60]	; (8004ac4 <prvProcessTimerOrBlockTask+0x94>)
 8004a86:	6818      	ldr	r0, [r3, #0]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	4619      	mov	r1, r3
 8004a92:	f7fe ff7d 	bl	8003990 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004a96:	f7ff fa19 	bl	8003ecc <xTaskResumeAll>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10a      	bne.n	8004ab6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004aa0:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <prvProcessTimerOrBlockTask+0x98>)
 8004aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	f3bf 8f6f 	isb	sy
}
 8004ab0:	e001      	b.n	8004ab6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004ab2:	f7ff fa0b 	bl	8003ecc <xTaskResumeAll>
}
 8004ab6:	bf00      	nop
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	20000df0 	.word	0x20000df0
 8004ac4:	20000df4 	.word	0x20000df4
 8004ac8:	e000ed04 	.word	0xe000ed04

08004acc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ad4:	4b0e      	ldr	r3, [pc, #56]	; (8004b10 <prvGetNextExpireTime+0x44>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <prvGetNextExpireTime+0x16>
 8004ade:	2201      	movs	r2, #1
 8004ae0:	e000      	b.n	8004ae4 <prvGetNextExpireTime+0x18>
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d105      	bne.n	8004afc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004af0:	4b07      	ldr	r3, [pc, #28]	; (8004b10 <prvGetNextExpireTime+0x44>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	e001      	b.n	8004b00 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004b00:	68fb      	ldr	r3, [r7, #12]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	20000dec 	.word	0x20000dec

08004b14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b1c:	f7ff fa74 	bl	8004008 <xTaskGetTickCount>
 8004b20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b22:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <prvSampleTimeNow+0x3c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d205      	bcs.n	8004b38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004b2c:	f000 f936 	bl	8004d9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	e002      	b.n	8004b3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004b3e:	4a04      	ldr	r2, [pc, #16]	; (8004b50 <prvSampleTimeNow+0x3c>)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004b44:	68fb      	ldr	r3, [r7, #12]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	20000dfc 	.word	0x20000dfc

08004b54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004b62:	2300      	movs	r3, #0
 8004b64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d812      	bhi.n	8004ba0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	1ad2      	subs	r2, r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d302      	bcc.n	8004b8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	e01b      	b.n	8004bc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b8e:	4b10      	ldr	r3, [pc, #64]	; (8004bd0 <prvInsertTimerInActiveList+0x7c>)
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	3304      	adds	r3, #4
 8004b96:	4619      	mov	r1, r3
 8004b98:	4610      	mov	r0, r2
 8004b9a:	f7fe f8ec 	bl	8002d76 <vListInsert>
 8004b9e:	e012      	b.n	8004bc6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d206      	bcs.n	8004bb6 <prvInsertTimerInActiveList+0x62>
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d302      	bcc.n	8004bb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	617b      	str	r3, [r7, #20]
 8004bb4:	e007      	b.n	8004bc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bb6:	4b07      	ldr	r3, [pc, #28]	; (8004bd4 <prvInsertTimerInActiveList+0x80>)
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3304      	adds	r3, #4
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	f7fe f8d8 	bl	8002d76 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004bc6:	697b      	ldr	r3, [r7, #20]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3718      	adds	r7, #24
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	20000df0 	.word	0x20000df0
 8004bd4:	20000dec 	.word	0x20000dec

08004bd8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08e      	sub	sp, #56	; 0x38
 8004bdc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bde:	e0ca      	b.n	8004d76 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	da18      	bge.n	8004c18 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004be6:	1d3b      	adds	r3, r7, #4
 8004be8:	3304      	adds	r3, #4
 8004bea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10a      	bne.n	8004c08 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	61fb      	str	r3, [r7, #28]
}
 8004c04:	bf00      	nop
 8004c06:	e7fe      	b.n	8004c06 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c0e:	6850      	ldr	r0, [r2, #4]
 8004c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c12:	6892      	ldr	r2, [r2, #8]
 8004c14:	4611      	mov	r1, r2
 8004c16:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f2c0 80ab 	blt.w	8004d76 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d004      	beq.n	8004c36 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2e:	3304      	adds	r3, #4
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7fe f8d9 	bl	8002de8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c36:	463b      	mov	r3, r7
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff ff6b 	bl	8004b14 <prvSampleTimeNow>
 8004c3e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b09      	cmp	r3, #9
 8004c44:	f200 8096 	bhi.w	8004d74 <prvProcessReceivedCommands+0x19c>
 8004c48:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <prvProcessReceivedCommands+0x78>)
 8004c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4e:	bf00      	nop
 8004c50:	08004c79 	.word	0x08004c79
 8004c54:	08004c79 	.word	0x08004c79
 8004c58:	08004c79 	.word	0x08004c79
 8004c5c:	08004ced 	.word	0x08004ced
 8004c60:	08004d01 	.word	0x08004d01
 8004c64:	08004d4b 	.word	0x08004d4b
 8004c68:	08004c79 	.word	0x08004c79
 8004c6c:	08004c79 	.word	0x08004c79
 8004c70:	08004ced 	.word	0x08004ced
 8004c74:	08004d01 	.word	0x08004d01
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c7e:	f043 0301 	orr.w	r3, r3, #1
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	18d1      	adds	r1, r2, r3
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c98:	f7ff ff5c 	bl	8004b54 <prvInsertTimerInActiveList>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d069      	beq.n	8004d76 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ca8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cb0:	f003 0304 	and.w	r3, r3, #4
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d05e      	beq.n	8004d76 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	441a      	add	r2, r3
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cca:	f7ff fe05 	bl	80048d8 <xTimerGenericCommand>
 8004cce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d14f      	bne.n	8004d76 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	61bb      	str	r3, [r7, #24]
}
 8004ce8:	bf00      	nop
 8004cea:	e7fe      	b.n	8004cea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cf2:	f023 0301 	bic.w	r3, r3, #1
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004cfe:	e03a      	b.n	8004d76 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d06:	f043 0301 	orr.w	r3, r3, #1
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d16:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10a      	bne.n	8004d36 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	617b      	str	r3, [r7, #20]
}
 8004d32:	bf00      	nop
 8004d34:	e7fe      	b.n	8004d34 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d38:	699a      	ldr	r2, [r3, #24]
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	18d1      	adds	r1, r2, r3
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d44:	f7ff ff06 	bl	8004b54 <prvInsertTimerInActiveList>
					break;
 8004d48:	e015      	b.n	8004d76 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d103      	bne.n	8004d60 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004d58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d5a:	f000 fbe1 	bl	8005520 <vPortFree>
 8004d5e:	e00a      	b.n	8004d76 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d66:	f023 0301 	bic.w	r3, r3, #1
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004d72:	e000      	b.n	8004d76 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004d74:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d76:	4b08      	ldr	r3, [pc, #32]	; (8004d98 <prvProcessReceivedCommands+0x1c0>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	1d39      	adds	r1, r7, #4
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fe fb9e 	bl	80034c0 <xQueueReceive>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f47f af2a 	bne.w	8004be0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004d8c:	bf00      	nop
 8004d8e:	bf00      	nop
 8004d90:	3730      	adds	r7, #48	; 0x30
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	20000df4 	.word	0x20000df4

08004d9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b088      	sub	sp, #32
 8004da0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004da2:	e048      	b.n	8004e36 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004da4:	4b2d      	ldr	r3, [pc, #180]	; (8004e5c <prvSwitchTimerLists+0xc0>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dae:	4b2b      	ldr	r3, [pc, #172]	; (8004e5c <prvSwitchTimerLists+0xc0>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3304      	adds	r3, #4
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7fe f813 	bl	8002de8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d02e      	beq.n	8004e36 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	4413      	add	r3, r2
 8004de0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d90e      	bls.n	8004e08 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004df6:	4b19      	ldr	r3, [pc, #100]	; (8004e5c <prvSwitchTimerLists+0xc0>)
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	4619      	mov	r1, r3
 8004e00:	4610      	mov	r0, r2
 8004e02:	f7fd ffb8 	bl	8002d76 <vListInsert>
 8004e06:	e016      	b.n	8004e36 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e08:	2300      	movs	r3, #0
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	2100      	movs	r1, #0
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f7ff fd60 	bl	80048d8 <xTimerGenericCommand>
 8004e18:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10a      	bne.n	8004e36 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	603b      	str	r3, [r7, #0]
}
 8004e32:	bf00      	nop
 8004e34:	e7fe      	b.n	8004e34 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e36:	4b09      	ldr	r3, [pc, #36]	; (8004e5c <prvSwitchTimerLists+0xc0>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1b1      	bne.n	8004da4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004e40:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <prvSwitchTimerLists+0xc0>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004e46:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <prvSwitchTimerLists+0xc4>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a04      	ldr	r2, [pc, #16]	; (8004e5c <prvSwitchTimerLists+0xc0>)
 8004e4c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004e4e:	4a04      	ldr	r2, [pc, #16]	; (8004e60 <prvSwitchTimerLists+0xc4>)
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	6013      	str	r3, [r2, #0]
}
 8004e54:	bf00      	nop
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	20000dec 	.word	0x20000dec
 8004e60:	20000df0 	.word	0x20000df0

08004e64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004e6a:	f000 f96b 	bl	8005144 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004e6e:	4b15      	ldr	r3, [pc, #84]	; (8004ec4 <prvCheckForValidListAndQueue+0x60>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d120      	bne.n	8004eb8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004e76:	4814      	ldr	r0, [pc, #80]	; (8004ec8 <prvCheckForValidListAndQueue+0x64>)
 8004e78:	f7fd ff2c 	bl	8002cd4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004e7c:	4813      	ldr	r0, [pc, #76]	; (8004ecc <prvCheckForValidListAndQueue+0x68>)
 8004e7e:	f7fd ff29 	bl	8002cd4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004e82:	4b13      	ldr	r3, [pc, #76]	; (8004ed0 <prvCheckForValidListAndQueue+0x6c>)
 8004e84:	4a10      	ldr	r2, [pc, #64]	; (8004ec8 <prvCheckForValidListAndQueue+0x64>)
 8004e86:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004e88:	4b12      	ldr	r3, [pc, #72]	; (8004ed4 <prvCheckForValidListAndQueue+0x70>)
 8004e8a:	4a10      	ldr	r2, [pc, #64]	; (8004ecc <prvCheckForValidListAndQueue+0x68>)
 8004e8c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004e8e:	2300      	movs	r3, #0
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	4b11      	ldr	r3, [pc, #68]	; (8004ed8 <prvCheckForValidListAndQueue+0x74>)
 8004e94:	4a11      	ldr	r2, [pc, #68]	; (8004edc <prvCheckForValidListAndQueue+0x78>)
 8004e96:	2110      	movs	r1, #16
 8004e98:	200a      	movs	r0, #10
 8004e9a:	f7fe f837 	bl	8002f0c <xQueueGenericCreateStatic>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	4a08      	ldr	r2, [pc, #32]	; (8004ec4 <prvCheckForValidListAndQueue+0x60>)
 8004ea2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ea4:	4b07      	ldr	r3, [pc, #28]	; (8004ec4 <prvCheckForValidListAndQueue+0x60>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d005      	beq.n	8004eb8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004eac:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <prvCheckForValidListAndQueue+0x60>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	490b      	ldr	r1, [pc, #44]	; (8004ee0 <prvCheckForValidListAndQueue+0x7c>)
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fe fd18 	bl	80038e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004eb8:	f000 f974 	bl	80051a4 <vPortExitCritical>
}
 8004ebc:	bf00      	nop
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20000df4 	.word	0x20000df4
 8004ec8:	20000dc4 	.word	0x20000dc4
 8004ecc:	20000dd8 	.word	0x20000dd8
 8004ed0:	20000dec 	.word	0x20000dec
 8004ed4:	20000df0 	.word	0x20000df0
 8004ed8:	20000ea0 	.word	0x20000ea0
 8004edc:	20000e00 	.word	0x20000e00
 8004ee0:	080059d8 	.word	0x080059d8

08004ee4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	3b04      	subs	r3, #4
 8004ef4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004efc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	3b04      	subs	r3, #4
 8004f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f023 0201 	bic.w	r2, r3, #1
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	3b04      	subs	r3, #4
 8004f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f14:	4a0c      	ldr	r2, [pc, #48]	; (8004f48 <pxPortInitialiseStack+0x64>)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	3b14      	subs	r3, #20
 8004f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	3b04      	subs	r3, #4
 8004f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f06f 0202 	mvn.w	r2, #2
 8004f32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	3b20      	subs	r3, #32
 8004f38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	08004f4d 	.word	0x08004f4d

08004f4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f52:	2300      	movs	r3, #0
 8004f54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f56:	4b12      	ldr	r3, [pc, #72]	; (8004fa0 <prvTaskExitError+0x54>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5e:	d00a      	beq.n	8004f76 <prvTaskExitError+0x2a>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	60fb      	str	r3, [r7, #12]
}
 8004f72:	bf00      	nop
 8004f74:	e7fe      	b.n	8004f74 <prvTaskExitError+0x28>
	__asm volatile
 8004f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7a:	f383 8811 	msr	BASEPRI, r3
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	60bb      	str	r3, [r7, #8]
}
 8004f88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f8a:	bf00      	nop
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0fc      	beq.n	8004f8c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f92:	bf00      	nop
 8004f94:	bf00      	nop
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	2000000c 	.word	0x2000000c
	...

08004fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004fb0:	4b07      	ldr	r3, [pc, #28]	; (8004fd0 <pxCurrentTCBConst2>)
 8004fb2:	6819      	ldr	r1, [r3, #0]
 8004fb4:	6808      	ldr	r0, [r1, #0]
 8004fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fba:	f380 8809 	msr	PSP, r0
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f04f 0000 	mov.w	r0, #0
 8004fc6:	f380 8811 	msr	BASEPRI, r0
 8004fca:	4770      	bx	lr
 8004fcc:	f3af 8000 	nop.w

08004fd0 <pxCurrentTCBConst2>:
 8004fd0:	200008c4 	.word	0x200008c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop

08004fd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004fd8:	4808      	ldr	r0, [pc, #32]	; (8004ffc <prvPortStartFirstTask+0x24>)
 8004fda:	6800      	ldr	r0, [r0, #0]
 8004fdc:	6800      	ldr	r0, [r0, #0]
 8004fde:	f380 8808 	msr	MSP, r0
 8004fe2:	f04f 0000 	mov.w	r0, #0
 8004fe6:	f380 8814 	msr	CONTROL, r0
 8004fea:	b662      	cpsie	i
 8004fec:	b661      	cpsie	f
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	df00      	svc	0
 8004ff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004ffa:	bf00      	nop
 8004ffc:	e000ed08 	.word	0xe000ed08

08005000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005006:	4b46      	ldr	r3, [pc, #280]	; (8005120 <xPortStartScheduler+0x120>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a46      	ldr	r2, [pc, #280]	; (8005124 <xPortStartScheduler+0x124>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d10a      	bne.n	8005026 <xPortStartScheduler+0x26>
	__asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	613b      	str	r3, [r7, #16]
}
 8005022:	bf00      	nop
 8005024:	e7fe      	b.n	8005024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005026:	4b3e      	ldr	r3, [pc, #248]	; (8005120 <xPortStartScheduler+0x120>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a3f      	ldr	r2, [pc, #252]	; (8005128 <xPortStartScheduler+0x128>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d10a      	bne.n	8005046 <xPortStartScheduler+0x46>
	__asm volatile
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	60fb      	str	r3, [r7, #12]
}
 8005042:	bf00      	nop
 8005044:	e7fe      	b.n	8005044 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005046:	4b39      	ldr	r3, [pc, #228]	; (800512c <xPortStartScheduler+0x12c>)
 8005048:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	b2db      	uxtb	r3, r3
 8005050:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	22ff      	movs	r2, #255	; 0xff
 8005056:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	b2db      	uxtb	r3, r3
 800505e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005068:	b2da      	uxtb	r2, r3
 800506a:	4b31      	ldr	r3, [pc, #196]	; (8005130 <xPortStartScheduler+0x130>)
 800506c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800506e:	4b31      	ldr	r3, [pc, #196]	; (8005134 <xPortStartScheduler+0x134>)
 8005070:	2207      	movs	r2, #7
 8005072:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005074:	e009      	b.n	800508a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005076:	4b2f      	ldr	r3, [pc, #188]	; (8005134 <xPortStartScheduler+0x134>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3b01      	subs	r3, #1
 800507c:	4a2d      	ldr	r2, [pc, #180]	; (8005134 <xPortStartScheduler+0x134>)
 800507e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005080:	78fb      	ldrb	r3, [r7, #3]
 8005082:	b2db      	uxtb	r3, r3
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	b2db      	uxtb	r3, r3
 8005088:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800508a:	78fb      	ldrb	r3, [r7, #3]
 800508c:	b2db      	uxtb	r3, r3
 800508e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005092:	2b80      	cmp	r3, #128	; 0x80
 8005094:	d0ef      	beq.n	8005076 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005096:	4b27      	ldr	r3, [pc, #156]	; (8005134 <xPortStartScheduler+0x134>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f1c3 0307 	rsb	r3, r3, #7
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d00a      	beq.n	80050b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80050a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	60bb      	str	r3, [r7, #8]
}
 80050b4:	bf00      	nop
 80050b6:	e7fe      	b.n	80050b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050b8:	4b1e      	ldr	r3, [pc, #120]	; (8005134 <xPortStartScheduler+0x134>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	021b      	lsls	r3, r3, #8
 80050be:	4a1d      	ldr	r2, [pc, #116]	; (8005134 <xPortStartScheduler+0x134>)
 80050c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050c2:	4b1c      	ldr	r3, [pc, #112]	; (8005134 <xPortStartScheduler+0x134>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050ca:	4a1a      	ldr	r2, [pc, #104]	; (8005134 <xPortStartScheduler+0x134>)
 80050cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050d6:	4b18      	ldr	r3, [pc, #96]	; (8005138 <xPortStartScheduler+0x138>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a17      	ldr	r2, [pc, #92]	; (8005138 <xPortStartScheduler+0x138>)
 80050dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050e2:	4b15      	ldr	r3, [pc, #84]	; (8005138 <xPortStartScheduler+0x138>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a14      	ldr	r2, [pc, #80]	; (8005138 <xPortStartScheduler+0x138>)
 80050e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80050ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050ee:	f000 f8dd 	bl	80052ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050f2:	4b12      	ldr	r3, [pc, #72]	; (800513c <xPortStartScheduler+0x13c>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80050f8:	f000 f8fc 	bl	80052f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80050fc:	4b10      	ldr	r3, [pc, #64]	; (8005140 <xPortStartScheduler+0x140>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a0f      	ldr	r2, [pc, #60]	; (8005140 <xPortStartScheduler+0x140>)
 8005102:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005106:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005108:	f7ff ff66 	bl	8004fd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800510c:	f7ff f846 	bl	800419c <vTaskSwitchContext>
	prvTaskExitError();
 8005110:	f7ff ff1c 	bl	8004f4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	e000ed00 	.word	0xe000ed00
 8005124:	410fc271 	.word	0x410fc271
 8005128:	410fc270 	.word	0x410fc270
 800512c:	e000e400 	.word	0xe000e400
 8005130:	20000ef0 	.word	0x20000ef0
 8005134:	20000ef4 	.word	0x20000ef4
 8005138:	e000ed20 	.word	0xe000ed20
 800513c:	2000000c 	.word	0x2000000c
 8005140:	e000ef34 	.word	0xe000ef34

08005144 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
	__asm volatile
 800514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	607b      	str	r3, [r7, #4]
}
 800515c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800515e:	4b0f      	ldr	r3, [pc, #60]	; (800519c <vPortEnterCritical+0x58>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3301      	adds	r3, #1
 8005164:	4a0d      	ldr	r2, [pc, #52]	; (800519c <vPortEnterCritical+0x58>)
 8005166:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005168:	4b0c      	ldr	r3, [pc, #48]	; (800519c <vPortEnterCritical+0x58>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d10f      	bne.n	8005190 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005170:	4b0b      	ldr	r3, [pc, #44]	; (80051a0 <vPortEnterCritical+0x5c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <vPortEnterCritical+0x4c>
	__asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	603b      	str	r3, [r7, #0]
}
 800518c:	bf00      	nop
 800518e:	e7fe      	b.n	800518e <vPortEnterCritical+0x4a>
	}
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	2000000c 	.word	0x2000000c
 80051a0:	e000ed04 	.word	0xe000ed04

080051a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051aa:	4b12      	ldr	r3, [pc, #72]	; (80051f4 <vPortExitCritical+0x50>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10a      	bne.n	80051c8 <vPortExitCritical+0x24>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	607b      	str	r3, [r7, #4]
}
 80051c4:	bf00      	nop
 80051c6:	e7fe      	b.n	80051c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80051c8:	4b0a      	ldr	r3, [pc, #40]	; (80051f4 <vPortExitCritical+0x50>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	3b01      	subs	r3, #1
 80051ce:	4a09      	ldr	r2, [pc, #36]	; (80051f4 <vPortExitCritical+0x50>)
 80051d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051d2:	4b08      	ldr	r3, [pc, #32]	; (80051f4 <vPortExitCritical+0x50>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d105      	bne.n	80051e6 <vPortExitCritical+0x42>
 80051da:	2300      	movs	r3, #0
 80051dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	f383 8811 	msr	BASEPRI, r3
}
 80051e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80051e6:	bf00      	nop
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	2000000c 	.word	0x2000000c
	...

08005200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005200:	f3ef 8009 	mrs	r0, PSP
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	4b15      	ldr	r3, [pc, #84]	; (8005260 <pxCurrentTCBConst>)
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	f01e 0f10 	tst.w	lr, #16
 8005210:	bf08      	it	eq
 8005212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800521a:	6010      	str	r0, [r2, #0]
 800521c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005220:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005224:	f380 8811 	msr	BASEPRI, r0
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f7fe ffb4 	bl	800419c <vTaskSwitchContext>
 8005234:	f04f 0000 	mov.w	r0, #0
 8005238:	f380 8811 	msr	BASEPRI, r0
 800523c:	bc09      	pop	{r0, r3}
 800523e:	6819      	ldr	r1, [r3, #0]
 8005240:	6808      	ldr	r0, [r1, #0]
 8005242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005246:	f01e 0f10 	tst.w	lr, #16
 800524a:	bf08      	it	eq
 800524c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005250:	f380 8809 	msr	PSP, r0
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	f3af 8000 	nop.w

08005260 <pxCurrentTCBConst>:
 8005260:	200008c4 	.word	0x200008c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop

08005268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
	__asm volatile
 800526e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	607b      	str	r3, [r7, #4]
}
 8005280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005282:	f7fe fed1 	bl	8004028 <xTaskIncrementTick>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800528c:	4b06      	ldr	r3, [pc, #24]	; (80052a8 <xPortSysTickHandler+0x40>)
 800528e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	2300      	movs	r3, #0
 8005296:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	f383 8811 	msr	BASEPRI, r3
}
 800529e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80052a0:	bf00      	nop
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	e000ed04 	.word	0xe000ed04

080052ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052b0:	4b0b      	ldr	r3, [pc, #44]	; (80052e0 <vPortSetupTimerInterrupt+0x34>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052b6:	4b0b      	ldr	r3, [pc, #44]	; (80052e4 <vPortSetupTimerInterrupt+0x38>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052bc:	4b0a      	ldr	r3, [pc, #40]	; (80052e8 <vPortSetupTimerInterrupt+0x3c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a0a      	ldr	r2, [pc, #40]	; (80052ec <vPortSetupTimerInterrupt+0x40>)
 80052c2:	fba2 2303 	umull	r2, r3, r2, r3
 80052c6:	099b      	lsrs	r3, r3, #6
 80052c8:	4a09      	ldr	r2, [pc, #36]	; (80052f0 <vPortSetupTimerInterrupt+0x44>)
 80052ca:	3b01      	subs	r3, #1
 80052cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052ce:	4b04      	ldr	r3, [pc, #16]	; (80052e0 <vPortSetupTimerInterrupt+0x34>)
 80052d0:	2207      	movs	r2, #7
 80052d2:	601a      	str	r2, [r3, #0]
}
 80052d4:	bf00      	nop
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	e000e010 	.word	0xe000e010
 80052e4:	e000e018 	.word	0xe000e018
 80052e8:	20000000 	.word	0x20000000
 80052ec:	10624dd3 	.word	0x10624dd3
 80052f0:	e000e014 	.word	0xe000e014

080052f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80052f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005304 <vPortEnableVFP+0x10>
 80052f8:	6801      	ldr	r1, [r0, #0]
 80052fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80052fe:	6001      	str	r1, [r0, #0]
 8005300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005302:	bf00      	nop
 8005304:	e000ed88 	.word	0xe000ed88

08005308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800530e:	f3ef 8305 	mrs	r3, IPSR
 8005312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2b0f      	cmp	r3, #15
 8005318:	d914      	bls.n	8005344 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800531a:	4a17      	ldr	r2, [pc, #92]	; (8005378 <vPortValidateInterruptPriority+0x70>)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4413      	add	r3, r2
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005324:	4b15      	ldr	r3, [pc, #84]	; (800537c <vPortValidateInterruptPriority+0x74>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	7afa      	ldrb	r2, [r7, #11]
 800532a:	429a      	cmp	r2, r3
 800532c:	d20a      	bcs.n	8005344 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	607b      	str	r3, [r7, #4]
}
 8005340:	bf00      	nop
 8005342:	e7fe      	b.n	8005342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005344:	4b0e      	ldr	r3, [pc, #56]	; (8005380 <vPortValidateInterruptPriority+0x78>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800534c:	4b0d      	ldr	r3, [pc, #52]	; (8005384 <vPortValidateInterruptPriority+0x7c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d90a      	bls.n	800536a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	603b      	str	r3, [r7, #0]
}
 8005366:	bf00      	nop
 8005368:	e7fe      	b.n	8005368 <vPortValidateInterruptPriority+0x60>
	}
 800536a:	bf00      	nop
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	e000e3f0 	.word	0xe000e3f0
 800537c:	20000ef0 	.word	0x20000ef0
 8005380:	e000ed0c 	.word	0xe000ed0c
 8005384:	20000ef4 	.word	0x20000ef4

08005388 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08a      	sub	sp, #40	; 0x28
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005390:	2300      	movs	r3, #0
 8005392:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005394:	f7fe fd8c 	bl	8003eb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005398:	4b5b      	ldr	r3, [pc, #364]	; (8005508 <pvPortMalloc+0x180>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80053a0:	f000 f920 	bl	80055e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80053a4:	4b59      	ldr	r3, [pc, #356]	; (800550c <pvPortMalloc+0x184>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4013      	ands	r3, r2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f040 8093 	bne.w	80054d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d01d      	beq.n	80053f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80053b8:	2208      	movs	r2, #8
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4413      	add	r3, r2
 80053be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d014      	beq.n	80053f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f023 0307 	bic.w	r3, r3, #7
 80053d0:	3308      	adds	r3, #8
 80053d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00a      	beq.n	80053f4 <pvPortMalloc+0x6c>
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	617b      	str	r3, [r7, #20]
}
 80053f0:	bf00      	nop
 80053f2:	e7fe      	b.n	80053f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d06e      	beq.n	80054d8 <pvPortMalloc+0x150>
 80053fa:	4b45      	ldr	r3, [pc, #276]	; (8005510 <pvPortMalloc+0x188>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	429a      	cmp	r2, r3
 8005402:	d869      	bhi.n	80054d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005404:	4b43      	ldr	r3, [pc, #268]	; (8005514 <pvPortMalloc+0x18c>)
 8005406:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005408:	4b42      	ldr	r3, [pc, #264]	; (8005514 <pvPortMalloc+0x18c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800540e:	e004      	b.n	800541a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	429a      	cmp	r2, r3
 8005422:	d903      	bls.n	800542c <pvPortMalloc+0xa4>
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1f1      	bne.n	8005410 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800542c:	4b36      	ldr	r3, [pc, #216]	; (8005508 <pvPortMalloc+0x180>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005432:	429a      	cmp	r2, r3
 8005434:	d050      	beq.n	80054d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2208      	movs	r2, #8
 800543c:	4413      	add	r3, r2
 800543e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	1ad2      	subs	r2, r2, r3
 8005450:	2308      	movs	r3, #8
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	429a      	cmp	r2, r3
 8005456:	d91f      	bls.n	8005498 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4413      	add	r3, r2
 800545e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <pvPortMalloc+0xf8>
	__asm volatile
 800546a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	613b      	str	r3, [r7, #16]
}
 800547c:	bf00      	nop
 800547e:	e7fe      	b.n	800547e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	1ad2      	subs	r2, r2, r3
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005492:	69b8      	ldr	r0, [r7, #24]
 8005494:	f000 f908 	bl	80056a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005498:	4b1d      	ldr	r3, [pc, #116]	; (8005510 <pvPortMalloc+0x188>)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	4a1b      	ldr	r2, [pc, #108]	; (8005510 <pvPortMalloc+0x188>)
 80054a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054a6:	4b1a      	ldr	r3, [pc, #104]	; (8005510 <pvPortMalloc+0x188>)
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	4b1b      	ldr	r3, [pc, #108]	; (8005518 <pvPortMalloc+0x190>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d203      	bcs.n	80054ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054b2:	4b17      	ldr	r3, [pc, #92]	; (8005510 <pvPortMalloc+0x188>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a18      	ldr	r2, [pc, #96]	; (8005518 <pvPortMalloc+0x190>)
 80054b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	4b13      	ldr	r3, [pc, #76]	; (800550c <pvPortMalloc+0x184>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	431a      	orrs	r2, r3
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80054ce:	4b13      	ldr	r3, [pc, #76]	; (800551c <pvPortMalloc+0x194>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3301      	adds	r3, #1
 80054d4:	4a11      	ldr	r2, [pc, #68]	; (800551c <pvPortMalloc+0x194>)
 80054d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80054d8:	f7fe fcf8 	bl	8003ecc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <pvPortMalloc+0x174>
	__asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	60fb      	str	r3, [r7, #12]
}
 80054f8:	bf00      	nop
 80054fa:	e7fe      	b.n	80054fa <pvPortMalloc+0x172>
	return pvReturn;
 80054fc:	69fb      	ldr	r3, [r7, #28]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3728      	adds	r7, #40	; 0x28
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	20004b00 	.word	0x20004b00
 800550c:	20004b14 	.word	0x20004b14
 8005510:	20004b04 	.word	0x20004b04
 8005514:	20004af8 	.word	0x20004af8
 8005518:	20004b08 	.word	0x20004b08
 800551c:	20004b0c 	.word	0x20004b0c

08005520 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d04d      	beq.n	80055ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005532:	2308      	movs	r3, #8
 8005534:	425b      	negs	r3, r3
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	4413      	add	r3, r2
 800553a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	4b24      	ldr	r3, [pc, #144]	; (80055d8 <vPortFree+0xb8>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4013      	ands	r3, r2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10a      	bne.n	8005564 <vPortFree+0x44>
	__asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	60fb      	str	r3, [r7, #12]
}
 8005560:	bf00      	nop
 8005562:	e7fe      	b.n	8005562 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <vPortFree+0x62>
	__asm volatile
 800556c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	60bb      	str	r3, [r7, #8]
}
 800557e:	bf00      	nop
 8005580:	e7fe      	b.n	8005580 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	4b14      	ldr	r3, [pc, #80]	; (80055d8 <vPortFree+0xb8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4013      	ands	r3, r2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d01e      	beq.n	80055ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d11a      	bne.n	80055ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	4b0e      	ldr	r3, [pc, #56]	; (80055d8 <vPortFree+0xb8>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	43db      	mvns	r3, r3
 80055a2:	401a      	ands	r2, r3
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80055a8:	f7fe fc82 	bl	8003eb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	4b0a      	ldr	r3, [pc, #40]	; (80055dc <vPortFree+0xbc>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4413      	add	r3, r2
 80055b6:	4a09      	ldr	r2, [pc, #36]	; (80055dc <vPortFree+0xbc>)
 80055b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055ba:	6938      	ldr	r0, [r7, #16]
 80055bc:	f000 f874 	bl	80056a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80055c0:	4b07      	ldr	r3, [pc, #28]	; (80055e0 <vPortFree+0xc0>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	3301      	adds	r3, #1
 80055c6:	4a06      	ldr	r2, [pc, #24]	; (80055e0 <vPortFree+0xc0>)
 80055c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80055ca:	f7fe fc7f 	bl	8003ecc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80055ce:	bf00      	nop
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20004b14 	.word	0x20004b14
 80055dc:	20004b04 	.word	0x20004b04
 80055e0:	20004b10 	.word	0x20004b10

080055e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80055ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80055f0:	4b27      	ldr	r3, [pc, #156]	; (8005690 <prvHeapInit+0xac>)
 80055f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00c      	beq.n	8005618 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	3307      	adds	r3, #7
 8005602:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0307 	bic.w	r3, r3, #7
 800560a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	4a1f      	ldr	r2, [pc, #124]	; (8005690 <prvHeapInit+0xac>)
 8005614:	4413      	add	r3, r2
 8005616:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800561c:	4a1d      	ldr	r2, [pc, #116]	; (8005694 <prvHeapInit+0xb0>)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005622:	4b1c      	ldr	r3, [pc, #112]	; (8005694 <prvHeapInit+0xb0>)
 8005624:	2200      	movs	r2, #0
 8005626:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	4413      	add	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005630:	2208      	movs	r2, #8
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	1a9b      	subs	r3, r3, r2
 8005636:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 0307 	bic.w	r3, r3, #7
 800563e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4a15      	ldr	r2, [pc, #84]	; (8005698 <prvHeapInit+0xb4>)
 8005644:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005646:	4b14      	ldr	r3, [pc, #80]	; (8005698 <prvHeapInit+0xb4>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2200      	movs	r2, #0
 800564c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800564e:	4b12      	ldr	r3, [pc, #72]	; (8005698 <prvHeapInit+0xb4>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	1ad2      	subs	r2, r2, r3
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005664:	4b0c      	ldr	r3, [pc, #48]	; (8005698 <prvHeapInit+0xb4>)
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	4a0a      	ldr	r2, [pc, #40]	; (800569c <prvHeapInit+0xb8>)
 8005672:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	4a09      	ldr	r2, [pc, #36]	; (80056a0 <prvHeapInit+0xbc>)
 800567a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800567c:	4b09      	ldr	r3, [pc, #36]	; (80056a4 <prvHeapInit+0xc0>)
 800567e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005682:	601a      	str	r2, [r3, #0]
}
 8005684:	bf00      	nop
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	20000ef8 	.word	0x20000ef8
 8005694:	20004af8 	.word	0x20004af8
 8005698:	20004b00 	.word	0x20004b00
 800569c:	20004b08 	.word	0x20004b08
 80056a0:	20004b04 	.word	0x20004b04
 80056a4:	20004b14 	.word	0x20004b14

080056a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80056b0:	4b28      	ldr	r3, [pc, #160]	; (8005754 <prvInsertBlockIntoFreeList+0xac>)
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	e002      	b.n	80056bc <prvInsertBlockIntoFreeList+0x14>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d8f7      	bhi.n	80056b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	4413      	add	r3, r2
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d108      	bne.n	80056ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	441a      	add	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	441a      	add	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d118      	bne.n	8005730 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	4b15      	ldr	r3, [pc, #84]	; (8005758 <prvInsertBlockIntoFreeList+0xb0>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	429a      	cmp	r2, r3
 8005708:	d00d      	beq.n	8005726 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	441a      	add	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	e008      	b.n	8005738 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005726:	4b0c      	ldr	r3, [pc, #48]	; (8005758 <prvInsertBlockIntoFreeList+0xb0>)
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	e003      	b.n	8005738 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	429a      	cmp	r2, r3
 800573e:	d002      	beq.n	8005746 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005746:	bf00      	nop
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	20004af8 	.word	0x20004af8
 8005758:	20004b00 	.word	0x20004b00

0800575c <memset>:
 800575c:	4402      	add	r2, r0
 800575e:	4603      	mov	r3, r0
 8005760:	4293      	cmp	r3, r2
 8005762:	d100      	bne.n	8005766 <memset+0xa>
 8005764:	4770      	bx	lr
 8005766:	f803 1b01 	strb.w	r1, [r3], #1
 800576a:	e7f9      	b.n	8005760 <memset+0x4>

0800576c <_reclaim_reent>:
 800576c:	4b29      	ldr	r3, [pc, #164]	; (8005814 <_reclaim_reent+0xa8>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4283      	cmp	r3, r0
 8005772:	b570      	push	{r4, r5, r6, lr}
 8005774:	4604      	mov	r4, r0
 8005776:	d04b      	beq.n	8005810 <_reclaim_reent+0xa4>
 8005778:	69c3      	ldr	r3, [r0, #28]
 800577a:	b143      	cbz	r3, 800578e <_reclaim_reent+0x22>
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d144      	bne.n	800580c <_reclaim_reent+0xa0>
 8005782:	69e3      	ldr	r3, [r4, #28]
 8005784:	6819      	ldr	r1, [r3, #0]
 8005786:	b111      	cbz	r1, 800578e <_reclaim_reent+0x22>
 8005788:	4620      	mov	r0, r4
 800578a:	f000 f879 	bl	8005880 <_free_r>
 800578e:	6961      	ldr	r1, [r4, #20]
 8005790:	b111      	cbz	r1, 8005798 <_reclaim_reent+0x2c>
 8005792:	4620      	mov	r0, r4
 8005794:	f000 f874 	bl	8005880 <_free_r>
 8005798:	69e1      	ldr	r1, [r4, #28]
 800579a:	b111      	cbz	r1, 80057a2 <_reclaim_reent+0x36>
 800579c:	4620      	mov	r0, r4
 800579e:	f000 f86f 	bl	8005880 <_free_r>
 80057a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80057a4:	b111      	cbz	r1, 80057ac <_reclaim_reent+0x40>
 80057a6:	4620      	mov	r0, r4
 80057a8:	f000 f86a 	bl	8005880 <_free_r>
 80057ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80057ae:	b111      	cbz	r1, 80057b6 <_reclaim_reent+0x4a>
 80057b0:	4620      	mov	r0, r4
 80057b2:	f000 f865 	bl	8005880 <_free_r>
 80057b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80057b8:	b111      	cbz	r1, 80057c0 <_reclaim_reent+0x54>
 80057ba:	4620      	mov	r0, r4
 80057bc:	f000 f860 	bl	8005880 <_free_r>
 80057c0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80057c2:	b111      	cbz	r1, 80057ca <_reclaim_reent+0x5e>
 80057c4:	4620      	mov	r0, r4
 80057c6:	f000 f85b 	bl	8005880 <_free_r>
 80057ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80057cc:	b111      	cbz	r1, 80057d4 <_reclaim_reent+0x68>
 80057ce:	4620      	mov	r0, r4
 80057d0:	f000 f856 	bl	8005880 <_free_r>
 80057d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80057d6:	b111      	cbz	r1, 80057de <_reclaim_reent+0x72>
 80057d8:	4620      	mov	r0, r4
 80057da:	f000 f851 	bl	8005880 <_free_r>
 80057de:	6a23      	ldr	r3, [r4, #32]
 80057e0:	b1b3      	cbz	r3, 8005810 <_reclaim_reent+0xa4>
 80057e2:	4620      	mov	r0, r4
 80057e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80057e8:	4718      	bx	r3
 80057ea:	5949      	ldr	r1, [r1, r5]
 80057ec:	b941      	cbnz	r1, 8005800 <_reclaim_reent+0x94>
 80057ee:	3504      	adds	r5, #4
 80057f0:	69e3      	ldr	r3, [r4, #28]
 80057f2:	2d80      	cmp	r5, #128	; 0x80
 80057f4:	68d9      	ldr	r1, [r3, #12]
 80057f6:	d1f8      	bne.n	80057ea <_reclaim_reent+0x7e>
 80057f8:	4620      	mov	r0, r4
 80057fa:	f000 f841 	bl	8005880 <_free_r>
 80057fe:	e7c0      	b.n	8005782 <_reclaim_reent+0x16>
 8005800:	680e      	ldr	r6, [r1, #0]
 8005802:	4620      	mov	r0, r4
 8005804:	f000 f83c 	bl	8005880 <_free_r>
 8005808:	4631      	mov	r1, r6
 800580a:	e7ef      	b.n	80057ec <_reclaim_reent+0x80>
 800580c:	2500      	movs	r5, #0
 800580e:	e7ef      	b.n	80057f0 <_reclaim_reent+0x84>
 8005810:	bd70      	pop	{r4, r5, r6, pc}
 8005812:	bf00      	nop
 8005814:	2000005c 	.word	0x2000005c

08005818 <__libc_init_array>:
 8005818:	b570      	push	{r4, r5, r6, lr}
 800581a:	4d0d      	ldr	r5, [pc, #52]	; (8005850 <__libc_init_array+0x38>)
 800581c:	4c0d      	ldr	r4, [pc, #52]	; (8005854 <__libc_init_array+0x3c>)
 800581e:	1b64      	subs	r4, r4, r5
 8005820:	10a4      	asrs	r4, r4, #2
 8005822:	2600      	movs	r6, #0
 8005824:	42a6      	cmp	r6, r4
 8005826:	d109      	bne.n	800583c <__libc_init_array+0x24>
 8005828:	4d0b      	ldr	r5, [pc, #44]	; (8005858 <__libc_init_array+0x40>)
 800582a:	4c0c      	ldr	r4, [pc, #48]	; (800585c <__libc_init_array+0x44>)
 800582c:	f000 f880 	bl	8005930 <_init>
 8005830:	1b64      	subs	r4, r4, r5
 8005832:	10a4      	asrs	r4, r4, #2
 8005834:	2600      	movs	r6, #0
 8005836:	42a6      	cmp	r6, r4
 8005838:	d105      	bne.n	8005846 <__libc_init_array+0x2e>
 800583a:	bd70      	pop	{r4, r5, r6, pc}
 800583c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005840:	4798      	blx	r3
 8005842:	3601      	adds	r6, #1
 8005844:	e7ee      	b.n	8005824 <__libc_init_array+0xc>
 8005846:	f855 3b04 	ldr.w	r3, [r5], #4
 800584a:	4798      	blx	r3
 800584c:	3601      	adds	r6, #1
 800584e:	e7f2      	b.n	8005836 <__libc_init_array+0x1e>
 8005850:	08005abc 	.word	0x08005abc
 8005854:	08005abc 	.word	0x08005abc
 8005858:	08005abc 	.word	0x08005abc
 800585c:	08005ac0 	.word	0x08005ac0

08005860 <__retarget_lock_acquire_recursive>:
 8005860:	4770      	bx	lr

08005862 <__retarget_lock_release_recursive>:
 8005862:	4770      	bx	lr

08005864 <memcpy>:
 8005864:	440a      	add	r2, r1
 8005866:	4291      	cmp	r1, r2
 8005868:	f100 33ff 	add.w	r3, r0, #4294967295
 800586c:	d100      	bne.n	8005870 <memcpy+0xc>
 800586e:	4770      	bx	lr
 8005870:	b510      	push	{r4, lr}
 8005872:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005876:	f803 4f01 	strb.w	r4, [r3, #1]!
 800587a:	4291      	cmp	r1, r2
 800587c:	d1f9      	bne.n	8005872 <memcpy+0xe>
 800587e:	bd10      	pop	{r4, pc}

08005880 <_free_r>:
 8005880:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005882:	2900      	cmp	r1, #0
 8005884:	d044      	beq.n	8005910 <_free_r+0x90>
 8005886:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800588a:	9001      	str	r0, [sp, #4]
 800588c:	2b00      	cmp	r3, #0
 800588e:	f1a1 0404 	sub.w	r4, r1, #4
 8005892:	bfb8      	it	lt
 8005894:	18e4      	addlt	r4, r4, r3
 8005896:	f000 f83f 	bl	8005918 <__malloc_lock>
 800589a:	4a1e      	ldr	r2, [pc, #120]	; (8005914 <_free_r+0x94>)
 800589c:	9801      	ldr	r0, [sp, #4]
 800589e:	6813      	ldr	r3, [r2, #0]
 80058a0:	b933      	cbnz	r3, 80058b0 <_free_r+0x30>
 80058a2:	6063      	str	r3, [r4, #4]
 80058a4:	6014      	str	r4, [r2, #0]
 80058a6:	b003      	add	sp, #12
 80058a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058ac:	f000 b83a 	b.w	8005924 <__malloc_unlock>
 80058b0:	42a3      	cmp	r3, r4
 80058b2:	d908      	bls.n	80058c6 <_free_r+0x46>
 80058b4:	6825      	ldr	r5, [r4, #0]
 80058b6:	1961      	adds	r1, r4, r5
 80058b8:	428b      	cmp	r3, r1
 80058ba:	bf01      	itttt	eq
 80058bc:	6819      	ldreq	r1, [r3, #0]
 80058be:	685b      	ldreq	r3, [r3, #4]
 80058c0:	1949      	addeq	r1, r1, r5
 80058c2:	6021      	streq	r1, [r4, #0]
 80058c4:	e7ed      	b.n	80058a2 <_free_r+0x22>
 80058c6:	461a      	mov	r2, r3
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	b10b      	cbz	r3, 80058d0 <_free_r+0x50>
 80058cc:	42a3      	cmp	r3, r4
 80058ce:	d9fa      	bls.n	80058c6 <_free_r+0x46>
 80058d0:	6811      	ldr	r1, [r2, #0]
 80058d2:	1855      	adds	r5, r2, r1
 80058d4:	42a5      	cmp	r5, r4
 80058d6:	d10b      	bne.n	80058f0 <_free_r+0x70>
 80058d8:	6824      	ldr	r4, [r4, #0]
 80058da:	4421      	add	r1, r4
 80058dc:	1854      	adds	r4, r2, r1
 80058de:	42a3      	cmp	r3, r4
 80058e0:	6011      	str	r1, [r2, #0]
 80058e2:	d1e0      	bne.n	80058a6 <_free_r+0x26>
 80058e4:	681c      	ldr	r4, [r3, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	6053      	str	r3, [r2, #4]
 80058ea:	440c      	add	r4, r1
 80058ec:	6014      	str	r4, [r2, #0]
 80058ee:	e7da      	b.n	80058a6 <_free_r+0x26>
 80058f0:	d902      	bls.n	80058f8 <_free_r+0x78>
 80058f2:	230c      	movs	r3, #12
 80058f4:	6003      	str	r3, [r0, #0]
 80058f6:	e7d6      	b.n	80058a6 <_free_r+0x26>
 80058f8:	6825      	ldr	r5, [r4, #0]
 80058fa:	1961      	adds	r1, r4, r5
 80058fc:	428b      	cmp	r3, r1
 80058fe:	bf04      	itt	eq
 8005900:	6819      	ldreq	r1, [r3, #0]
 8005902:	685b      	ldreq	r3, [r3, #4]
 8005904:	6063      	str	r3, [r4, #4]
 8005906:	bf04      	itt	eq
 8005908:	1949      	addeq	r1, r1, r5
 800590a:	6021      	streq	r1, [r4, #0]
 800590c:	6054      	str	r4, [r2, #4]
 800590e:	e7ca      	b.n	80058a6 <_free_r+0x26>
 8005910:	b003      	add	sp, #12
 8005912:	bd30      	pop	{r4, r5, pc}
 8005914:	20004c54 	.word	0x20004c54

08005918 <__malloc_lock>:
 8005918:	4801      	ldr	r0, [pc, #4]	; (8005920 <__malloc_lock+0x8>)
 800591a:	f7ff bfa1 	b.w	8005860 <__retarget_lock_acquire_recursive>
 800591e:	bf00      	nop
 8005920:	20004c50 	.word	0x20004c50

08005924 <__malloc_unlock>:
 8005924:	4801      	ldr	r0, [pc, #4]	; (800592c <__malloc_unlock+0x8>)
 8005926:	f7ff bf9c 	b.w	8005862 <__retarget_lock_release_recursive>
 800592a:	bf00      	nop
 800592c:	20004c50 	.word	0x20004c50

08005930 <_init>:
 8005930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005932:	bf00      	nop
 8005934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005936:	bc08      	pop	{r3}
 8005938:	469e      	mov	lr, r3
 800593a:	4770      	bx	lr

0800593c <_fini>:
 800593c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593e:	bf00      	nop
 8005940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005942:	bc08      	pop	{r3}
 8005944:	469e      	mov	lr, r3
 8005946:	4770      	bx	lr
