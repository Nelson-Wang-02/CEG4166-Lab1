
getStartLab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006048  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08006218  08006218  00016218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063e0  080063e0  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  080063e0  080063e0  000163e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063e8  080063e8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063e8  080063e8  000163e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063ec  080063ec  000163ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080063f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c00  20000060  08006450  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c60  08006450  00024c60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018b9f  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034d1  00000000  00000000  00038c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001490  00000000  00000000  0003c148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001000  00000000  00000000  0003d5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000332c  00000000  00000000  0003e5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000177bd  00000000  00000000  00041904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000daf0a  00000000  00000000  000590c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005988  00000000  00000000  00133fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00139954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006200 	.word	0x08006200

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08006200 	.word	0x08006200

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fbd4 	bl	8000cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f88c 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f926 	bl	8000768 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800051c:	f000 f8fa 	bl	8000714 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000520:	f002 faca 	bl	8002ab8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binarySemAutoGreen */
  binarySemAutoGreenHandle = osSemaphoreNew(1, 1, &binarySemAutoGreen_attributes); // Initialize to 1 for phase 1.
 8000524:	4a29      	ldr	r2, [pc, #164]	; (80005cc <main+0xc0>)
 8000526:	2101      	movs	r1, #1
 8000528:	2001      	movs	r0, #1
 800052a:	f002 fbbc 	bl	8002ca6 <osSemaphoreNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a27      	ldr	r2, [pc, #156]	; (80005d0 <main+0xc4>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of binarySemAutoYellow */
  binarySemAutoYellowHandle = osSemaphoreNew(1, 0, &binarySemAutoYellow_attributes);
 8000534:	4a27      	ldr	r2, [pc, #156]	; (80005d4 <main+0xc8>)
 8000536:	2100      	movs	r1, #0
 8000538:	2001      	movs	r0, #1
 800053a:	f002 fbb4 	bl	8002ca6 <osSemaphoreNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a25      	ldr	r2, [pc, #148]	; (80005d8 <main+0xcc>)
 8000542:	6013      	str	r3, [r2, #0]

  /* creation of binarySemAutoRed */
  binarySemAutoRedHandle = osSemaphoreNew(1, 0, &binarySemAutoRed_attributes);
 8000544:	4a25      	ldr	r2, [pc, #148]	; (80005dc <main+0xd0>)
 8000546:	2100      	movs	r1, #0
 8000548:	2001      	movs	r0, #1
 800054a:	f002 fbac 	bl	8002ca6 <osSemaphoreNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a23      	ldr	r2, [pc, #140]	; (80005e0 <main+0xd4>)
 8000552:	6013      	str	r3, [r2, #0]

  /* creation of binarySemPedGreen */
  binarySemPedGreenHandle = osSemaphoreNew(1, 0, &binarySemPedGreen_attributes);
 8000554:	4a23      	ldr	r2, [pc, #140]	; (80005e4 <main+0xd8>)
 8000556:	2100      	movs	r1, #0
 8000558:	2001      	movs	r0, #1
 800055a:	f002 fba4 	bl	8002ca6 <osSemaphoreNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <main+0xdc>)
 8000562:	6013      	str	r3, [r2, #0]

  /* creation of binarySemPedRed */
  binarySemPedRedHandle = osSemaphoreNew(1, 1, &binarySemPedRed_attributes); // Initialize to 1 for phase 1.
 8000564:	4a21      	ldr	r2, [pc, #132]	; (80005ec <main+0xe0>)
 8000566:	2101      	movs	r1, #1
 8000568:	2001      	movs	r0, #1
 800056a:	f002 fb9c 	bl	8002ca6 <osSemaphoreNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a1f      	ldr	r2, [pc, #124]	; (80005f0 <main+0xe4>)
 8000572:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of autoGreen */
  autoGreenHandle = osThreadNew(StartAutoGreen, NULL, &autoGreen_attributes);
 8000574:	4a1f      	ldr	r2, [pc, #124]	; (80005f4 <main+0xe8>)
 8000576:	2100      	movs	r1, #0
 8000578:	481f      	ldr	r0, [pc, #124]	; (80005f8 <main+0xec>)
 800057a:	f002 fae7 	bl	8002b4c <osThreadNew>
 800057e:	4603      	mov	r3, r0
 8000580:	4a1e      	ldr	r2, [pc, #120]	; (80005fc <main+0xf0>)
 8000582:	6013      	str	r3, [r2, #0]

  /* creation of autoYellow */
  autoYellowHandle = osThreadNew(StartAutoYellow, NULL, &autoYellow_attributes);
 8000584:	4a1e      	ldr	r2, [pc, #120]	; (8000600 <main+0xf4>)
 8000586:	2100      	movs	r1, #0
 8000588:	481e      	ldr	r0, [pc, #120]	; (8000604 <main+0xf8>)
 800058a:	f002 fadf 	bl	8002b4c <osThreadNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a1d      	ldr	r2, [pc, #116]	; (8000608 <main+0xfc>)
 8000592:	6013      	str	r3, [r2, #0]

  /* creation of autoRed */
  autoRedHandle = osThreadNew(StartAutoRed, NULL, &autoRed_attributes);
 8000594:	4a1d      	ldr	r2, [pc, #116]	; (800060c <main+0x100>)
 8000596:	2100      	movs	r1, #0
 8000598:	481d      	ldr	r0, [pc, #116]	; (8000610 <main+0x104>)
 800059a:	f002 fad7 	bl	8002b4c <osThreadNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a1c      	ldr	r2, [pc, #112]	; (8000614 <main+0x108>)
 80005a2:	6013      	str	r3, [r2, #0]

  /* creation of pedRed */
  pedRedHandle = osThreadNew(StartPedRed, NULL, &pedRed_attributes);
 80005a4:	4a1c      	ldr	r2, [pc, #112]	; (8000618 <main+0x10c>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	481c      	ldr	r0, [pc, #112]	; (800061c <main+0x110>)
 80005aa:	f002 facf 	bl	8002b4c <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a1b      	ldr	r2, [pc, #108]	; (8000620 <main+0x114>)
 80005b2:	6013      	str	r3, [r2, #0]

  /* creation of pedGreen */
  pedGreenHandle = osThreadNew(startPedGreen, NULL, &pedGreen_attributes);
 80005b4:	4a1b      	ldr	r2, [pc, #108]	; (8000624 <main+0x118>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	481b      	ldr	r0, [pc, #108]	; (8000628 <main+0x11c>)
 80005ba:	f002 fac7 	bl	8002b4c <osThreadNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a1a      	ldr	r2, [pc, #104]	; (800062c <main+0x120>)
 80005c2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005c4:	f002 fa9c 	bl	8002b00 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <main+0xbc>
 80005ca:	bf00      	nop
 80005cc:	08006378 	.word	0x08006378
 80005d0:	200000d8 	.word	0x200000d8
 80005d4:	08006388 	.word	0x08006388
 80005d8:	200000dc 	.word	0x200000dc
 80005dc:	08006398 	.word	0x08006398
 80005e0:	200000e0 	.word	0x200000e0
 80005e4:	080063a8 	.word	0x080063a8
 80005e8:	200000e4 	.word	0x200000e4
 80005ec:	080063b8 	.word	0x080063b8
 80005f0:	200000e8 	.word	0x200000e8
 80005f4:	080062c4 	.word	0x080062c4
 80005f8:	08000849 	.word	0x08000849
 80005fc:	200000c4 	.word	0x200000c4
 8000600:	080062e8 	.word	0x080062e8
 8000604:	080008a1 	.word	0x080008a1
 8000608:	200000c8 	.word	0x200000c8
 800060c:	0800630c 	.word	0x0800630c
 8000610:	08000915 	.word	0x08000915
 8000614:	200000cc 	.word	0x200000cc
 8000618:	08006330 	.word	0x08006330
 800061c:	08000975 	.word	0x08000975
 8000620:	200000d0 	.word	0x200000d0
 8000624:	08006354 	.word	0x08006354
 8000628:	080009d9 	.word	0x080009d9
 800062c:	200000d4 	.word	0x200000d4

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	2234      	movs	r2, #52	; 0x34
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f005 fcf4 	bl	800602c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b2c      	ldr	r3, [pc, #176]	; (800070c <SystemClock_Config+0xdc>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a2b      	ldr	r2, [pc, #172]	; (800070c <SystemClock_Config+0xdc>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
 8000664:	4b29      	ldr	r3, [pc, #164]	; (800070c <SystemClock_Config+0xdc>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000670:	2300      	movs	r3, #0
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	4b26      	ldr	r3, [pc, #152]	; (8000710 <SystemClock_Config+0xe0>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a25      	ldr	r2, [pc, #148]	; (8000710 <SystemClock_Config+0xe0>)
 800067a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b23      	ldr	r3, [pc, #140]	; (8000710 <SystemClock_Config+0xe0>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068c:	2301      	movs	r3, #1
 800068e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000694:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006a4:	23b4      	movs	r3, #180	; 0xb4
 80006a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 f9b5 	bl	8001a28 <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006c4:	f000 f9a8 	bl	8000a18 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006c8:	f000 fde2 	bl	8001290 <HAL_PWREx_EnableOverDrive>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006d2:	f000 f9a1 	bl	8000a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	230f      	movs	r3, #15
 80006d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	2302      	movs	r3, #2
 80006dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ee:	f107 0308 	add.w	r3, r7, #8
 80006f2:	2105      	movs	r1, #5
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 fe1b 	bl	8001330 <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000700:	f000 f98a 	bl	8000a18 <Error_Handler>
  }
}
 8000704:	bf00      	nop
 8000706:	3750      	adds	r7, #80	; 0x50
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <MX_USART2_UART_Init+0x50>)
 800071c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000724:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800074c:	f001 feac 	bl	80024a8 <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000756:	f000 f95f 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2000007c 	.word	0x2000007c
 8000764:	40004400 	.word	0x40004400

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	; 0x28
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	4b2e      	ldr	r3, [pc, #184]	; (800083c <MX_GPIO_Init+0xd4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a2d      	ldr	r2, [pc, #180]	; (800083c <MX_GPIO_Init+0xd4>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b2b      	ldr	r3, [pc, #172]	; (800083c <MX_GPIO_Init+0xd4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b27      	ldr	r3, [pc, #156]	; (800083c <MX_GPIO_Init+0xd4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a26      	ldr	r2, [pc, #152]	; (800083c <MX_GPIO_Init+0xd4>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b24      	ldr	r3, [pc, #144]	; (800083c <MX_GPIO_Init+0xd4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b20      	ldr	r3, [pc, #128]	; (800083c <MX_GPIO_Init+0xd4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a1f      	ldr	r2, [pc, #124]	; (800083c <MX_GPIO_Init+0xd4>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_GPIO_Init+0xd4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <MX_GPIO_Init+0xd4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a18      	ldr	r2, [pc, #96]	; (800083c <MX_GPIO_Init+0xd4>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_GPIO_Init+0xd4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 61e7 	mov.w	r1, #1848	; 0x738
 80007f4:	4812      	ldr	r0, [pc, #72]	; (8000840 <MX_GPIO_Init+0xd8>)
 80007f6:	f000 fd31 	bl	800125c <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000800:	2300      	movs	r3, #0
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4619      	mov	r1, r3
 800080e:	480d      	ldr	r0, [pc, #52]	; (8000844 <MX_GPIO_Init+0xdc>)
 8000810:	f000 fb78 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000814:	f44f 63e7 	mov.w	r3, #1848	; 0x738
 8000818:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081a:	2301      	movs	r3, #1
 800081c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000822:	2300      	movs	r3, #0
 8000824:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4619      	mov	r1, r3
 800082c:	4804      	ldr	r0, [pc, #16]	; (8000840 <MX_GPIO_Init+0xd8>)
 800082e:	f000 fb69 	bl	8000f04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000832:	bf00      	nop
 8000834:	3728      	adds	r7, #40	; 0x28
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800
 8000840:	40020400 	.word	0x40020400
 8000844:	40020800 	.word	0x40020800

08000848 <StartAutoGreen>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartAutoGreen */
void StartAutoGreen(void *argument)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  for(;;)
  {

	  // Phase 1 and 7.
	  // Acquire autoGreen semaphore.
	  osSemaphoreAcquire(binarySemAutoGreenHandle, osWaitForever);
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <StartAutoGreen+0x48>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f04f 31ff 	mov.w	r1, #4294967295
 8000858:	4618      	mov	r0, r3
 800085a:	f002 faad 	bl	8002db8 <osSemaphoreAcquire>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3, GPIO_PIN_SET);//Auto Green LED
 800085e:	2201      	movs	r2, #1
 8000860:	2108      	movs	r1, #8
 8000862:	480c      	ldr	r0, [pc, #48]	; (8000894 <StartAutoGreen+0x4c>)
 8000864:	f000 fcfa 	bl	800125c <HAL_GPIO_WritePin>

	  while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)); // Wait for button press.
 8000868:	bf00      	nop
 800086a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800086e:	480a      	ldr	r0, [pc, #40]	; (8000898 <StartAutoGreen+0x50>)
 8000870:	f000 fcdc 	bl	800122c <HAL_GPIO_ReadPin>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d1f7      	bne.n	800086a <StartAutoGreen+0x22>

	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2108      	movs	r1, #8
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <StartAutoGreen+0x4c>)
 8000880:	f000 fcec 	bl	800125c <HAL_GPIO_WritePin>
	  osSemaphoreRelease(binarySemAutoYellowHandle); // Release the semaphore for Auto Yellow to Transition to phase 2.
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <StartAutoGreen+0x54>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4618      	mov	r0, r3
 800088a:	f002 fae7 	bl	8002e5c <osSemaphoreRelease>
	  osSemaphoreAcquire(binarySemAutoGreenHandle, osWaitForever);
 800088e:	e7df      	b.n	8000850 <StartAutoGreen+0x8>
 8000890:	200000d8 	.word	0x200000d8
 8000894:	40020400 	.word	0x40020400
 8000898:	40020800 	.word	0x40020800
 800089c:	200000dc 	.word	0x200000dc

080008a0 <StartAutoYellow>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAutoYellow */
void StartAutoYellow(void *argument)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAutoYellow */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(binarySemAutoYellowHandle, osWaitForever);
 80008a8:	4b17      	ldr	r3, [pc, #92]	; (8000908 <StartAutoYellow+0x68>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f04f 31ff 	mov.w	r1, #4294967295
 80008b0:	4618      	mov	r0, r3
 80008b2:	f002 fa81 	bl	8002db8 <osSemaphoreAcquire>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	2120      	movs	r1, #32
 80008ba:	4814      	ldr	r0, [pc, #80]	; (800090c <StartAutoYellow+0x6c>)
 80008bc:	f000 fcce 	bl	800125c <HAL_GPIO_WritePin>

	  osDelay(3000);
 80008c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008c4:	f002 f9d4 	bl	8002c70 <osDelay>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // initial state.
 80008c8:	2200      	movs	r2, #0
 80008ca:	2120      	movs	r1, #32
 80008cc:	480f      	ldr	r0, [pc, #60]	; (800090c <StartAutoYellow+0x6c>)
 80008ce:	f000 fcc5 	bl	800125c <HAL_GPIO_WritePin>
	  osSemaphoreRelease(binarySemAutoRedHandle);
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <StartAutoYellow+0x70>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f002 fac0 	bl	8002e5c <osSemaphoreRelease>

	  osSemaphoreAcquire(binarySemAutoYellowHandle, osWaitForever);
 80008dc:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <StartAutoYellow+0x68>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f04f 31ff 	mov.w	r1, #4294967295
 80008e4:	4618      	mov	r0, r3
 80008e6:	f002 fa67 	bl	8002db8 <osSemaphoreAcquire>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5, GPIO_PIN_SET);
 80008ea:	2201      	movs	r2, #1
 80008ec:	2120      	movs	r1, #32
 80008ee:	4807      	ldr	r0, [pc, #28]	; (800090c <StartAutoYellow+0x6c>)
 80008f0:	f000 fcb4 	bl	800125c <HAL_GPIO_WritePin>

	  osDelay(2000);
 80008f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008f8:	f002 f9ba 	bl	8002c70 <osDelay>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2120      	movs	r1, #32
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <StartAutoYellow+0x6c>)
 8000902:	f000 fcab 	bl	800125c <HAL_GPIO_WritePin>
	  osSemaphoreAcquire(binarySemAutoYellowHandle, osWaitForever);
 8000906:	e7cf      	b.n	80008a8 <StartAutoYellow+0x8>
 8000908:	200000dc 	.word	0x200000dc
 800090c:	40020400 	.word	0x40020400
 8000910:	200000e0 	.word	0x200000e0

08000914 <StartAutoRed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAutoRed */
void StartAutoRed(void *argument)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAutoRed */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(binarySemAutoRedHandle, osWaitForever);
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <StartAutoRed+0x50>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f04f 31ff 	mov.w	r1, #4294967295
 8000924:	4618      	mov	r0, r3
 8000926:	f002 fa47 	bl	8002db8 <osSemaphoreAcquire>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4, GPIO_PIN_SET);
 800092a:	2201      	movs	r2, #1
 800092c:	2110      	movs	r1, #16
 800092e:	480e      	ldr	r0, [pc, #56]	; (8000968 <StartAutoRed+0x54>)
 8000930:	f000 fc94 	bl	800125c <HAL_GPIO_WritePin>

	  osDelay(12000);
 8000934:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8000938:	f002 f99a 	bl	8002c70 <osDelay>
	  osSemaphoreRelease(binarySemAutoYellowHandle);
 800093c:	4b0b      	ldr	r3, [pc, #44]	; (800096c <StartAutoRed+0x58>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4618      	mov	r0, r3
 8000942:	f002 fa8b 	bl	8002e5c <osSemaphoreRelease>

	  osDelay(2000);
 8000946:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800094a:	f002 f991 	bl	8002c70 <osDelay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2110      	movs	r1, #16
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <StartAutoRed+0x54>)
 8000954:	f000 fc82 	bl	800125c <HAL_GPIO_WritePin>
	  osSemaphoreRelease(binarySemAutoGreenHandle);
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <StartAutoRed+0x5c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4618      	mov	r0, r3
 800095e:	f002 fa7d 	bl	8002e5c <osSemaphoreRelease>
	  osSemaphoreAcquire(binarySemAutoRedHandle, osWaitForever);
 8000962:	e7db      	b.n	800091c <StartAutoRed+0x8>
 8000964:	200000e0 	.word	0x200000e0
 8000968:	40020400 	.word	0x40020400
 800096c:	200000dc 	.word	0x200000dc
 8000970:	200000d8 	.word	0x200000d8

08000974 <StartPedRed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPedRed */
void StartPedRed(void *argument)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPedRed */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(binarySemPedRedHandle, osWaitForever);
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <StartPedRed+0x54>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f04f 31ff 	mov.w	r1, #4294967295
 8000984:	4618      	mov	r0, r3
 8000986:	f002 fa17 	bl	8002db8 <osSemaphoreAcquire>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8, GPIO_PIN_SET); // Initial state for phase 1.
 800098a:	2201      	movs	r2, #1
 800098c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000990:	480e      	ldr	r0, [pc, #56]	; (80009cc <StartPedRed+0x58>)
 8000992:	f000 fc63 	bl	800125c <HAL_GPIO_WritePin>

	  while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)); // Wait for button press.
 8000996:	bf00      	nop
 8000998:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800099c:	480c      	ldr	r0, [pc, #48]	; (80009d0 <StartPedRed+0x5c>)
 800099e:	f000 fc45 	bl	800122c <HAL_GPIO_ReadPin>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d1f7      	bne.n	8000998 <StartPedRed+0x24>

	  osDelay(4000); // Wait 4 seconds to release semaphore for phase 4.
 80009a8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80009ac:	f002 f960 	bl	8002c70 <osDelay>

	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_8, GPIO_PIN_RESET); // Set off.
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <StartPedRed+0x58>)
 80009b8:	f000 fc50 	bl	800125c <HAL_GPIO_WritePin>

	  osSemaphoreRelease(binarySemPedGreenHandle); // For phase 4.
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <StartPedRed+0x60>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f002 fa4b 	bl	8002e5c <osSemaphoreRelease>
	  osSemaphoreAcquire(binarySemPedRedHandle, osWaitForever);
 80009c6:	e7d9      	b.n	800097c <StartPedRed+0x8>
 80009c8:	200000e8 	.word	0x200000e8
 80009cc:	40020400 	.word	0x40020400
 80009d0:	40020800 	.word	0x40020800
 80009d4:	200000e4 	.word	0x200000e4

080009d8 <startPedGreen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPedGreen */
void startPedGreen(void *argument)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPedGreen */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9, GPIO_PIN_RESET); // Initial State.
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e6:	4802      	ldr	r0, [pc, #8]	; (80009f0 <startPedGreen+0x18>)
 80009e8:	f000 fc38 	bl	800125c <HAL_GPIO_WritePin>
 80009ec:	e7f8      	b.n	80009e0 <startPedGreen+0x8>
 80009ee:	bf00      	nop
 80009f0:	40020400 	.word	0x40020400

080009f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d101      	bne.n	8000a0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a06:	f000 f97b 	bl	8000d00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40001000 	.word	0x40001000

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <Error_Handler+0x8>
	...

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_MspInit+0x54>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	4a11      	ldr	r2, [pc, #68]	; (8000a78 <HAL_MspInit+0x54>)
 8000a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a38:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <HAL_MspInit+0x54>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <HAL_MspInit+0x54>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <HAL_MspInit+0x54>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a54:	6413      	str	r3, [r2, #64]	; 0x40
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <HAL_MspInit+0x54>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	210f      	movs	r1, #15
 8000a66:	f06f 0001 	mvn.w	r0, #1
 8000a6a:	f000 fa21 	bl	8000eb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40023800 	.word	0x40023800

08000a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a19      	ldr	r2, [pc, #100]	; (8000b00 <HAL_UART_MspInit+0x84>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d12b      	bne.n	8000af6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	4a17      	ldr	r2, [pc, #92]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aac:	6413      	str	r3, [r2, #64]	; 0x40
 8000aae:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a10      	ldr	r2, [pc, #64]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <HAL_UART_MspInit+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ad6:	230c      	movs	r3, #12
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ae6:	2307      	movs	r3, #7
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	; (8000b08 <HAL_UART_MspInit+0x8c>)
 8000af2:	f000 fa07 	bl	8000f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000af6:	bf00      	nop
 8000af8:	3728      	adds	r7, #40	; 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40004400 	.word	0x40004400
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020000 	.word	0x40020000

08000b0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08e      	sub	sp, #56	; 0x38
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	4b33      	ldr	r3, [pc, #204]	; (8000bf0 <HAL_InitTick+0xe4>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	4a32      	ldr	r2, [pc, #200]	; (8000bf0 <HAL_InitTick+0xe4>)
 8000b26:	f043 0310 	orr.w	r3, r3, #16
 8000b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2c:	4b30      	ldr	r3, [pc, #192]	; (8000bf0 <HAL_InitTick+0xe4>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	f003 0310 	and.w	r3, r3, #16
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b38:	f107 0210 	add.w	r2, r7, #16
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4611      	mov	r1, r2
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 fd0e 	bl	8001564 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b48:	6a3b      	ldr	r3, [r7, #32]
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d103      	bne.n	8000b5a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b52:	f000 fcdf 	bl	8001514 <HAL_RCC_GetPCLK1Freq>
 8000b56:	6378      	str	r0, [r7, #52]	; 0x34
 8000b58:	e004      	b.n	8000b64 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b5a:	f000 fcdb 	bl	8001514 <HAL_RCC_GetPCLK1Freq>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b66:	4a23      	ldr	r2, [pc, #140]	; (8000bf4 <HAL_InitTick+0xe8>)
 8000b68:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6c:	0c9b      	lsrs	r3, r3, #18
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b72:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b74:	4a21      	ldr	r2, [pc, #132]	; (8000bfc <HAL_InitTick+0xf0>)
 8000b76:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b7e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b80:	4a1d      	ldr	r2, [pc, #116]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b84:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b98:	4817      	ldr	r0, [pc, #92]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b9a:	f001 f9e3 	bl	8001f64 <HAL_TIM_Base_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ba4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d11b      	bne.n	8000be4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bac:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <HAL_InitTick+0xec>)
 8000bae:	f001 fa33 	bl	8002018 <HAL_TIM_Base_Start_IT>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d111      	bne.n	8000be4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bc0:	2036      	movs	r0, #54	; 0x36
 8000bc2:	f000 f991 	bl	8000ee8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b0f      	cmp	r3, #15
 8000bca:	d808      	bhi.n	8000bde <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	6879      	ldr	r1, [r7, #4]
 8000bd0:	2036      	movs	r0, #54	; 0x36
 8000bd2:	f000 f96d 	bl	8000eb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <HAL_InitTick+0xf4>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6013      	str	r3, [r2, #0]
 8000bdc:	e002      	b.n	8000be4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000be4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3738      	adds	r7, #56	; 0x38
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	431bde83 	.word	0x431bde83
 8000bf8:	200000ec 	.word	0x200000ec
 8000bfc:	40001000 	.word	0x40001000
 8000c00:	20000004 	.word	0x20000004

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <TIM6_DAC_IRQHandler+0x10>)
 8000c36:	f001 fa5f 	bl	80020f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200000ec 	.word	0x200000ec

08000c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <SystemInit+0x20>)
 8000c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <SystemInit+0x20>)
 8000c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c6c:	f7ff ffea 	bl	8000c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c72:	490d      	ldr	r1, [pc, #52]	; (8000ca8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c74:	4a0d      	ldr	r2, [pc, #52]	; (8000cac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c78:	e002      	b.n	8000c80 <LoopCopyDataInit>

08000c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7e:	3304      	adds	r3, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c84:	d3f9      	bcc.n	8000c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c88:	4c0a      	ldr	r4, [pc, #40]	; (8000cb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c8c:	e001      	b.n	8000c92 <LoopFillZerobss>

08000c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c90:	3204      	adds	r2, #4

08000c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c94:	d3fb      	bcc.n	8000c8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c96:	f005 fa27 	bl	80060e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c9a:	f7ff fc37 	bl	800050c <main>
  bx  lr    
 8000c9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ca0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000cac:	080063f0 	.word	0x080063f0
  ldr r2, =_sbss
 8000cb0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000cb4:	20004c60 	.word	0x20004c60

08000cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb8:	e7fe      	b.n	8000cb8 <ADC_IRQHandler>
	...

08000cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <HAL_Init+0x40>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <HAL_Init+0x40>)
 8000cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <HAL_Init+0x40>)
 8000cd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <HAL_Init+0x40>)
 8000cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 f8d8 	bl	8000e9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cea:	200f      	movs	r0, #15
 8000cec:	f7ff ff0e 	bl	8000b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cf0:	f7ff fe98 	bl	8000a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023c00 	.word	0x40023c00

08000d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x20>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x24>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_IncTick+0x24>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20000134 	.word	0x20000134

08000d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <HAL_GetTick+0x14>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000134 	.word	0x20000134

08000d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d72:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	60d3      	str	r3, [r2, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	f003 0307 	and.w	r3, r3, #7
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	db0b      	blt.n	8000dce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	f003 021f 	and.w	r2, r3, #31
 8000dbc:	4907      	ldr	r1, [pc, #28]	; (8000ddc <__NVIC_EnableIRQ+0x38>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	095b      	lsrs	r3, r3, #5
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dce:	bf00      	nop
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000e100 	.word	0xe000e100

08000de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	db0a      	blt.n	8000e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	490c      	ldr	r1, [pc, #48]	; (8000e2c <__NVIC_SetPriority+0x4c>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	0112      	lsls	r2, r2, #4
 8000e00:	b2d2      	uxtb	r2, r2
 8000e02:	440b      	add	r3, r1
 8000e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e08:	e00a      	b.n	8000e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4908      	ldr	r1, [pc, #32]	; (8000e30 <__NVIC_SetPriority+0x50>)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	f003 030f 	and.w	r3, r3, #15
 8000e16:	3b04      	subs	r3, #4
 8000e18:	0112      	lsls	r2, r2, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	761a      	strb	r2, [r3, #24]
}
 8000e20:	bf00      	nop
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e100 	.word	0xe000e100
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b089      	sub	sp, #36	; 0x24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f003 0307 	and.w	r3, r3, #7
 8000e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f1c3 0307 	rsb	r3, r3, #7
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	bf28      	it	cs
 8000e52:	2304      	movcs	r3, #4
 8000e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	2b06      	cmp	r3, #6
 8000e5c:	d902      	bls.n	8000e64 <NVIC_EncodePriority+0x30>
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3b03      	subs	r3, #3
 8000e62:	e000      	b.n	8000e66 <NVIC_EncodePriority+0x32>
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43da      	mvns	r2, r3
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	401a      	ands	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	43d9      	mvns	r1, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	4313      	orrs	r3, r2
         );
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3724      	adds	r7, #36	; 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ff4c 	bl	8000d40 <__NVIC_SetPriorityGrouping>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
 8000ebc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec2:	f7ff ff61 	bl	8000d88 <__NVIC_GetPriorityGrouping>
 8000ec6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	68b9      	ldr	r1, [r7, #8]
 8000ecc:	6978      	ldr	r0, [r7, #20]
 8000ece:	f7ff ffb1 	bl	8000e34 <NVIC_EncodePriority>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed8:	4611      	mov	r1, r2
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff80 	bl	8000de0 <__NVIC_SetPriority>
}
 8000ee0:	bf00      	nop
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff54 	bl	8000da4 <__NVIC_EnableIRQ>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
 8000f1e:	e165      	b.n	80011ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f20:	2201      	movs	r2, #1
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	f040 8154 	bne.w	80011e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d005      	beq.n	8000f56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d130      	bne.n	8000fb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	68da      	ldr	r2, [r3, #12]
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	091b      	lsrs	r3, r3, #4
 8000fa2:	f003 0201 	and.w	r2, r3, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0303 	and.w	r3, r3, #3
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	d017      	beq.n	8000ff4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	2203      	movs	r2, #3
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d123      	bne.n	8001048 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	08da      	lsrs	r2, r3, #3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3208      	adds	r2, #8
 8001008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	220f      	movs	r2, #15
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	691a      	ldr	r2, [r3, #16]
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	08da      	lsrs	r2, r3, #3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3208      	adds	r2, #8
 8001042:	69b9      	ldr	r1, [r7, #24]
 8001044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0203 	and.w	r2, r3, #3
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 80ae 	beq.w	80011e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b5d      	ldr	r3, [pc, #372]	; (8001204 <HAL_GPIO_Init+0x300>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	4a5c      	ldr	r2, [pc, #368]	; (8001204 <HAL_GPIO_Init+0x300>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001098:	6453      	str	r3, [r2, #68]	; 0x44
 800109a:	4b5a      	ldr	r3, [pc, #360]	; (8001204 <HAL_GPIO_Init+0x300>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a6:	4a58      	ldr	r2, [pc, #352]	; (8001208 <HAL_GPIO_Init+0x304>)
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3302      	adds	r3, #2
 80010ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	220f      	movs	r2, #15
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4f      	ldr	r2, [pc, #316]	; (800120c <HAL_GPIO_Init+0x308>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d025      	beq.n	800111e <HAL_GPIO_Init+0x21a>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4e      	ldr	r2, [pc, #312]	; (8001210 <HAL_GPIO_Init+0x30c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d01f      	beq.n	800111a <HAL_GPIO_Init+0x216>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4d      	ldr	r2, [pc, #308]	; (8001214 <HAL_GPIO_Init+0x310>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d019      	beq.n	8001116 <HAL_GPIO_Init+0x212>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4c      	ldr	r2, [pc, #304]	; (8001218 <HAL_GPIO_Init+0x314>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d013      	beq.n	8001112 <HAL_GPIO_Init+0x20e>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4b      	ldr	r2, [pc, #300]	; (800121c <HAL_GPIO_Init+0x318>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d00d      	beq.n	800110e <HAL_GPIO_Init+0x20a>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4a      	ldr	r2, [pc, #296]	; (8001220 <HAL_GPIO_Init+0x31c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d007      	beq.n	800110a <HAL_GPIO_Init+0x206>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a49      	ldr	r2, [pc, #292]	; (8001224 <HAL_GPIO_Init+0x320>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d101      	bne.n	8001106 <HAL_GPIO_Init+0x202>
 8001102:	2306      	movs	r3, #6
 8001104:	e00c      	b.n	8001120 <HAL_GPIO_Init+0x21c>
 8001106:	2307      	movs	r3, #7
 8001108:	e00a      	b.n	8001120 <HAL_GPIO_Init+0x21c>
 800110a:	2305      	movs	r3, #5
 800110c:	e008      	b.n	8001120 <HAL_GPIO_Init+0x21c>
 800110e:	2304      	movs	r3, #4
 8001110:	e006      	b.n	8001120 <HAL_GPIO_Init+0x21c>
 8001112:	2303      	movs	r3, #3
 8001114:	e004      	b.n	8001120 <HAL_GPIO_Init+0x21c>
 8001116:	2302      	movs	r3, #2
 8001118:	e002      	b.n	8001120 <HAL_GPIO_Init+0x21c>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <HAL_GPIO_Init+0x21c>
 800111e:	2300      	movs	r3, #0
 8001120:	69fa      	ldr	r2, [r7, #28]
 8001122:	f002 0203 	and.w	r2, r2, #3
 8001126:	0092      	lsls	r2, r2, #2
 8001128:	4093      	lsls	r3, r2
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001130:	4935      	ldr	r1, [pc, #212]	; (8001208 <HAL_GPIO_Init+0x304>)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	089b      	lsrs	r3, r3, #2
 8001136:	3302      	adds	r3, #2
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113e:	4b3a      	ldr	r3, [pc, #232]	; (8001228 <HAL_GPIO_Init+0x324>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001162:	4a31      	ldr	r2, [pc, #196]	; (8001228 <HAL_GPIO_Init+0x324>)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001168:	4b2f      	ldr	r3, [pc, #188]	; (8001228 <HAL_GPIO_Init+0x324>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800118c:	4a26      	ldr	r2, [pc, #152]	; (8001228 <HAL_GPIO_Init+0x324>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <HAL_GPIO_Init+0x324>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011b6:	4a1c      	ldr	r2, [pc, #112]	; (8001228 <HAL_GPIO_Init+0x324>)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011bc:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <HAL_GPIO_Init+0x324>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011e0:	4a11      	ldr	r2, [pc, #68]	; (8001228 <HAL_GPIO_Init+0x324>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3301      	adds	r3, #1
 80011ea:	61fb      	str	r3, [r7, #28]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	2b0f      	cmp	r3, #15
 80011f0:	f67f ae96 	bls.w	8000f20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40013800 	.word	0x40013800
 800120c:	40020000 	.word	0x40020000
 8001210:	40020400 	.word	0x40020400
 8001214:	40020800 	.word	0x40020800
 8001218:	40020c00 	.word	0x40020c00
 800121c:	40021000 	.word	0x40021000
 8001220:	40021400 	.word	0x40021400
 8001224:	40021800 	.word	0x40021800
 8001228:	40013c00 	.word	0x40013c00

0800122c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	691a      	ldr	r2, [r3, #16]
 800123c:	887b      	ldrh	r3, [r7, #2]
 800123e:	4013      	ands	r3, r2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d002      	beq.n	800124a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001244:	2301      	movs	r3, #1
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	e001      	b.n	800124e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800124a:	2300      	movs	r3, #0
 800124c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800124e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
 8001268:	4613      	mov	r3, r2
 800126a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800126c:	787b      	ldrb	r3, [r7, #1]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001272:	887a      	ldrh	r2, [r7, #2]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001278:	e003      	b.n	8001282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	041a      	lsls	r2, r3, #16
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	619a      	str	r2, [r3, #24]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	4b20      	ldr	r3, [pc, #128]	; (8001320 <HAL_PWREx_EnableOverDrive+0x90>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	4a1f      	ldr	r2, [pc, #124]	; (8001320 <HAL_PWREx_EnableOverDrive+0x90>)
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a8:	6413      	str	r3, [r2, #64]	; 0x40
 80012aa:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <HAL_PWREx_EnableOverDrive+0x90>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80012b6:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <HAL_PWREx_EnableOverDrive+0x94>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012bc:	f7ff fd34 	bl	8000d28 <HAL_GetTick>
 80012c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012c2:	e009      	b.n	80012d8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012c4:	f7ff fd30 	bl	8000d28 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012d2:	d901      	bls.n	80012d8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e01f      	b.n	8001318 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012d8:	4b13      	ldr	r3, [pc, #76]	; (8001328 <HAL_PWREx_EnableOverDrive+0x98>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e4:	d1ee      	bne.n	80012c4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_PWREx_EnableOverDrive+0x9c>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012ec:	f7ff fd1c 	bl	8000d28 <HAL_GetTick>
 80012f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80012f2:	e009      	b.n	8001308 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012f4:	f7ff fd18 	bl	8000d28 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001302:	d901      	bls.n	8001308 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e007      	b.n	8001318 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001308:	4b07      	ldr	r3, [pc, #28]	; (8001328 <HAL_PWREx_EnableOverDrive+0x98>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001310:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001314:	d1ee      	bne.n	80012f4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	420e0040 	.word	0x420e0040
 8001328:	40007000 	.word	0x40007000
 800132c:	420e0044 	.word	0x420e0044

08001330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e0cc      	b.n	80014de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001344:	4b68      	ldr	r3, [pc, #416]	; (80014e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 030f 	and.w	r3, r3, #15
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	429a      	cmp	r2, r3
 8001350:	d90c      	bls.n	800136c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001352:	4b65      	ldr	r3, [pc, #404]	; (80014e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800135a:	4b63      	ldr	r3, [pc, #396]	; (80014e8 <HAL_RCC_ClockConfig+0x1b8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	d001      	beq.n	800136c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e0b8      	b.n	80014de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d020      	beq.n	80013ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	2b00      	cmp	r3, #0
 8001382:	d005      	beq.n	8001390 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001384:	4b59      	ldr	r3, [pc, #356]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	4a58      	ldr	r2, [pc, #352]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 800138a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800138e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800139c:	4b53      	ldr	r3, [pc, #332]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	4a52      	ldr	r2, [pc, #328]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 80013a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013a8:	4b50      	ldr	r3, [pc, #320]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	494d      	ldr	r1, [pc, #308]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d044      	beq.n	8001450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d107      	bne.n	80013de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ce:	4b47      	ldr	r3, [pc, #284]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d119      	bne.n	800140e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e07f      	b.n	80014de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d003      	beq.n	80013ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d107      	bne.n	80013fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ee:	4b3f      	ldr	r3, [pc, #252]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d109      	bne.n	800140e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e06f      	b.n	80014de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fe:	4b3b      	ldr	r3, [pc, #236]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e067      	b.n	80014de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800140e:	4b37      	ldr	r3, [pc, #220]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f023 0203 	bic.w	r2, r3, #3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	4934      	ldr	r1, [pc, #208]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 800141c:	4313      	orrs	r3, r2
 800141e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001420:	f7ff fc82 	bl	8000d28 <HAL_GetTick>
 8001424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001426:	e00a      	b.n	800143e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001428:	f7ff fc7e 	bl	8000d28 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	f241 3288 	movw	r2, #5000	; 0x1388
 8001436:	4293      	cmp	r3, r2
 8001438:	d901      	bls.n	800143e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e04f      	b.n	80014de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800143e:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 020c 	and.w	r2, r3, #12
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	429a      	cmp	r2, r3
 800144e:	d1eb      	bne.n	8001428 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001450:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 030f 	and.w	r3, r3, #15
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d20c      	bcs.n	8001478 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800145e:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001466:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 030f 	and.w	r3, r3, #15
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d001      	beq.n	8001478 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e032      	b.n	80014de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	d008      	beq.n	8001496 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001484:	4b19      	ldr	r3, [pc, #100]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	4916      	ldr	r1, [pc, #88]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 8001492:	4313      	orrs	r3, r2
 8001494:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d009      	beq.n	80014b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014a2:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	490e      	ldr	r1, [pc, #56]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014b6:	f000 f887 	bl	80015c8 <HAL_RCC_GetSysClockFreq>
 80014ba:	4602      	mov	r2, r0
 80014bc:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <HAL_RCC_ClockConfig+0x1bc>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	091b      	lsrs	r3, r3, #4
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	490a      	ldr	r1, [pc, #40]	; (80014f0 <HAL_RCC_ClockConfig+0x1c0>)
 80014c8:	5ccb      	ldrb	r3, [r1, r3]
 80014ca:	fa22 f303 	lsr.w	r3, r2, r3
 80014ce:	4a09      	ldr	r2, [pc, #36]	; (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 80014d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <HAL_RCC_ClockConfig+0x1c8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fb18 	bl	8000b0c <HAL_InitTick>

  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023c00 	.word	0x40023c00
 80014ec:	40023800 	.word	0x40023800
 80014f0:	080063c8 	.word	0x080063c8
 80014f4:	20000000 	.word	0x20000000
 80014f8:	20000004 	.word	0x20000004

080014fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001500:	4b03      	ldr	r3, [pc, #12]	; (8001510 <HAL_RCC_GetHCLKFreq+0x14>)
 8001502:	681b      	ldr	r3, [r3, #0]
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20000000 	.word	0x20000000

08001514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001518:	f7ff fff0 	bl	80014fc <HAL_RCC_GetHCLKFreq>
 800151c:	4602      	mov	r2, r0
 800151e:	4b05      	ldr	r3, [pc, #20]	; (8001534 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	0a9b      	lsrs	r3, r3, #10
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	4903      	ldr	r1, [pc, #12]	; (8001538 <HAL_RCC_GetPCLK1Freq+0x24>)
 800152a:	5ccb      	ldrb	r3, [r1, r3]
 800152c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001530:	4618      	mov	r0, r3
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40023800 	.word	0x40023800
 8001538:	080063d8 	.word	0x080063d8

0800153c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001540:	f7ff ffdc 	bl	80014fc <HAL_RCC_GetHCLKFreq>
 8001544:	4602      	mov	r2, r0
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	0b5b      	lsrs	r3, r3, #13
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	4903      	ldr	r1, [pc, #12]	; (8001560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001552:	5ccb      	ldrb	r3, [r1, r3]
 8001554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001558:	4618      	mov	r0, r3
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40023800 	.word	0x40023800
 8001560:	080063d8 	.word	0x080063d8

08001564 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	220f      	movs	r2, #15
 8001572:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_RCC_GetClockConfig+0x5c>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 0203 	and.w	r2, r3, #3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <HAL_RCC_GetClockConfig+0x5c>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <HAL_RCC_GetClockConfig+0x5c>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <HAL_RCC_GetClockConfig+0x5c>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	08db      	lsrs	r3, r3, #3
 800159e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015a6:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <HAL_RCC_GetClockConfig+0x60>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 020f 	and.w	r2, r3, #15
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	601a      	str	r2, [r3, #0]
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40023c00 	.word	0x40023c00

080015c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015cc:	b0ae      	sub	sp, #184	; 0xb8
 80015ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80015dc:	2300      	movs	r3, #0
 80015de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015ee:	4bcb      	ldr	r3, [pc, #812]	; (800191c <HAL_RCC_GetSysClockFreq+0x354>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
 80015f6:	2b0c      	cmp	r3, #12
 80015f8:	f200 8206 	bhi.w	8001a08 <HAL_RCC_GetSysClockFreq+0x440>
 80015fc:	a201      	add	r2, pc, #4	; (adr r2, 8001604 <HAL_RCC_GetSysClockFreq+0x3c>)
 80015fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001602:	bf00      	nop
 8001604:	08001639 	.word	0x08001639
 8001608:	08001a09 	.word	0x08001a09
 800160c:	08001a09 	.word	0x08001a09
 8001610:	08001a09 	.word	0x08001a09
 8001614:	08001641 	.word	0x08001641
 8001618:	08001a09 	.word	0x08001a09
 800161c:	08001a09 	.word	0x08001a09
 8001620:	08001a09 	.word	0x08001a09
 8001624:	08001649 	.word	0x08001649
 8001628:	08001a09 	.word	0x08001a09
 800162c:	08001a09 	.word	0x08001a09
 8001630:	08001a09 	.word	0x08001a09
 8001634:	08001839 	.word	0x08001839
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001638:	4bb9      	ldr	r3, [pc, #740]	; (8001920 <HAL_RCC_GetSysClockFreq+0x358>)
 800163a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800163e:	e1e7      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001640:	4bb8      	ldr	r3, [pc, #736]	; (8001924 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001642:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001646:	e1e3      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001648:	4bb4      	ldr	r3, [pc, #720]	; (800191c <HAL_RCC_GetSysClockFreq+0x354>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001650:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001654:	4bb1      	ldr	r3, [pc, #708]	; (800191c <HAL_RCC_GetSysClockFreq+0x354>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d071      	beq.n	8001744 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001660:	4bae      	ldr	r3, [pc, #696]	; (800191c <HAL_RCC_GetSysClockFreq+0x354>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	099b      	lsrs	r3, r3, #6
 8001666:	2200      	movs	r2, #0
 8001668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800166c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001670:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001678:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001682:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001686:	4622      	mov	r2, r4
 8001688:	462b      	mov	r3, r5
 800168a:	f04f 0000 	mov.w	r0, #0
 800168e:	f04f 0100 	mov.w	r1, #0
 8001692:	0159      	lsls	r1, r3, #5
 8001694:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001698:	0150      	lsls	r0, r2, #5
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4621      	mov	r1, r4
 80016a0:	1a51      	subs	r1, r2, r1
 80016a2:	6439      	str	r1, [r7, #64]	; 0x40
 80016a4:	4629      	mov	r1, r5
 80016a6:	eb63 0301 	sbc.w	r3, r3, r1
 80016aa:	647b      	str	r3, [r7, #68]	; 0x44
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	f04f 0300 	mov.w	r3, #0
 80016b4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80016b8:	4649      	mov	r1, r9
 80016ba:	018b      	lsls	r3, r1, #6
 80016bc:	4641      	mov	r1, r8
 80016be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016c2:	4641      	mov	r1, r8
 80016c4:	018a      	lsls	r2, r1, #6
 80016c6:	4641      	mov	r1, r8
 80016c8:	1a51      	subs	r1, r2, r1
 80016ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80016cc:	4649      	mov	r1, r9
 80016ce:	eb63 0301 	sbc.w	r3, r3, r1
 80016d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	f04f 0300 	mov.w	r3, #0
 80016dc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80016e0:	4649      	mov	r1, r9
 80016e2:	00cb      	lsls	r3, r1, #3
 80016e4:	4641      	mov	r1, r8
 80016e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016ea:	4641      	mov	r1, r8
 80016ec:	00ca      	lsls	r2, r1, #3
 80016ee:	4610      	mov	r0, r2
 80016f0:	4619      	mov	r1, r3
 80016f2:	4603      	mov	r3, r0
 80016f4:	4622      	mov	r2, r4
 80016f6:	189b      	adds	r3, r3, r2
 80016f8:	633b      	str	r3, [r7, #48]	; 0x30
 80016fa:	462b      	mov	r3, r5
 80016fc:	460a      	mov	r2, r1
 80016fe:	eb42 0303 	adc.w	r3, r2, r3
 8001702:	637b      	str	r3, [r7, #52]	; 0x34
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	f04f 0300 	mov.w	r3, #0
 800170c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001710:	4629      	mov	r1, r5
 8001712:	024b      	lsls	r3, r1, #9
 8001714:	4621      	mov	r1, r4
 8001716:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800171a:	4621      	mov	r1, r4
 800171c:	024a      	lsls	r2, r1, #9
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001726:	2200      	movs	r2, #0
 8001728:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800172c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001730:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001734:	f7fe fd6c 	bl	8000210 <__aeabi_uldivmod>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4613      	mov	r3, r2
 800173e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001742:	e067      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001744:	4b75      	ldr	r3, [pc, #468]	; (800191c <HAL_RCC_GetSysClockFreq+0x354>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	099b      	lsrs	r3, r3, #6
 800174a:	2200      	movs	r2, #0
 800174c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001750:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001754:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800175c:	67bb      	str	r3, [r7, #120]	; 0x78
 800175e:	2300      	movs	r3, #0
 8001760:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001762:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001766:	4622      	mov	r2, r4
 8001768:	462b      	mov	r3, r5
 800176a:	f04f 0000 	mov.w	r0, #0
 800176e:	f04f 0100 	mov.w	r1, #0
 8001772:	0159      	lsls	r1, r3, #5
 8001774:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001778:	0150      	lsls	r0, r2, #5
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4621      	mov	r1, r4
 8001780:	1a51      	subs	r1, r2, r1
 8001782:	62b9      	str	r1, [r7, #40]	; 0x28
 8001784:	4629      	mov	r1, r5
 8001786:	eb63 0301 	sbc.w	r3, r3, r1
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001798:	4649      	mov	r1, r9
 800179a:	018b      	lsls	r3, r1, #6
 800179c:	4641      	mov	r1, r8
 800179e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017a2:	4641      	mov	r1, r8
 80017a4:	018a      	lsls	r2, r1, #6
 80017a6:	4641      	mov	r1, r8
 80017a8:	ebb2 0a01 	subs.w	sl, r2, r1
 80017ac:	4649      	mov	r1, r9
 80017ae:	eb63 0b01 	sbc.w	fp, r3, r1
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80017be:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017c6:	4692      	mov	sl, r2
 80017c8:	469b      	mov	fp, r3
 80017ca:	4623      	mov	r3, r4
 80017cc:	eb1a 0303 	adds.w	r3, sl, r3
 80017d0:	623b      	str	r3, [r7, #32]
 80017d2:	462b      	mov	r3, r5
 80017d4:	eb4b 0303 	adc.w	r3, fp, r3
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80017e6:	4629      	mov	r1, r5
 80017e8:	028b      	lsls	r3, r1, #10
 80017ea:	4621      	mov	r1, r4
 80017ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017f0:	4621      	mov	r1, r4
 80017f2:	028a      	lsls	r2, r1, #10
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017fc:	2200      	movs	r2, #0
 80017fe:	673b      	str	r3, [r7, #112]	; 0x70
 8001800:	677a      	str	r2, [r7, #116]	; 0x74
 8001802:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001806:	f7fe fd03 	bl	8000210 <__aeabi_uldivmod>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4613      	mov	r3, r2
 8001810:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001814:	4b41      	ldr	r3, [pc, #260]	; (800191c <HAL_RCC_GetSysClockFreq+0x354>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	0c1b      	lsrs	r3, r3, #16
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	3301      	adds	r3, #1
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001826:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800182a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800182e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001832:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001836:	e0eb      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001838:	4b38      	ldr	r3, [pc, #224]	; (800191c <HAL_RCC_GetSysClockFreq+0x354>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001840:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001844:	4b35      	ldr	r3, [pc, #212]	; (800191c <HAL_RCC_GetSysClockFreq+0x354>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d06b      	beq.n	8001928 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001850:	4b32      	ldr	r3, [pc, #200]	; (800191c <HAL_RCC_GetSysClockFreq+0x354>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	099b      	lsrs	r3, r3, #6
 8001856:	2200      	movs	r2, #0
 8001858:	66bb      	str	r3, [r7, #104]	; 0x68
 800185a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800185c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800185e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001862:	663b      	str	r3, [r7, #96]	; 0x60
 8001864:	2300      	movs	r3, #0
 8001866:	667b      	str	r3, [r7, #100]	; 0x64
 8001868:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800186c:	4622      	mov	r2, r4
 800186e:	462b      	mov	r3, r5
 8001870:	f04f 0000 	mov.w	r0, #0
 8001874:	f04f 0100 	mov.w	r1, #0
 8001878:	0159      	lsls	r1, r3, #5
 800187a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800187e:	0150      	lsls	r0, r2, #5
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4621      	mov	r1, r4
 8001886:	1a51      	subs	r1, r2, r1
 8001888:	61b9      	str	r1, [r7, #24]
 800188a:	4629      	mov	r1, r5
 800188c:	eb63 0301 	sbc.w	r3, r3, r1
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800189e:	4659      	mov	r1, fp
 80018a0:	018b      	lsls	r3, r1, #6
 80018a2:	4651      	mov	r1, sl
 80018a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018a8:	4651      	mov	r1, sl
 80018aa:	018a      	lsls	r2, r1, #6
 80018ac:	4651      	mov	r1, sl
 80018ae:	ebb2 0801 	subs.w	r8, r2, r1
 80018b2:	4659      	mov	r1, fp
 80018b4:	eb63 0901 	sbc.w	r9, r3, r1
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018cc:	4690      	mov	r8, r2
 80018ce:	4699      	mov	r9, r3
 80018d0:	4623      	mov	r3, r4
 80018d2:	eb18 0303 	adds.w	r3, r8, r3
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	462b      	mov	r3, r5
 80018da:	eb49 0303 	adc.w	r3, r9, r3
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	f04f 0300 	mov.w	r3, #0
 80018e8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80018ec:	4629      	mov	r1, r5
 80018ee:	024b      	lsls	r3, r1, #9
 80018f0:	4621      	mov	r1, r4
 80018f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018f6:	4621      	mov	r1, r4
 80018f8:	024a      	lsls	r2, r1, #9
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001902:	2200      	movs	r2, #0
 8001904:	65bb      	str	r3, [r7, #88]	; 0x58
 8001906:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001908:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800190c:	f7fe fc80 	bl	8000210 <__aeabi_uldivmod>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4613      	mov	r3, r2
 8001916:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800191a:	e065      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0x420>
 800191c:	40023800 	.word	0x40023800
 8001920:	00f42400 	.word	0x00f42400
 8001924:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001928:	4b3d      	ldr	r3, [pc, #244]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x458>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	099b      	lsrs	r3, r3, #6
 800192e:	2200      	movs	r2, #0
 8001930:	4618      	mov	r0, r3
 8001932:	4611      	mov	r1, r2
 8001934:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001938:	653b      	str	r3, [r7, #80]	; 0x50
 800193a:	2300      	movs	r3, #0
 800193c:	657b      	str	r3, [r7, #84]	; 0x54
 800193e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001942:	4642      	mov	r2, r8
 8001944:	464b      	mov	r3, r9
 8001946:	f04f 0000 	mov.w	r0, #0
 800194a:	f04f 0100 	mov.w	r1, #0
 800194e:	0159      	lsls	r1, r3, #5
 8001950:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001954:	0150      	lsls	r0, r2, #5
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4641      	mov	r1, r8
 800195c:	1a51      	subs	r1, r2, r1
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	4649      	mov	r1, r9
 8001962:	eb63 0301 	sbc.w	r3, r3, r1
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001974:	4659      	mov	r1, fp
 8001976:	018b      	lsls	r3, r1, #6
 8001978:	4651      	mov	r1, sl
 800197a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800197e:	4651      	mov	r1, sl
 8001980:	018a      	lsls	r2, r1, #6
 8001982:	4651      	mov	r1, sl
 8001984:	1a54      	subs	r4, r2, r1
 8001986:	4659      	mov	r1, fp
 8001988:	eb63 0501 	sbc.w	r5, r3, r1
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	00eb      	lsls	r3, r5, #3
 8001996:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800199a:	00e2      	lsls	r2, r4, #3
 800199c:	4614      	mov	r4, r2
 800199e:	461d      	mov	r5, r3
 80019a0:	4643      	mov	r3, r8
 80019a2:	18e3      	adds	r3, r4, r3
 80019a4:	603b      	str	r3, [r7, #0]
 80019a6:	464b      	mov	r3, r9
 80019a8:	eb45 0303 	adc.w	r3, r5, r3
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019ba:	4629      	mov	r1, r5
 80019bc:	028b      	lsls	r3, r1, #10
 80019be:	4621      	mov	r1, r4
 80019c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019c4:	4621      	mov	r1, r4
 80019c6:	028a      	lsls	r2, r1, #10
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019d0:	2200      	movs	r2, #0
 80019d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80019d4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80019d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80019da:	f7fe fc19 	bl	8000210 <__aeabi_uldivmod>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4613      	mov	r3, r2
 80019e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80019e8:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x458>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	0f1b      	lsrs	r3, r3, #28
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80019f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80019fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a06:	e003      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001a0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	37b8      	adds	r7, #184	; 0xb8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800
 8001a24:	00f42400 	.word	0x00f42400

08001a28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e28d      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 8083 	beq.w	8001b4e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a48:	4b94      	ldr	r3, [pc, #592]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 030c 	and.w	r3, r3, #12
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d019      	beq.n	8001a88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a54:	4b91      	ldr	r3, [pc, #580]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d106      	bne.n	8001a6e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a60:	4b8e      	ldr	r3, [pc, #568]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a6c:	d00c      	beq.n	8001a88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a6e:	4b8b      	ldr	r3, [pc, #556]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a76:	2b0c      	cmp	r3, #12
 8001a78:	d112      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a7a:	4b88      	ldr	r3, [pc, #544]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a86:	d10b      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a88:	4b84      	ldr	r3, [pc, #528]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d05b      	beq.n	8001b4c <HAL_RCC_OscConfig+0x124>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d157      	bne.n	8001b4c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e25a      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa8:	d106      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x90>
 8001aaa:	4b7c      	ldr	r3, [pc, #496]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a7b      	ldr	r2, [pc, #492]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e01d      	b.n	8001af4 <HAL_RCC_OscConfig+0xcc>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0xb4>
 8001ac2:	4b76      	ldr	r3, [pc, #472]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a75      	ldr	r2, [pc, #468]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b73      	ldr	r3, [pc, #460]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a72      	ldr	r2, [pc, #456]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e00b      	b.n	8001af4 <HAL_RCC_OscConfig+0xcc>
 8001adc:	4b6f      	ldr	r3, [pc, #444]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a6e      	ldr	r2, [pc, #440]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	4b6c      	ldr	r3, [pc, #432]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a6b      	ldr	r2, [pc, #428]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d013      	beq.n	8001b24 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afc:	f7ff f914 	bl	8000d28 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b04:	f7ff f910 	bl	8000d28 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b64      	cmp	r3, #100	; 0x64
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e21f      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b16:	4b61      	ldr	r3, [pc, #388]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0xdc>
 8001b22:	e014      	b.n	8001b4e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff f900 	bl	8000d28 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b2c:	f7ff f8fc 	bl	8000d28 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	; 0x64
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e20b      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3e:	4b57      	ldr	r3, [pc, #348]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x104>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d06f      	beq.n	8001c3a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b5a:	4b50      	ldr	r3, [pc, #320]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d017      	beq.n	8001b96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b66:	4b4d      	ldr	r3, [pc, #308]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d105      	bne.n	8001b7e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b72:	4b4a      	ldr	r3, [pc, #296]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00b      	beq.n	8001b96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b7e:	4b47      	ldr	r3, [pc, #284]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b86:	2b0c      	cmp	r3, #12
 8001b88:	d11c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b8a:	4b44      	ldr	r3, [pc, #272]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d116      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b96:	4b41      	ldr	r3, [pc, #260]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d005      	beq.n	8001bae <HAL_RCC_OscConfig+0x186>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d001      	beq.n	8001bae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e1d3      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bae:	4b3b      	ldr	r3, [pc, #236]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4937      	ldr	r1, [pc, #220]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc2:	e03a      	b.n	8001c3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d020      	beq.n	8001c0e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bcc:	4b34      	ldr	r3, [pc, #208]	; (8001ca0 <HAL_RCC_OscConfig+0x278>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd2:	f7ff f8a9 	bl	8000d28 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bda:	f7ff f8a5 	bl	8000d28 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e1b4      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bec:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf8:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4925      	ldr	r1, [pc, #148]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	600b      	str	r3, [r1, #0]
 8001c0c:	e015      	b.n	8001c3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c0e:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <HAL_RCC_OscConfig+0x278>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff f888 	bl	8000d28 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c1c:	f7ff f884 	bl	8000d28 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e193      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d036      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d016      	beq.n	8001c7c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <HAL_RCC_OscConfig+0x27c>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c54:	f7ff f868 	bl	8000d28 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c5c:	f7ff f864 	bl	8000d28 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e173      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCC_OscConfig+0x234>
 8001c7a:	e01b      	b.n	8001cb4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <HAL_RCC_OscConfig+0x27c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c82:	f7ff f851 	bl	8000d28 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c88:	e00e      	b.n	8001ca8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c8a:	f7ff f84d 	bl	8000d28 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d907      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e15c      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	42470000 	.word	0x42470000
 8001ca4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca8:	4b8a      	ldr	r3, [pc, #552]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1ea      	bne.n	8001c8a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 8097 	beq.w	8001df0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc6:	4b83      	ldr	r3, [pc, #524]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10f      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	4b7f      	ldr	r3, [pc, #508]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	4a7e      	ldr	r2, [pc, #504]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce2:	4b7c      	ldr	r3, [pc, #496]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf2:	4b79      	ldr	r3, [pc, #484]	; (8001ed8 <HAL_RCC_OscConfig+0x4b0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d118      	bne.n	8001d30 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cfe:	4b76      	ldr	r3, [pc, #472]	; (8001ed8 <HAL_RCC_OscConfig+0x4b0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a75      	ldr	r2, [pc, #468]	; (8001ed8 <HAL_RCC_OscConfig+0x4b0>)
 8001d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d0a:	f7ff f80d 	bl	8000d28 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d12:	f7ff f809 	bl	8000d28 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e118      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d24:	4b6c      	ldr	r3, [pc, #432]	; (8001ed8 <HAL_RCC_OscConfig+0x4b0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0f0      	beq.n	8001d12 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d106      	bne.n	8001d46 <HAL_RCC_OscConfig+0x31e>
 8001d38:	4b66      	ldr	r3, [pc, #408]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3c:	4a65      	ldr	r2, [pc, #404]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	6713      	str	r3, [r2, #112]	; 0x70
 8001d44:	e01c      	b.n	8001d80 <HAL_RCC_OscConfig+0x358>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b05      	cmp	r3, #5
 8001d4c:	d10c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x340>
 8001d4e:	4b61      	ldr	r3, [pc, #388]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d52:	4a60      	ldr	r2, [pc, #384]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d54:	f043 0304 	orr.w	r3, r3, #4
 8001d58:	6713      	str	r3, [r2, #112]	; 0x70
 8001d5a:	4b5e      	ldr	r3, [pc, #376]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5e:	4a5d      	ldr	r2, [pc, #372]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6713      	str	r3, [r2, #112]	; 0x70
 8001d66:	e00b      	b.n	8001d80 <HAL_RCC_OscConfig+0x358>
 8001d68:	4b5a      	ldr	r3, [pc, #360]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6c:	4a59      	ldr	r2, [pc, #356]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d6e:	f023 0301 	bic.w	r3, r3, #1
 8001d72:	6713      	str	r3, [r2, #112]	; 0x70
 8001d74:	4b57      	ldr	r3, [pc, #348]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d78:	4a56      	ldr	r2, [pc, #344]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d7a:	f023 0304 	bic.w	r3, r3, #4
 8001d7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d015      	beq.n	8001db4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d88:	f7fe ffce 	bl	8000d28 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8e:	e00a      	b.n	8001da6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d90:	f7fe ffca 	bl	8000d28 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e0d7      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da6:	4b4b      	ldr	r3, [pc, #300]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0ee      	beq.n	8001d90 <HAL_RCC_OscConfig+0x368>
 8001db2:	e014      	b.n	8001dde <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db4:	f7fe ffb8 	bl	8000d28 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dba:	e00a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dbc:	f7fe ffb4 	bl	8000d28 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e0c1      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd2:	4b40      	ldr	r3, [pc, #256]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1ee      	bne.n	8001dbc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dde:	7dfb      	ldrb	r3, [r7, #23]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d105      	bne.n	8001df0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de4:	4b3b      	ldr	r3, [pc, #236]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	4a3a      	ldr	r2, [pc, #232]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001dea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80ad 	beq.w	8001f54 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dfa:	4b36      	ldr	r3, [pc, #216]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d060      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d145      	bne.n	8001e9a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0e:	4b33      	ldr	r3, [pc, #204]	; (8001edc <HAL_RCC_OscConfig+0x4b4>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7fe ff88 	bl	8000d28 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1c:	f7fe ff84 	bl	8000d28 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e093      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2e:	4b29      	ldr	r3, [pc, #164]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69da      	ldr	r2, [r3, #28]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	019b      	lsls	r3, r3, #6
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e50:	085b      	lsrs	r3, r3, #1
 8001e52:	3b01      	subs	r3, #1
 8001e54:	041b      	lsls	r3, r3, #16
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	061b      	lsls	r3, r3, #24
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	071b      	lsls	r3, r3, #28
 8001e66:	491b      	ldr	r1, [pc, #108]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <HAL_RCC_OscConfig+0x4b4>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e72:	f7fe ff59 	bl	8000d28 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e7a:	f7fe ff55 	bl	8000d28 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e064      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8c:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0f0      	beq.n	8001e7a <HAL_RCC_OscConfig+0x452>
 8001e98:	e05c      	b.n	8001f54 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <HAL_RCC_OscConfig+0x4b4>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea0:	f7fe ff42 	bl	8000d28 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea8:	f7fe ff3e 	bl	8000d28 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e04d      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x480>
 8001ec6:	e045      	b.n	8001f54 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d107      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e040      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40007000 	.word	0x40007000
 8001edc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ee0:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <HAL_RCC_OscConfig+0x538>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d030      	beq.n	8001f50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d129      	bne.n	8001f50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d122      	bne.n	8001f50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f10:	4013      	ands	r3, r2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d119      	bne.n	8001f50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f26:	085b      	lsrs	r3, r3, #1
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d10f      	bne.n	8001f50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d107      	bne.n	8001f50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d001      	beq.n	8001f54 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e000      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800

08001f64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e041      	b.n	8001ffa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d106      	bne.n	8001f90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f839 	bl	8002002 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2202      	movs	r2, #2
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	f000 f9c0 	bl	8002328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b01      	cmp	r3, #1
 800202a:	d001      	beq.n	8002030 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e04e      	b.n	80020ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0201 	orr.w	r2, r2, #1
 8002046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a23      	ldr	r2, [pc, #140]	; (80020dc <HAL_TIM_Base_Start_IT+0xc4>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d022      	beq.n	8002098 <HAL_TIM_Base_Start_IT+0x80>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205a:	d01d      	beq.n	8002098 <HAL_TIM_Base_Start_IT+0x80>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a1f      	ldr	r2, [pc, #124]	; (80020e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d018      	beq.n	8002098 <HAL_TIM_Base_Start_IT+0x80>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a1e      	ldr	r2, [pc, #120]	; (80020e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d013      	beq.n	8002098 <HAL_TIM_Base_Start_IT+0x80>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a1c      	ldr	r2, [pc, #112]	; (80020e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d00e      	beq.n	8002098 <HAL_TIM_Base_Start_IT+0x80>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a1b      	ldr	r2, [pc, #108]	; (80020ec <HAL_TIM_Base_Start_IT+0xd4>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d009      	beq.n	8002098 <HAL_TIM_Base_Start_IT+0x80>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a19      	ldr	r2, [pc, #100]	; (80020f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d004      	beq.n	8002098 <HAL_TIM_Base_Start_IT+0x80>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a18      	ldr	r2, [pc, #96]	; (80020f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d111      	bne.n	80020bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2b06      	cmp	r3, #6
 80020a8:	d010      	beq.n	80020cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f042 0201 	orr.w	r2, r2, #1
 80020b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ba:	e007      	b.n	80020cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0201 	orr.w	r2, r2, #1
 80020ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40010000 	.word	0x40010000
 80020e0:	40000400 	.word	0x40000400
 80020e4:	40000800 	.word	0x40000800
 80020e8:	40000c00 	.word	0x40000c00
 80020ec:	40010400 	.word	0x40010400
 80020f0:	40014000 	.word	0x40014000
 80020f4:	40001800 	.word	0x40001800

080020f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d020      	beq.n	800215c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d01b      	beq.n	800215c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f06f 0202 	mvn.w	r2, #2
 800212c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f8d2 	bl	80022ec <HAL_TIM_IC_CaptureCallback>
 8002148:	e005      	b.n	8002156 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f8c4 	bl	80022d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f8d5 	bl	8002300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b00      	cmp	r3, #0
 8002164:	d020      	beq.n	80021a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	d01b      	beq.n	80021a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f06f 0204 	mvn.w	r2, #4
 8002178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2202      	movs	r2, #2
 800217e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f8ac 	bl	80022ec <HAL_TIM_IC_CaptureCallback>
 8002194:	e005      	b.n	80021a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f89e 	bl	80022d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f8af 	bl	8002300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d020      	beq.n	80021f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d01b      	beq.n	80021f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f06f 0208 	mvn.w	r2, #8
 80021c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2204      	movs	r2, #4
 80021ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f886 	bl	80022ec <HAL_TIM_IC_CaptureCallback>
 80021e0:	e005      	b.n	80021ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f878 	bl	80022d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f889 	bl	8002300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d020      	beq.n	8002240 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f003 0310 	and.w	r3, r3, #16
 8002204:	2b00      	cmp	r3, #0
 8002206:	d01b      	beq.n	8002240 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0210 	mvn.w	r2, #16
 8002210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2208      	movs	r2, #8
 8002216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f860 	bl	80022ec <HAL_TIM_IC_CaptureCallback>
 800222c:	e005      	b.n	800223a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f852 	bl	80022d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f863 	bl	8002300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00c      	beq.n	8002264 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d007      	beq.n	8002264 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0201 	mvn.w	r2, #1
 800225c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7fe fbc8 	bl	80009f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00c      	beq.n	8002288 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002274:	2b00      	cmp	r3, #0
 8002276:	d007      	beq.n	8002288 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f906 	bl	8002494 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00c      	beq.n	80022ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002298:	2b00      	cmp	r3, #0
 800229a:	d007      	beq.n	80022ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f834 	bl	8002314 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	f003 0320 	and.w	r3, r3, #32
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00c      	beq.n	80022d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f003 0320 	and.w	r3, r3, #32
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d007      	beq.n	80022d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0220 	mvn.w	r2, #32
 80022c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f8d8 	bl	8002480 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022d0:	bf00      	nop
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a46      	ldr	r2, [pc, #280]	; (8002454 <TIM_Base_SetConfig+0x12c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d013      	beq.n	8002368 <TIM_Base_SetConfig+0x40>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002346:	d00f      	beq.n	8002368 <TIM_Base_SetConfig+0x40>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a43      	ldr	r2, [pc, #268]	; (8002458 <TIM_Base_SetConfig+0x130>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d00b      	beq.n	8002368 <TIM_Base_SetConfig+0x40>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a42      	ldr	r2, [pc, #264]	; (800245c <TIM_Base_SetConfig+0x134>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d007      	beq.n	8002368 <TIM_Base_SetConfig+0x40>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a41      	ldr	r2, [pc, #260]	; (8002460 <TIM_Base_SetConfig+0x138>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d003      	beq.n	8002368 <TIM_Base_SetConfig+0x40>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a40      	ldr	r2, [pc, #256]	; (8002464 <TIM_Base_SetConfig+0x13c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d108      	bne.n	800237a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800236e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a35      	ldr	r2, [pc, #212]	; (8002454 <TIM_Base_SetConfig+0x12c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d02b      	beq.n	80023da <TIM_Base_SetConfig+0xb2>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002388:	d027      	beq.n	80023da <TIM_Base_SetConfig+0xb2>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a32      	ldr	r2, [pc, #200]	; (8002458 <TIM_Base_SetConfig+0x130>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d023      	beq.n	80023da <TIM_Base_SetConfig+0xb2>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a31      	ldr	r2, [pc, #196]	; (800245c <TIM_Base_SetConfig+0x134>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d01f      	beq.n	80023da <TIM_Base_SetConfig+0xb2>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a30      	ldr	r2, [pc, #192]	; (8002460 <TIM_Base_SetConfig+0x138>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d01b      	beq.n	80023da <TIM_Base_SetConfig+0xb2>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a2f      	ldr	r2, [pc, #188]	; (8002464 <TIM_Base_SetConfig+0x13c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d017      	beq.n	80023da <TIM_Base_SetConfig+0xb2>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a2e      	ldr	r2, [pc, #184]	; (8002468 <TIM_Base_SetConfig+0x140>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d013      	beq.n	80023da <TIM_Base_SetConfig+0xb2>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a2d      	ldr	r2, [pc, #180]	; (800246c <TIM_Base_SetConfig+0x144>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00f      	beq.n	80023da <TIM_Base_SetConfig+0xb2>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a2c      	ldr	r2, [pc, #176]	; (8002470 <TIM_Base_SetConfig+0x148>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00b      	beq.n	80023da <TIM_Base_SetConfig+0xb2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a2b      	ldr	r2, [pc, #172]	; (8002474 <TIM_Base_SetConfig+0x14c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d007      	beq.n	80023da <TIM_Base_SetConfig+0xb2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a2a      	ldr	r2, [pc, #168]	; (8002478 <TIM_Base_SetConfig+0x150>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d003      	beq.n	80023da <TIM_Base_SetConfig+0xb2>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a29      	ldr	r2, [pc, #164]	; (800247c <TIM_Base_SetConfig+0x154>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d108      	bne.n	80023ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a10      	ldr	r2, [pc, #64]	; (8002454 <TIM_Base_SetConfig+0x12c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d003      	beq.n	8002420 <TIM_Base_SetConfig+0xf8>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a12      	ldr	r2, [pc, #72]	; (8002464 <TIM_Base_SetConfig+0x13c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d103      	bne.n	8002428 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b01      	cmp	r3, #1
 8002438:	d105      	bne.n	8002446 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	f023 0201 	bic.w	r2, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	611a      	str	r2, [r3, #16]
  }
}
 8002446:	bf00      	nop
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40010000 	.word	0x40010000
 8002458:	40000400 	.word	0x40000400
 800245c:	40000800 	.word	0x40000800
 8002460:	40000c00 	.word	0x40000c00
 8002464:	40010400 	.word	0x40010400
 8002468:	40014000 	.word	0x40014000
 800246c:	40014400 	.word	0x40014400
 8002470:	40014800 	.word	0x40014800
 8002474:	40001800 	.word	0x40001800
 8002478:	40001c00 	.word	0x40001c00
 800247c:	40002000 	.word	0x40002000

08002480 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e042      	b.n	8002540 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d106      	bne.n	80024d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7fe fad4 	bl	8000a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2224      	movs	r2, #36	; 0x24
 80024d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f82b 	bl	8002548 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	691a      	ldr	r2, [r3, #16]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002500:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	695a      	ldr	r2, [r3, #20]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002510:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002520:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2220      	movs	r2, #32
 800252c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2220      	movs	r2, #32
 8002534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800254c:	b0c0      	sub	sp, #256	; 0x100
 800254e:	af00      	add	r7, sp, #0
 8002550:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002564:	68d9      	ldr	r1, [r3, #12]
 8002566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	ea40 0301 	orr.w	r3, r0, r1
 8002570:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	431a      	orrs	r2, r3
 8002580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	431a      	orrs	r2, r3
 8002588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80025a0:	f021 010c 	bic.w	r1, r1, #12
 80025a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80025ae:	430b      	orrs	r3, r1
 80025b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80025be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c2:	6999      	ldr	r1, [r3, #24]
 80025c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	ea40 0301 	orr.w	r3, r0, r1
 80025ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	4b8f      	ldr	r3, [pc, #572]	; (8002814 <UART_SetConfig+0x2cc>)
 80025d8:	429a      	cmp	r2, r3
 80025da:	d005      	beq.n	80025e8 <UART_SetConfig+0xa0>
 80025dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	4b8d      	ldr	r3, [pc, #564]	; (8002818 <UART_SetConfig+0x2d0>)
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d104      	bne.n	80025f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025e8:	f7fe ffa8 	bl	800153c <HAL_RCC_GetPCLK2Freq>
 80025ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80025f0:	e003      	b.n	80025fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025f2:	f7fe ff8f 	bl	8001514 <HAL_RCC_GetPCLK1Freq>
 80025f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002604:	f040 810c 	bne.w	8002820 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800260c:	2200      	movs	r2, #0
 800260e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002612:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002616:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800261a:	4622      	mov	r2, r4
 800261c:	462b      	mov	r3, r5
 800261e:	1891      	adds	r1, r2, r2
 8002620:	65b9      	str	r1, [r7, #88]	; 0x58
 8002622:	415b      	adcs	r3, r3
 8002624:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002626:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800262a:	4621      	mov	r1, r4
 800262c:	eb12 0801 	adds.w	r8, r2, r1
 8002630:	4629      	mov	r1, r5
 8002632:	eb43 0901 	adc.w	r9, r3, r1
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	f04f 0300 	mov.w	r3, #0
 800263e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002642:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002646:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800264a:	4690      	mov	r8, r2
 800264c:	4699      	mov	r9, r3
 800264e:	4623      	mov	r3, r4
 8002650:	eb18 0303 	adds.w	r3, r8, r3
 8002654:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002658:	462b      	mov	r3, r5
 800265a:	eb49 0303 	adc.w	r3, r9, r3
 800265e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800266e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002672:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002676:	460b      	mov	r3, r1
 8002678:	18db      	adds	r3, r3, r3
 800267a:	653b      	str	r3, [r7, #80]	; 0x50
 800267c:	4613      	mov	r3, r2
 800267e:	eb42 0303 	adc.w	r3, r2, r3
 8002682:	657b      	str	r3, [r7, #84]	; 0x54
 8002684:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002688:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800268c:	f7fd fdc0 	bl	8000210 <__aeabi_uldivmod>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4b61      	ldr	r3, [pc, #388]	; (800281c <UART_SetConfig+0x2d4>)
 8002696:	fba3 2302 	umull	r2, r3, r3, r2
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	011c      	lsls	r4, r3, #4
 800269e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026a2:	2200      	movs	r2, #0
 80026a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80026ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80026b0:	4642      	mov	r2, r8
 80026b2:	464b      	mov	r3, r9
 80026b4:	1891      	adds	r1, r2, r2
 80026b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80026b8:	415b      	adcs	r3, r3
 80026ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80026c0:	4641      	mov	r1, r8
 80026c2:	eb12 0a01 	adds.w	sl, r2, r1
 80026c6:	4649      	mov	r1, r9
 80026c8:	eb43 0b01 	adc.w	fp, r3, r1
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80026d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80026dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026e0:	4692      	mov	sl, r2
 80026e2:	469b      	mov	fp, r3
 80026e4:	4643      	mov	r3, r8
 80026e6:	eb1a 0303 	adds.w	r3, sl, r3
 80026ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026ee:	464b      	mov	r3, r9
 80026f0:	eb4b 0303 	adc.w	r3, fp, r3
 80026f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80026f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002704:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002708:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800270c:	460b      	mov	r3, r1
 800270e:	18db      	adds	r3, r3, r3
 8002710:	643b      	str	r3, [r7, #64]	; 0x40
 8002712:	4613      	mov	r3, r2
 8002714:	eb42 0303 	adc.w	r3, r2, r3
 8002718:	647b      	str	r3, [r7, #68]	; 0x44
 800271a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800271e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002722:	f7fd fd75 	bl	8000210 <__aeabi_uldivmod>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4611      	mov	r1, r2
 800272c:	4b3b      	ldr	r3, [pc, #236]	; (800281c <UART_SetConfig+0x2d4>)
 800272e:	fba3 2301 	umull	r2, r3, r3, r1
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	2264      	movs	r2, #100	; 0x64
 8002736:	fb02 f303 	mul.w	r3, r2, r3
 800273a:	1acb      	subs	r3, r1, r3
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002742:	4b36      	ldr	r3, [pc, #216]	; (800281c <UART_SetConfig+0x2d4>)
 8002744:	fba3 2302 	umull	r2, r3, r3, r2
 8002748:	095b      	lsrs	r3, r3, #5
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002750:	441c      	add	r4, r3
 8002752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002756:	2200      	movs	r2, #0
 8002758:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800275c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002760:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002764:	4642      	mov	r2, r8
 8002766:	464b      	mov	r3, r9
 8002768:	1891      	adds	r1, r2, r2
 800276a:	63b9      	str	r1, [r7, #56]	; 0x38
 800276c:	415b      	adcs	r3, r3
 800276e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002770:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002774:	4641      	mov	r1, r8
 8002776:	1851      	adds	r1, r2, r1
 8002778:	6339      	str	r1, [r7, #48]	; 0x30
 800277a:	4649      	mov	r1, r9
 800277c:	414b      	adcs	r3, r1
 800277e:	637b      	str	r3, [r7, #52]	; 0x34
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800278c:	4659      	mov	r1, fp
 800278e:	00cb      	lsls	r3, r1, #3
 8002790:	4651      	mov	r1, sl
 8002792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002796:	4651      	mov	r1, sl
 8002798:	00ca      	lsls	r2, r1, #3
 800279a:	4610      	mov	r0, r2
 800279c:	4619      	mov	r1, r3
 800279e:	4603      	mov	r3, r0
 80027a0:	4642      	mov	r2, r8
 80027a2:	189b      	adds	r3, r3, r2
 80027a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80027a8:	464b      	mov	r3, r9
 80027aa:	460a      	mov	r2, r1
 80027ac:	eb42 0303 	adc.w	r3, r2, r3
 80027b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80027c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80027c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80027c8:	460b      	mov	r3, r1
 80027ca:	18db      	adds	r3, r3, r3
 80027cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ce:	4613      	mov	r3, r2
 80027d0:	eb42 0303 	adc.w	r3, r2, r3
 80027d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80027de:	f7fd fd17 	bl	8000210 <__aeabi_uldivmod>
 80027e2:	4602      	mov	r2, r0
 80027e4:	460b      	mov	r3, r1
 80027e6:	4b0d      	ldr	r3, [pc, #52]	; (800281c <UART_SetConfig+0x2d4>)
 80027e8:	fba3 1302 	umull	r1, r3, r3, r2
 80027ec:	095b      	lsrs	r3, r3, #5
 80027ee:	2164      	movs	r1, #100	; 0x64
 80027f0:	fb01 f303 	mul.w	r3, r1, r3
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	3332      	adds	r3, #50	; 0x32
 80027fa:	4a08      	ldr	r2, [pc, #32]	; (800281c <UART_SetConfig+0x2d4>)
 80027fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002800:	095b      	lsrs	r3, r3, #5
 8002802:	f003 0207 	and.w	r2, r3, #7
 8002806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4422      	add	r2, r4
 800280e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002810:	e106      	b.n	8002a20 <UART_SetConfig+0x4d8>
 8002812:	bf00      	nop
 8002814:	40011000 	.word	0x40011000
 8002818:	40011400 	.word	0x40011400
 800281c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002820:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002824:	2200      	movs	r2, #0
 8002826:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800282a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800282e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002832:	4642      	mov	r2, r8
 8002834:	464b      	mov	r3, r9
 8002836:	1891      	adds	r1, r2, r2
 8002838:	6239      	str	r1, [r7, #32]
 800283a:	415b      	adcs	r3, r3
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
 800283e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002842:	4641      	mov	r1, r8
 8002844:	1854      	adds	r4, r2, r1
 8002846:	4649      	mov	r1, r9
 8002848:	eb43 0501 	adc.w	r5, r3, r1
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	00eb      	lsls	r3, r5, #3
 8002856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800285a:	00e2      	lsls	r2, r4, #3
 800285c:	4614      	mov	r4, r2
 800285e:	461d      	mov	r5, r3
 8002860:	4643      	mov	r3, r8
 8002862:	18e3      	adds	r3, r4, r3
 8002864:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002868:	464b      	mov	r3, r9
 800286a:	eb45 0303 	adc.w	r3, r5, r3
 800286e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800287e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800288e:	4629      	mov	r1, r5
 8002890:	008b      	lsls	r3, r1, #2
 8002892:	4621      	mov	r1, r4
 8002894:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002898:	4621      	mov	r1, r4
 800289a:	008a      	lsls	r2, r1, #2
 800289c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80028a0:	f7fd fcb6 	bl	8000210 <__aeabi_uldivmod>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4b60      	ldr	r3, [pc, #384]	; (8002a2c <UART_SetConfig+0x4e4>)
 80028aa:	fba3 2302 	umull	r2, r3, r3, r2
 80028ae:	095b      	lsrs	r3, r3, #5
 80028b0:	011c      	lsls	r4, r3, #4
 80028b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028b6:	2200      	movs	r2, #0
 80028b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80028bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80028c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80028c4:	4642      	mov	r2, r8
 80028c6:	464b      	mov	r3, r9
 80028c8:	1891      	adds	r1, r2, r2
 80028ca:	61b9      	str	r1, [r7, #24]
 80028cc:	415b      	adcs	r3, r3
 80028ce:	61fb      	str	r3, [r7, #28]
 80028d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028d4:	4641      	mov	r1, r8
 80028d6:	1851      	adds	r1, r2, r1
 80028d8:	6139      	str	r1, [r7, #16]
 80028da:	4649      	mov	r1, r9
 80028dc:	414b      	adcs	r3, r1
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028ec:	4659      	mov	r1, fp
 80028ee:	00cb      	lsls	r3, r1, #3
 80028f0:	4651      	mov	r1, sl
 80028f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028f6:	4651      	mov	r1, sl
 80028f8:	00ca      	lsls	r2, r1, #3
 80028fa:	4610      	mov	r0, r2
 80028fc:	4619      	mov	r1, r3
 80028fe:	4603      	mov	r3, r0
 8002900:	4642      	mov	r2, r8
 8002902:	189b      	adds	r3, r3, r2
 8002904:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002908:	464b      	mov	r3, r9
 800290a:	460a      	mov	r2, r1
 800290c:	eb42 0303 	adc.w	r3, r2, r3
 8002910:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	67bb      	str	r3, [r7, #120]	; 0x78
 800291e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800292c:	4649      	mov	r1, r9
 800292e:	008b      	lsls	r3, r1, #2
 8002930:	4641      	mov	r1, r8
 8002932:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002936:	4641      	mov	r1, r8
 8002938:	008a      	lsls	r2, r1, #2
 800293a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800293e:	f7fd fc67 	bl	8000210 <__aeabi_uldivmod>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4611      	mov	r1, r2
 8002948:	4b38      	ldr	r3, [pc, #224]	; (8002a2c <UART_SetConfig+0x4e4>)
 800294a:	fba3 2301 	umull	r2, r3, r3, r1
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	2264      	movs	r2, #100	; 0x64
 8002952:	fb02 f303 	mul.w	r3, r2, r3
 8002956:	1acb      	subs	r3, r1, r3
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	3332      	adds	r3, #50	; 0x32
 800295c:	4a33      	ldr	r2, [pc, #204]	; (8002a2c <UART_SetConfig+0x4e4>)
 800295e:	fba2 2303 	umull	r2, r3, r2, r3
 8002962:	095b      	lsrs	r3, r3, #5
 8002964:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002968:	441c      	add	r4, r3
 800296a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800296e:	2200      	movs	r2, #0
 8002970:	673b      	str	r3, [r7, #112]	; 0x70
 8002972:	677a      	str	r2, [r7, #116]	; 0x74
 8002974:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002978:	4642      	mov	r2, r8
 800297a:	464b      	mov	r3, r9
 800297c:	1891      	adds	r1, r2, r2
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	415b      	adcs	r3, r3
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002988:	4641      	mov	r1, r8
 800298a:	1851      	adds	r1, r2, r1
 800298c:	6039      	str	r1, [r7, #0]
 800298e:	4649      	mov	r1, r9
 8002990:	414b      	adcs	r3, r1
 8002992:	607b      	str	r3, [r7, #4]
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029a0:	4659      	mov	r1, fp
 80029a2:	00cb      	lsls	r3, r1, #3
 80029a4:	4651      	mov	r1, sl
 80029a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029aa:	4651      	mov	r1, sl
 80029ac:	00ca      	lsls	r2, r1, #3
 80029ae:	4610      	mov	r0, r2
 80029b0:	4619      	mov	r1, r3
 80029b2:	4603      	mov	r3, r0
 80029b4:	4642      	mov	r2, r8
 80029b6:	189b      	adds	r3, r3, r2
 80029b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80029ba:	464b      	mov	r3, r9
 80029bc:	460a      	mov	r2, r1
 80029be:	eb42 0303 	adc.w	r3, r2, r3
 80029c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	663b      	str	r3, [r7, #96]	; 0x60
 80029ce:	667a      	str	r2, [r7, #100]	; 0x64
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80029dc:	4649      	mov	r1, r9
 80029de:	008b      	lsls	r3, r1, #2
 80029e0:	4641      	mov	r1, r8
 80029e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029e6:	4641      	mov	r1, r8
 80029e8:	008a      	lsls	r2, r1, #2
 80029ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80029ee:	f7fd fc0f 	bl	8000210 <__aeabi_uldivmod>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <UART_SetConfig+0x4e4>)
 80029f8:	fba3 1302 	umull	r1, r3, r3, r2
 80029fc:	095b      	lsrs	r3, r3, #5
 80029fe:	2164      	movs	r1, #100	; 0x64
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	3332      	adds	r3, #50	; 0x32
 8002a0a:	4a08      	ldr	r2, [pc, #32]	; (8002a2c <UART_SetConfig+0x4e4>)
 8002a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a10:	095b      	lsrs	r3, r3, #5
 8002a12:	f003 020f 	and.w	r2, r3, #15
 8002a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4422      	add	r2, r4
 8002a1e:	609a      	str	r2, [r3, #8]
}
 8002a20:	bf00      	nop
 8002a22:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002a26:	46bd      	mov	sp, r7
 8002a28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a2c:	51eb851f 	.word	0x51eb851f

08002a30 <__NVIC_SetPriority>:
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	6039      	str	r1, [r7, #0]
 8002a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	db0a      	blt.n	8002a5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	490c      	ldr	r1, [pc, #48]	; (8002a7c <__NVIC_SetPriority+0x4c>)
 8002a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4e:	0112      	lsls	r2, r2, #4
 8002a50:	b2d2      	uxtb	r2, r2
 8002a52:	440b      	add	r3, r1
 8002a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a58:	e00a      	b.n	8002a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	4908      	ldr	r1, [pc, #32]	; (8002a80 <__NVIC_SetPriority+0x50>)
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	3b04      	subs	r3, #4
 8002a68:	0112      	lsls	r2, r2, #4
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	761a      	strb	r2, [r3, #24]
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	e000e100 	.word	0xe000e100
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002a88:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <SysTick_Handler+0x1c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002a8c:	f002 f968 	bl	8004d60 <xTaskGetSchedulerState>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d001      	beq.n	8002a9a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002a96:	f003 f84f 	bl	8005b38 <xPortSysTickHandler>
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	e000e010 	.word	0xe000e010

08002aa4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	f06f 0004 	mvn.w	r0, #4
 8002aae:	f7ff ffbf 	bl	8002a30 <__NVIC_SetPriority>
#endif
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002abe:	f3ef 8305 	mrs	r3, IPSR
 8002ac2:	603b      	str	r3, [r7, #0]
  return(result);
 8002ac4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002aca:	f06f 0305 	mvn.w	r3, #5
 8002ace:	607b      	str	r3, [r7, #4]
 8002ad0:	e00c      	b.n	8002aec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <osKernelInitialize+0x44>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d105      	bne.n	8002ae6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002ada:	4b08      	ldr	r3, [pc, #32]	; (8002afc <osKernelInitialize+0x44>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	607b      	str	r3, [r7, #4]
 8002ae4:	e002      	b.n	8002aec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002aec:	687b      	ldr	r3, [r7, #4]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	20000138 	.word	0x20000138

08002b00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b06:	f3ef 8305 	mrs	r3, IPSR
 8002b0a:	603b      	str	r3, [r7, #0]
  return(result);
 8002b0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002b12:	f06f 0305 	mvn.w	r3, #5
 8002b16:	607b      	str	r3, [r7, #4]
 8002b18:	e010      	b.n	8002b3c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002b1a:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <osKernelStart+0x48>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d109      	bne.n	8002b36 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002b22:	f7ff ffbf 	bl	8002aa4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002b26:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <osKernelStart+0x48>)
 8002b28:	2202      	movs	r2, #2
 8002b2a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002b2c:	f001 fcbc 	bl	80044a8 <vTaskStartScheduler>
      stat = osOK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	607b      	str	r3, [r7, #4]
 8002b34:	e002      	b.n	8002b3c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002b36:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002b3c:	687b      	ldr	r3, [r7, #4]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20000138 	.word	0x20000138

08002b4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08e      	sub	sp, #56	; 0x38
 8002b50:	af04      	add	r7, sp, #16
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b5c:	f3ef 8305 	mrs	r3, IPSR
 8002b60:	617b      	str	r3, [r7, #20]
  return(result);
 8002b62:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d17e      	bne.n	8002c66 <osThreadNew+0x11a>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d07b      	beq.n	8002c66 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002b72:	2318      	movs	r3, #24
 8002b74:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d045      	beq.n	8002c12 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <osThreadNew+0x48>
        name = attr->name;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d002      	beq.n	8002ba2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <osThreadNew+0x6e>
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	2b38      	cmp	r3, #56	; 0x38
 8002bac:	d805      	bhi.n	8002bba <osThreadNew+0x6e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <osThreadNew+0x72>
        return (NULL);
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e054      	b.n	8002c68 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	695b      	ldr	r3, [r3, #20]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	089b      	lsrs	r3, r3, #2
 8002bcc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00e      	beq.n	8002bf4 <osThreadNew+0xa8>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	2ba7      	cmp	r3, #167	; 0xa7
 8002bdc:	d90a      	bls.n	8002bf4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d006      	beq.n	8002bf4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <osThreadNew+0xa8>
        mem = 1;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	61bb      	str	r3, [r7, #24]
 8002bf2:	e010      	b.n	8002c16 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10c      	bne.n	8002c16 <osThreadNew+0xca>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d108      	bne.n	8002c16 <osThreadNew+0xca>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d104      	bne.n	8002c16 <osThreadNew+0xca>
          mem = 0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61bb      	str	r3, [r7, #24]
 8002c10:	e001      	b.n	8002c16 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d110      	bne.n	8002c3e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c24:	9202      	str	r2, [sp, #8]
 8002c26:	9301      	str	r3, [sp, #4]
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	6a3a      	ldr	r2, [r7, #32]
 8002c30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f001 fa4c 	bl	80040d0 <xTaskCreateStatic>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	e013      	b.n	8002c66 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d110      	bne.n	8002c66 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	f107 0310 	add.w	r3, r7, #16
 8002c4c:	9301      	str	r3, [sp, #4]
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f001 fa97 	bl	800418a <xTaskCreate>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d001      	beq.n	8002c66 <osThreadNew+0x11a>
            hTask = NULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002c66:	693b      	ldr	r3, [r7, #16]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3728      	adds	r7, #40	; 0x28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c78:	f3ef 8305 	mrs	r3, IPSR
 8002c7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c7e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <osDelay+0x1c>
    stat = osErrorISR;
 8002c84:	f06f 0305 	mvn.w	r3, #5
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	e007      	b.n	8002c9c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f001 fbd2 	bl	8004440 <vTaskDelay>
    }
  }

  return (stat);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b08a      	sub	sp, #40	; 0x28
 8002caa:	af02      	add	r7, sp, #8
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cb6:	f3ef 8305 	mrs	r3, IPSR
 8002cba:	613b      	str	r3, [r7, #16]
  return(result);
 8002cbc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d175      	bne.n	8002dae <osSemaphoreNew+0x108>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d072      	beq.n	8002dae <osSemaphoreNew+0x108>
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d86e      	bhi.n	8002dae <osSemaphoreNew+0x108>
    mem = -1;
 8002cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d015      	beq.n	8002d08 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d006      	beq.n	8002cf2 <osSemaphoreNew+0x4c>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	2b4f      	cmp	r3, #79	; 0x4f
 8002cea:	d902      	bls.n	8002cf2 <osSemaphoreNew+0x4c>
        mem = 1;
 8002cec:	2301      	movs	r3, #1
 8002cee:	61bb      	str	r3, [r7, #24]
 8002cf0:	e00c      	b.n	8002d0c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d108      	bne.n	8002d0c <osSemaphoreNew+0x66>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d104      	bne.n	8002d0c <osSemaphoreNew+0x66>
          mem = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61bb      	str	r3, [r7, #24]
 8002d06:	e001      	b.n	8002d0c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d12:	d04c      	beq.n	8002dae <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d128      	bne.n	8002d6c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d10a      	bne.n	8002d36 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2203      	movs	r2, #3
 8002d26:	9200      	str	r2, [sp, #0]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	f000 fa29 	bl	8003184 <xQueueGenericCreateStatic>
 8002d32:	61f8      	str	r0, [r7, #28]
 8002d34:	e005      	b.n	8002d42 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8002d36:	2203      	movs	r2, #3
 8002d38:	2100      	movs	r1, #0
 8002d3a:	2001      	movs	r0, #1
 8002d3c:	f000 fa9a 	bl	8003274 <xQueueGenericCreate>
 8002d40:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d022      	beq.n	8002d8e <osSemaphoreNew+0xe8>
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d01f      	beq.n	8002d8e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002d4e:	2300      	movs	r3, #0
 8002d50:	2200      	movs	r2, #0
 8002d52:	2100      	movs	r1, #0
 8002d54:	69f8      	ldr	r0, [r7, #28]
 8002d56:	f000 fb55 	bl	8003404 <xQueueGenericSend>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d016      	beq.n	8002d8e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8002d60:	69f8      	ldr	r0, [r7, #28]
 8002d62:	f000 ffe1 	bl	8003d28 <vQueueDelete>
            hSemaphore = NULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	61fb      	str	r3, [r7, #28]
 8002d6a:	e010      	b.n	8002d8e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d108      	bne.n	8002d84 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	461a      	mov	r2, r3
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fad7 	bl	800332e <xQueueCreateCountingSemaphoreStatic>
 8002d80:	61f8      	str	r0, [r7, #28]
 8002d82:	e004      	b.n	8002d8e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002d84:	68b9      	ldr	r1, [r7, #8]
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 fb08 	bl	800339c <xQueueCreateCountingSemaphore>
 8002d8c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00c      	beq.n	8002dae <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <osSemaphoreNew+0xfc>
          name = attr->name;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	e001      	b.n	8002da6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002da6:	6979      	ldr	r1, [r7, #20]
 8002da8:	69f8      	ldr	r0, [r7, #28]
 8002daa:	f001 f909 	bl	8003fc0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8002dae:	69fb      	ldr	r3, [r7, #28]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3720      	adds	r7, #32
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d103      	bne.n	8002dd8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8002dd0:	f06f 0303 	mvn.w	r3, #3
 8002dd4:	617b      	str	r3, [r7, #20]
 8002dd6:	e039      	b.n	8002e4c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dd8:	f3ef 8305 	mrs	r3, IPSR
 8002ddc:	60fb      	str	r3, [r7, #12]
  return(result);
 8002dde:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d022      	beq.n	8002e2a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8002dea:	f06f 0303 	mvn.w	r3, #3
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	e02c      	b.n	8002e4c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8002df2:	2300      	movs	r3, #0
 8002df4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8002df6:	f107 0308 	add.w	r3, r7, #8
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	6938      	ldr	r0, [r7, #16]
 8002e00:	f000 ff12 	bl	8003c28 <xQueueReceiveFromISR>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d003      	beq.n	8002e12 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8002e0a:	f06f 0302 	mvn.w	r3, #2
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	e01c      	b.n	8002e4c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d019      	beq.n	8002e4c <osSemaphoreAcquire+0x94>
 8002e18:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <osSemaphoreAcquire+0xa0>)
 8002e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	f3bf 8f4f 	dsb	sy
 8002e24:	f3bf 8f6f 	isb	sy
 8002e28:	e010      	b.n	8002e4c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8002e2a:	6839      	ldr	r1, [r7, #0]
 8002e2c:	6938      	ldr	r0, [r7, #16]
 8002e2e:	f000 fdef 	bl	8003a10 <xQueueSemaphoreTake>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d009      	beq.n	8002e4c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8002e3e:	f06f 0301 	mvn.w	r3, #1
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	e002      	b.n	8002e4c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8002e46:	f06f 0302 	mvn.w	r3, #2
 8002e4a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002e4c:	697b      	ldr	r3, [r7, #20]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	e000ed04 	.word	0xe000ed04

08002e5c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d103      	bne.n	8002e7a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8002e72:	f06f 0303 	mvn.w	r3, #3
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	e02c      	b.n	8002ed4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e7a:	f3ef 8305 	mrs	r3, IPSR
 8002e7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e80:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d01a      	beq.n	8002ebc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002e8a:	f107 0308 	add.w	r3, r7, #8
 8002e8e:	4619      	mov	r1, r3
 8002e90:	6938      	ldr	r0, [r7, #16]
 8002e92:	f000 fc50 	bl	8003736 <xQueueGiveFromISR>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d003      	beq.n	8002ea4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8002e9c:	f06f 0302 	mvn.w	r3, #2
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	e017      	b.n	8002ed4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d014      	beq.n	8002ed4 <osSemaphoreRelease+0x78>
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <osSemaphoreRelease+0x84>)
 8002eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	f3bf 8f4f 	dsb	sy
 8002eb6:	f3bf 8f6f 	isb	sy
 8002eba:	e00b      	b.n	8002ed4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	6938      	ldr	r0, [r7, #16]
 8002ec4:	f000 fa9e 	bl	8003404 <xQueueGenericSend>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d002      	beq.n	8002ed4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8002ece:	f06f 0302 	mvn.w	r3, #2
 8002ed2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002ed4:	697b      	ldr	r3, [r7, #20]
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	e000ed04 	.word	0xe000ed04

08002ee4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4a07      	ldr	r2, [pc, #28]	; (8002f10 <vApplicationGetIdleTaskMemory+0x2c>)
 8002ef4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	4a06      	ldr	r2, [pc, #24]	; (8002f14 <vApplicationGetIdleTaskMemory+0x30>)
 8002efa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2280      	movs	r2, #128	; 0x80
 8002f00:	601a      	str	r2, [r3, #0]
}
 8002f02:	bf00      	nop
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	2000013c 	.word	0x2000013c
 8002f14:	200001e4 	.word	0x200001e4

08002f18 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4a07      	ldr	r2, [pc, #28]	; (8002f44 <vApplicationGetTimerTaskMemory+0x2c>)
 8002f28:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	4a06      	ldr	r2, [pc, #24]	; (8002f48 <vApplicationGetTimerTaskMemory+0x30>)
 8002f2e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f36:	601a      	str	r2, [r3, #0]
}
 8002f38:	bf00      	nop
 8002f3a:	3714      	adds	r7, #20
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	200003e4 	.word	0x200003e4
 8002f48:	2000048c 	.word	0x2000048c

08002f4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f103 0208 	add.w	r2, r3, #8
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f04f 32ff 	mov.w	r2, #4294967295
 8002f64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f103 0208 	add.w	r2, r3, #8
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f103 0208 	add.w	r2, r3, #8
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b085      	sub	sp, #20
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	1c5a      	adds	r2, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	601a      	str	r2, [r3, #0]
}
 8002fe2:	bf00      	nop
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b085      	sub	sp, #20
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003004:	d103      	bne.n	800300e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	e00c      	b.n	8003028 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3308      	adds	r3, #8
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	e002      	b.n	800301c <vListInsert+0x2e>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	429a      	cmp	r2, r3
 8003026:	d2f6      	bcs.n	8003016 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	601a      	str	r2, [r3, #0]
}
 8003054:	bf00      	nop
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6892      	ldr	r2, [r2, #8]
 8003076:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6852      	ldr	r2, [r2, #4]
 8003080:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	429a      	cmp	r2, r3
 800308a:	d103      	bne.n	8003094 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	1e5a      	subs	r2, r3, #1
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10a      	bne.n	80030de <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80030c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80030da:	bf00      	nop
 80030dc:	e7fe      	b.n	80030dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80030de:	f002 fc99 	bl	8005a14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ea:	68f9      	ldr	r1, [r7, #12]
 80030ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80030ee:	fb01 f303 	mul.w	r3, r1, r3
 80030f2:	441a      	add	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310e:	3b01      	subs	r3, #1
 8003110:	68f9      	ldr	r1, [r7, #12]
 8003112:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003114:	fb01 f303 	mul.w	r3, r1, r3
 8003118:	441a      	add	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	22ff      	movs	r2, #255	; 0xff
 8003122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	22ff      	movs	r2, #255	; 0xff
 800312a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d114      	bne.n	800315e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01a      	beq.n	8003172 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	3310      	adds	r3, #16
 8003140:	4618      	mov	r0, r3
 8003142:	f001 fc4b 	bl	80049dc <xTaskRemoveFromEventList>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d012      	beq.n	8003172 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800314c:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <xQueueGenericReset+0xcc>)
 800314e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	e009      	b.n	8003172 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	3310      	adds	r3, #16
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff fef2 	bl	8002f4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	3324      	adds	r3, #36	; 0x24
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff feed 	bl	8002f4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003172:	f002 fc7f 	bl	8005a74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003176:	2301      	movs	r3, #1
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	e000ed04 	.word	0xe000ed04

08003184 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08e      	sub	sp, #56	; 0x38
 8003188:	af02      	add	r7, sp, #8
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
 8003190:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10a      	bne.n	80031ae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80031aa:	bf00      	nop
 80031ac:	e7fe      	b.n	80031ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10a      	bne.n	80031ca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80031b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b8:	f383 8811 	msr	BASEPRI, r3
 80031bc:	f3bf 8f6f 	isb	sy
 80031c0:	f3bf 8f4f 	dsb	sy
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031c6:	bf00      	nop
 80031c8:	e7fe      	b.n	80031c8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d002      	beq.n	80031d6 <xQueueGenericCreateStatic+0x52>
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <xQueueGenericCreateStatic+0x56>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <xQueueGenericCreateStatic+0x58>
 80031da:	2300      	movs	r3, #0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10a      	bne.n	80031f6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80031e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e4:	f383 8811 	msr	BASEPRI, r3
 80031e8:	f3bf 8f6f 	isb	sy
 80031ec:	f3bf 8f4f 	dsb	sy
 80031f0:	623b      	str	r3, [r7, #32]
}
 80031f2:	bf00      	nop
 80031f4:	e7fe      	b.n	80031f4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d102      	bne.n	8003202 <xQueueGenericCreateStatic+0x7e>
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <xQueueGenericCreateStatic+0x82>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <xQueueGenericCreateStatic+0x84>
 8003206:	2300      	movs	r3, #0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10a      	bne.n	8003222 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	61fb      	str	r3, [r7, #28]
}
 800321e:	bf00      	nop
 8003220:	e7fe      	b.n	8003220 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003222:	2350      	movs	r3, #80	; 0x50
 8003224:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2b50      	cmp	r3, #80	; 0x50
 800322a:	d00a      	beq.n	8003242 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800322c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003230:	f383 8811 	msr	BASEPRI, r3
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	61bb      	str	r3, [r7, #24]
}
 800323e:	bf00      	nop
 8003240:	e7fe      	b.n	8003240 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003242:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00d      	beq.n	800326a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800324e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003256:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800325a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	4613      	mov	r3, r2
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	68b9      	ldr	r1, [r7, #8]
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 f83f 	bl	80032e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800326a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800326c:	4618      	mov	r0, r3
 800326e:	3730      	adds	r7, #48	; 0x30
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003274:	b580      	push	{r7, lr}
 8003276:	b08a      	sub	sp, #40	; 0x28
 8003278:	af02      	add	r7, sp, #8
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	4613      	mov	r3, r2
 8003280:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10a      	bne.n	800329e <xQueueGenericCreate+0x2a>
	__asm volatile
 8003288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	613b      	str	r3, [r7, #16]
}
 800329a:	bf00      	nop
 800329c:	e7fe      	b.n	800329c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	fb02 f303 	mul.w	r3, r2, r3
 80032a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	3350      	adds	r3, #80	; 0x50
 80032ac:	4618      	mov	r0, r3
 80032ae:	f002 fcd3 	bl	8005c58 <pvPortMalloc>
 80032b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d011      	beq.n	80032de <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	3350      	adds	r3, #80	; 0x50
 80032c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80032cc:	79fa      	ldrb	r2, [r7, #7]
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	4613      	mov	r3, r2
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	68b9      	ldr	r1, [r7, #8]
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 f805 	bl	80032e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80032de:	69bb      	ldr	r3, [r7, #24]
	}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3720      	adds	r7, #32
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
 80032f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d103      	bne.n	8003304 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	e002      	b.n	800330a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003316:	2101      	movs	r1, #1
 8003318:	69b8      	ldr	r0, [r7, #24]
 800331a:	f7ff fecb 	bl	80030b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	78fa      	ldrb	r2, [r7, #3]
 8003322:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003326:	bf00      	nop
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800332e:	b580      	push	{r7, lr}
 8003330:	b08a      	sub	sp, #40	; 0x28
 8003332:	af02      	add	r7, sp, #8
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10a      	bne.n	8003356 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8003340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003344:	f383 8811 	msr	BASEPRI, r3
 8003348:	f3bf 8f6f 	isb	sy
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	61bb      	str	r3, [r7, #24]
}
 8003352:	bf00      	nop
 8003354:	e7fe      	b.n	8003354 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	429a      	cmp	r2, r3
 800335c:	d90a      	bls.n	8003374 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800335e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003362:	f383 8811 	msr	BASEPRI, r3
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	f3bf 8f4f 	dsb	sy
 800336e:	617b      	str	r3, [r7, #20]
}
 8003370:	bf00      	nop
 8003372:	e7fe      	b.n	8003372 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003374:	2302      	movs	r3, #2
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	2100      	movs	r1, #0
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f7ff ff00 	bl	8003184 <xQueueGenericCreateStatic>
 8003384:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003392:	69fb      	ldr	r3, [r7, #28]
	}
 8003394:	4618      	mov	r0, r3
 8003396:	3720      	adds	r7, #32
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10a      	bne.n	80033c2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80033ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b0:	f383 8811 	msr	BASEPRI, r3
 80033b4:	f3bf 8f6f 	isb	sy
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	613b      	str	r3, [r7, #16]
}
 80033be:	bf00      	nop
 80033c0:	e7fe      	b.n	80033c0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d90a      	bls.n	80033e0 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80033ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ce:	f383 8811 	msr	BASEPRI, r3
 80033d2:	f3bf 8f6f 	isb	sy
 80033d6:	f3bf 8f4f 	dsb	sy
 80033da:	60fb      	str	r3, [r7, #12]
}
 80033dc:	bf00      	nop
 80033de:	e7fe      	b.n	80033de <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80033e0:	2202      	movs	r2, #2
 80033e2:	2100      	movs	r1, #0
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f7ff ff45 	bl	8003274 <xQueueGenericCreate>
 80033ea:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80033f8:	697b      	ldr	r3, [r7, #20]
	}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08e      	sub	sp, #56	; 0x38
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
 8003410:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003412:	2300      	movs	r3, #0
 8003414:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10a      	bne.n	8003436 <xQueueGenericSend+0x32>
	__asm volatile
 8003420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003424:	f383 8811 	msr	BASEPRI, r3
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003432:	bf00      	nop
 8003434:	e7fe      	b.n	8003434 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d103      	bne.n	8003444 <xQueueGenericSend+0x40>
 800343c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <xQueueGenericSend+0x44>
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <xQueueGenericSend+0x46>
 8003448:	2300      	movs	r3, #0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10a      	bne.n	8003464 <xQueueGenericSend+0x60>
	__asm volatile
 800344e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003452:	f383 8811 	msr	BASEPRI, r3
 8003456:	f3bf 8f6f 	isb	sy
 800345a:	f3bf 8f4f 	dsb	sy
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003460:	bf00      	nop
 8003462:	e7fe      	b.n	8003462 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d103      	bne.n	8003472 <xQueueGenericSend+0x6e>
 800346a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346e:	2b01      	cmp	r3, #1
 8003470:	d101      	bne.n	8003476 <xQueueGenericSend+0x72>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <xQueueGenericSend+0x74>
 8003476:	2300      	movs	r3, #0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10a      	bne.n	8003492 <xQueueGenericSend+0x8e>
	__asm volatile
 800347c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003480:	f383 8811 	msr	BASEPRI, r3
 8003484:	f3bf 8f6f 	isb	sy
 8003488:	f3bf 8f4f 	dsb	sy
 800348c:	623b      	str	r3, [r7, #32]
}
 800348e:	bf00      	nop
 8003490:	e7fe      	b.n	8003490 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003492:	f001 fc65 	bl	8004d60 <xTaskGetSchedulerState>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d102      	bne.n	80034a2 <xQueueGenericSend+0x9e>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <xQueueGenericSend+0xa2>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <xQueueGenericSend+0xa4>
 80034a6:	2300      	movs	r3, #0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10a      	bne.n	80034c2 <xQueueGenericSend+0xbe>
	__asm volatile
 80034ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b0:	f383 8811 	msr	BASEPRI, r3
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	61fb      	str	r3, [r7, #28]
}
 80034be:	bf00      	nop
 80034c0:	e7fe      	b.n	80034c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034c2:	f002 faa7 	bl	8005a14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d302      	bcc.n	80034d8 <xQueueGenericSend+0xd4>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d129      	bne.n	800352c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	68b9      	ldr	r1, [r7, #8]
 80034dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034de:	f000 fc5e 	bl	8003d9e <prvCopyDataToQueue>
 80034e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d010      	beq.n	800350e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ee:	3324      	adds	r3, #36	; 0x24
 80034f0:	4618      	mov	r0, r3
 80034f2:	f001 fa73 	bl	80049dc <xTaskRemoveFromEventList>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d013      	beq.n	8003524 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80034fc:	4b3f      	ldr	r3, [pc, #252]	; (80035fc <xQueueGenericSend+0x1f8>)
 80034fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	f3bf 8f6f 	isb	sy
 800350c:	e00a      	b.n	8003524 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800350e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003510:	2b00      	cmp	r3, #0
 8003512:	d007      	beq.n	8003524 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003514:	4b39      	ldr	r3, [pc, #228]	; (80035fc <xQueueGenericSend+0x1f8>)
 8003516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003524:	f002 faa6 	bl	8005a74 <vPortExitCritical>
				return pdPASS;
 8003528:	2301      	movs	r3, #1
 800352a:	e063      	b.n	80035f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d103      	bne.n	800353a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003532:	f002 fa9f 	bl	8005a74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003536:	2300      	movs	r3, #0
 8003538:	e05c      	b.n	80035f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800353a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800353c:	2b00      	cmp	r3, #0
 800353e:	d106      	bne.n	800354e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003540:	f107 0314 	add.w	r3, r7, #20
 8003544:	4618      	mov	r0, r3
 8003546:	f001 faad 	bl	8004aa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800354a:	2301      	movs	r3, #1
 800354c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800354e:	f002 fa91 	bl	8005a74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003552:	f001 f819 	bl	8004588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003556:	f002 fa5d 	bl	8005a14 <vPortEnterCritical>
 800355a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003560:	b25b      	sxtb	r3, r3
 8003562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003566:	d103      	bne.n	8003570 <xQueueGenericSend+0x16c>
 8003568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003572:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003576:	b25b      	sxtb	r3, r3
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357c:	d103      	bne.n	8003586 <xQueueGenericSend+0x182>
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003586:	f002 fa75 	bl	8005a74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800358a:	1d3a      	adds	r2, r7, #4
 800358c:	f107 0314 	add.w	r3, r7, #20
 8003590:	4611      	mov	r1, r2
 8003592:	4618      	mov	r0, r3
 8003594:	f001 fa9c 	bl	8004ad0 <xTaskCheckForTimeOut>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d124      	bne.n	80035e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800359e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035a0:	f000 fcf5 	bl	8003f8e <prvIsQueueFull>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d018      	beq.n	80035dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80035aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ac:	3310      	adds	r3, #16
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	4611      	mov	r1, r2
 80035b2:	4618      	mov	r0, r3
 80035b4:	f001 f9c2 	bl	800493c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80035b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035ba:	f000 fc80 	bl	8003ebe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80035be:	f000 fff1 	bl	80045a4 <xTaskResumeAll>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f47f af7c 	bne.w	80034c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80035ca:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <xQueueGenericSend+0x1f8>)
 80035cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	f3bf 8f4f 	dsb	sy
 80035d6:	f3bf 8f6f 	isb	sy
 80035da:	e772      	b.n	80034c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80035dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035de:	f000 fc6e 	bl	8003ebe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035e2:	f000 ffdf 	bl	80045a4 <xTaskResumeAll>
 80035e6:	e76c      	b.n	80034c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80035e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035ea:	f000 fc68 	bl	8003ebe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035ee:	f000 ffd9 	bl	80045a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80035f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3738      	adds	r7, #56	; 0x38
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	e000ed04 	.word	0xe000ed04

08003600 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b090      	sub	sp, #64	; 0x40
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10a      	bne.n	800362e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800362a:	bf00      	nop
 800362c:	e7fe      	b.n	800362c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d103      	bne.n	800363c <xQueueGenericSendFromISR+0x3c>
 8003634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <xQueueGenericSendFromISR+0x40>
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <xQueueGenericSendFromISR+0x42>
 8003640:	2300      	movs	r3, #0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10a      	bne.n	800365c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364a:	f383 8811 	msr	BASEPRI, r3
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	f3bf 8f4f 	dsb	sy
 8003656:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003658:	bf00      	nop
 800365a:	e7fe      	b.n	800365a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	2b02      	cmp	r3, #2
 8003660:	d103      	bne.n	800366a <xQueueGenericSendFromISR+0x6a>
 8003662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <xQueueGenericSendFromISR+0x6e>
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <xQueueGenericSendFromISR+0x70>
 800366e:	2300      	movs	r3, #0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10a      	bne.n	800368a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003678:	f383 8811 	msr	BASEPRI, r3
 800367c:	f3bf 8f6f 	isb	sy
 8003680:	f3bf 8f4f 	dsb	sy
 8003684:	623b      	str	r3, [r7, #32]
}
 8003686:	bf00      	nop
 8003688:	e7fe      	b.n	8003688 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800368a:	f002 faa5 	bl	8005bd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800368e:	f3ef 8211 	mrs	r2, BASEPRI
 8003692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003696:	f383 8811 	msr	BASEPRI, r3
 800369a:	f3bf 8f6f 	isb	sy
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	61fa      	str	r2, [r7, #28]
 80036a4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80036a6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036a8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d302      	bcc.n	80036bc <xQueueGenericSendFromISR+0xbc>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d12f      	bne.n	800371c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80036bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	68b9      	ldr	r1, [r7, #8]
 80036d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80036d2:	f000 fb64 	bl	8003d9e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80036d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80036da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036de:	d112      	bne.n	8003706 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d016      	beq.n	8003716 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ea:	3324      	adds	r3, #36	; 0x24
 80036ec:	4618      	mov	r0, r3
 80036ee:	f001 f975 	bl	80049dc <xTaskRemoveFromEventList>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00e      	beq.n	8003716 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00b      	beq.n	8003716 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	e007      	b.n	8003716 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003706:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800370a:	3301      	adds	r3, #1
 800370c:	b2db      	uxtb	r3, r3
 800370e:	b25a      	sxtb	r2, r3
 8003710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003716:	2301      	movs	r3, #1
 8003718:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800371a:	e001      	b.n	8003720 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800371c:	2300      	movs	r3, #0
 800371e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003722:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800372a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800372c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800372e:	4618      	mov	r0, r3
 8003730:	3740      	adds	r7, #64	; 0x40
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b08e      	sub	sp, #56	; 0x38
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10a      	bne.n	8003760 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800374a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374e:	f383 8811 	msr	BASEPRI, r3
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	623b      	str	r3, [r7, #32]
}
 800375c:	bf00      	nop
 800375e:	e7fe      	b.n	800375e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <xQueueGiveFromISR+0x48>
	__asm volatile
 8003768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376c:	f383 8811 	msr	BASEPRI, r3
 8003770:	f3bf 8f6f 	isb	sy
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	61fb      	str	r3, [r7, #28]
}
 800377a:	bf00      	nop
 800377c:	e7fe      	b.n	800377c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d103      	bne.n	800378e <xQueueGiveFromISR+0x58>
 8003786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <xQueueGiveFromISR+0x5c>
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <xQueueGiveFromISR+0x5e>
 8003792:	2300      	movs	r3, #0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10a      	bne.n	80037ae <xQueueGiveFromISR+0x78>
	__asm volatile
 8003798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379c:	f383 8811 	msr	BASEPRI, r3
 80037a0:	f3bf 8f6f 	isb	sy
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	61bb      	str	r3, [r7, #24]
}
 80037aa:	bf00      	nop
 80037ac:	e7fe      	b.n	80037ac <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80037ae:	f002 fa13 	bl	8005bd8 <vPortValidateInterruptPriority>
	__asm volatile
 80037b2:	f3ef 8211 	mrs	r2, BASEPRI
 80037b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ba:	f383 8811 	msr	BASEPRI, r3
 80037be:	f3bf 8f6f 	isb	sy
 80037c2:	f3bf 8f4f 	dsb	sy
 80037c6:	617a      	str	r2, [r7, #20]
 80037c8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80037ca:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80037cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80037d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037da:	429a      	cmp	r2, r3
 80037dc:	d22b      	bcs.n	8003836 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80037de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80037f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80037f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f8:	d112      	bne.n	8003820 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d016      	beq.n	8003830 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	3324      	adds	r3, #36	; 0x24
 8003806:	4618      	mov	r0, r3
 8003808:	f001 f8e8 	bl	80049dc <xTaskRemoveFromEventList>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00e      	beq.n	8003830 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00b      	beq.n	8003830 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2201      	movs	r2, #1
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	e007      	b.n	8003830 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003824:	3301      	adds	r3, #1
 8003826:	b2db      	uxtb	r3, r3
 8003828:	b25a      	sxtb	r2, r3
 800382a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003830:	2301      	movs	r3, #1
 8003832:	637b      	str	r3, [r7, #52]	; 0x34
 8003834:	e001      	b.n	800383a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003836:	2300      	movs	r3, #0
 8003838:	637b      	str	r3, [r7, #52]	; 0x34
 800383a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f383 8811 	msr	BASEPRI, r3
}
 8003844:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003848:	4618      	mov	r0, r3
 800384a:	3738      	adds	r7, #56	; 0x38
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b08c      	sub	sp, #48	; 0x30
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800385c:	2300      	movs	r3, #0
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10a      	bne.n	8003880 <xQueueReceive+0x30>
	__asm volatile
 800386a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386e:	f383 8811 	msr	BASEPRI, r3
 8003872:	f3bf 8f6f 	isb	sy
 8003876:	f3bf 8f4f 	dsb	sy
 800387a:	623b      	str	r3, [r7, #32]
}
 800387c:	bf00      	nop
 800387e:	e7fe      	b.n	800387e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d103      	bne.n	800388e <xQueueReceive+0x3e>
 8003886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <xQueueReceive+0x42>
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <xQueueReceive+0x44>
 8003892:	2300      	movs	r3, #0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10a      	bne.n	80038ae <xQueueReceive+0x5e>
	__asm volatile
 8003898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389c:	f383 8811 	msr	BASEPRI, r3
 80038a0:	f3bf 8f6f 	isb	sy
 80038a4:	f3bf 8f4f 	dsb	sy
 80038a8:	61fb      	str	r3, [r7, #28]
}
 80038aa:	bf00      	nop
 80038ac:	e7fe      	b.n	80038ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038ae:	f001 fa57 	bl	8004d60 <xTaskGetSchedulerState>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d102      	bne.n	80038be <xQueueReceive+0x6e>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <xQueueReceive+0x72>
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <xQueueReceive+0x74>
 80038c2:	2300      	movs	r3, #0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10a      	bne.n	80038de <xQueueReceive+0x8e>
	__asm volatile
 80038c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	61bb      	str	r3, [r7, #24]
}
 80038da:	bf00      	nop
 80038dc:	e7fe      	b.n	80038dc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038de:	f002 f899 	bl	8005a14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d01f      	beq.n	800392e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80038ee:	68b9      	ldr	r1, [r7, #8]
 80038f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038f2:	f000 fabe 	bl	8003e72 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	1e5a      	subs	r2, r3, #1
 80038fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00f      	beq.n	8003926 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003908:	3310      	adds	r3, #16
 800390a:	4618      	mov	r0, r3
 800390c:	f001 f866 	bl	80049dc <xTaskRemoveFromEventList>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d007      	beq.n	8003926 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003916:	4b3d      	ldr	r3, [pc, #244]	; (8003a0c <xQueueReceive+0x1bc>)
 8003918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003926:	f002 f8a5 	bl	8005a74 <vPortExitCritical>
				return pdPASS;
 800392a:	2301      	movs	r3, #1
 800392c:	e069      	b.n	8003a02 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d103      	bne.n	800393c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003934:	f002 f89e 	bl	8005a74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003938:	2300      	movs	r3, #0
 800393a:	e062      	b.n	8003a02 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800393c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393e:	2b00      	cmp	r3, #0
 8003940:	d106      	bne.n	8003950 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003942:	f107 0310 	add.w	r3, r7, #16
 8003946:	4618      	mov	r0, r3
 8003948:	f001 f8ac 	bl	8004aa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800394c:	2301      	movs	r3, #1
 800394e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003950:	f002 f890 	bl	8005a74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003954:	f000 fe18 	bl	8004588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003958:	f002 f85c 	bl	8005a14 <vPortEnterCritical>
 800395c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003962:	b25b      	sxtb	r3, r3
 8003964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003968:	d103      	bne.n	8003972 <xQueueReceive+0x122>
 800396a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003974:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003978:	b25b      	sxtb	r3, r3
 800397a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397e:	d103      	bne.n	8003988 <xQueueReceive+0x138>
 8003980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003988:	f002 f874 	bl	8005a74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800398c:	1d3a      	adds	r2, r7, #4
 800398e:	f107 0310 	add.w	r3, r7, #16
 8003992:	4611      	mov	r1, r2
 8003994:	4618      	mov	r0, r3
 8003996:	f001 f89b 	bl	8004ad0 <xTaskCheckForTimeOut>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d123      	bne.n	80039e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039a2:	f000 fade 	bl	8003f62 <prvIsQueueEmpty>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d017      	beq.n	80039dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80039ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ae:	3324      	adds	r3, #36	; 0x24
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	4611      	mov	r1, r2
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 ffc1 	bl	800493c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80039ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039bc:	f000 fa7f 	bl	8003ebe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80039c0:	f000 fdf0 	bl	80045a4 <xTaskResumeAll>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d189      	bne.n	80038de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80039ca:	4b10      	ldr	r3, [pc, #64]	; (8003a0c <xQueueReceive+0x1bc>)
 80039cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	f3bf 8f4f 	dsb	sy
 80039d6:	f3bf 8f6f 	isb	sy
 80039da:	e780      	b.n	80038de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80039dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039de:	f000 fa6e 	bl	8003ebe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039e2:	f000 fddf 	bl	80045a4 <xTaskResumeAll>
 80039e6:	e77a      	b.n	80038de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80039e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039ea:	f000 fa68 	bl	8003ebe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039ee:	f000 fdd9 	bl	80045a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039f4:	f000 fab5 	bl	8003f62 <prvIsQueueEmpty>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f43f af6f 	beq.w	80038de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003a00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3730      	adds	r7, #48	; 0x30
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	e000ed04 	.word	0xe000ed04

08003a10 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b08e      	sub	sp, #56	; 0x38
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003a22:	2300      	movs	r3, #0
 8003a24:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10a      	bne.n	8003a42 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	623b      	str	r3, [r7, #32]
}
 8003a3e:	bf00      	nop
 8003a40:	e7fe      	b.n	8003a40 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4e:	f383 8811 	msr	BASEPRI, r3
 8003a52:	f3bf 8f6f 	isb	sy
 8003a56:	f3bf 8f4f 	dsb	sy
 8003a5a:	61fb      	str	r3, [r7, #28]
}
 8003a5c:	bf00      	nop
 8003a5e:	e7fe      	b.n	8003a5e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a60:	f001 f97e 	bl	8004d60 <xTaskGetSchedulerState>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d102      	bne.n	8003a70 <xQueueSemaphoreTake+0x60>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <xQueueSemaphoreTake+0x64>
 8003a70:	2301      	movs	r3, #1
 8003a72:	e000      	b.n	8003a76 <xQueueSemaphoreTake+0x66>
 8003a74:	2300      	movs	r3, #0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10a      	bne.n	8003a90 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7e:	f383 8811 	msr	BASEPRI, r3
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	f3bf 8f4f 	dsb	sy
 8003a8a:	61bb      	str	r3, [r7, #24]
}
 8003a8c:	bf00      	nop
 8003a8e:	e7fe      	b.n	8003a8e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a90:	f001 ffc0 	bl	8005a14 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a98:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d024      	beq.n	8003aea <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa2:	1e5a      	subs	r2, r3, #1
 8003aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d104      	bne.n	8003aba <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003ab0:	f001 facc 	bl	800504c <pvTaskIncrementMutexHeldCount>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00f      	beq.n	8003ae2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac4:	3310      	adds	r3, #16
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 ff88 	bl	80049dc <xTaskRemoveFromEventList>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d007      	beq.n	8003ae2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ad2:	4b54      	ldr	r3, [pc, #336]	; (8003c24 <xQueueSemaphoreTake+0x214>)
 8003ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ae2:	f001 ffc7 	bl	8005a74 <vPortExitCritical>
				return pdPASS;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e097      	b.n	8003c1a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d111      	bne.n	8003b14 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afa:	f383 8811 	msr	BASEPRI, r3
 8003afe:	f3bf 8f6f 	isb	sy
 8003b02:	f3bf 8f4f 	dsb	sy
 8003b06:	617b      	str	r3, [r7, #20]
}
 8003b08:	bf00      	nop
 8003b0a:	e7fe      	b.n	8003b0a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003b0c:	f001 ffb2 	bl	8005a74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b10:	2300      	movs	r3, #0
 8003b12:	e082      	b.n	8003c1a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d106      	bne.n	8003b28 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b1a:	f107 030c 	add.w	r3, r7, #12
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 ffc0 	bl	8004aa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b24:	2301      	movs	r3, #1
 8003b26:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b28:	f001 ffa4 	bl	8005a74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b2c:	f000 fd2c 	bl	8004588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b30:	f001 ff70 	bl	8005a14 <vPortEnterCritical>
 8003b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b3a:	b25b      	sxtb	r3, r3
 8003b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b40:	d103      	bne.n	8003b4a <xQueueSemaphoreTake+0x13a>
 8003b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b50:	b25b      	sxtb	r3, r3
 8003b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b56:	d103      	bne.n	8003b60 <xQueueSemaphoreTake+0x150>
 8003b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b60:	f001 ff88 	bl	8005a74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b64:	463a      	mov	r2, r7
 8003b66:	f107 030c 	add.w	r3, r7, #12
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f000 ffaf 	bl	8004ad0 <xTaskCheckForTimeOut>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d132      	bne.n	8003bde <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b7a:	f000 f9f2 	bl	8003f62 <prvIsQueueEmpty>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d026      	beq.n	8003bd2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d109      	bne.n	8003ba0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003b8c:	f001 ff42 	bl	8005a14 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f001 f901 	bl	8004d9c <xTaskPriorityInherit>
 8003b9a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003b9c:	f001 ff6a 	bl	8005a74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba2:	3324      	adds	r3, #36	; 0x24
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 fec7 	bl	800493c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003bae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003bb0:	f000 f985 	bl	8003ebe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003bb4:	f000 fcf6 	bl	80045a4 <xTaskResumeAll>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f47f af68 	bne.w	8003a90 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003bc0:	4b18      	ldr	r3, [pc, #96]	; (8003c24 <xQueueSemaphoreTake+0x214>)
 8003bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	e75e      	b.n	8003a90 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003bd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003bd4:	f000 f973 	bl	8003ebe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bd8:	f000 fce4 	bl	80045a4 <xTaskResumeAll>
 8003bdc:	e758      	b.n	8003a90 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003bde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003be0:	f000 f96d 	bl	8003ebe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003be4:	f000 fcde 	bl	80045a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003be8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003bea:	f000 f9ba 	bl	8003f62 <prvIsQueueEmpty>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f43f af4d 	beq.w	8003a90 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00d      	beq.n	8003c18 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003bfc:	f001 ff0a 	bl	8005a14 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003c00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c02:	f000 f8b4 	bl	8003d6e <prvGetDisinheritPriorityAfterTimeout>
 8003c06:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f001 f99a 	bl	8004f48 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003c14:	f001 ff2e 	bl	8005a74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003c18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3738      	adds	r7, #56	; 0x38
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	e000ed04 	.word	0xe000ed04

08003c28 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b08e      	sub	sp, #56	; 0x38
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10a      	bne.n	8003c54 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c42:	f383 8811 	msr	BASEPRI, r3
 8003c46:	f3bf 8f6f 	isb	sy
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	623b      	str	r3, [r7, #32]
}
 8003c50:	bf00      	nop
 8003c52:	e7fe      	b.n	8003c52 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d103      	bne.n	8003c62 <xQueueReceiveFromISR+0x3a>
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <xQueueReceiveFromISR+0x3e>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <xQueueReceiveFromISR+0x40>
 8003c66:	2300      	movs	r3, #0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10a      	bne.n	8003c82 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c70:	f383 8811 	msr	BASEPRI, r3
 8003c74:	f3bf 8f6f 	isb	sy
 8003c78:	f3bf 8f4f 	dsb	sy
 8003c7c:	61fb      	str	r3, [r7, #28]
}
 8003c7e:	bf00      	nop
 8003c80:	e7fe      	b.n	8003c80 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c82:	f001 ffa9 	bl	8005bd8 <vPortValidateInterruptPriority>
	__asm volatile
 8003c86:	f3ef 8211 	mrs	r2, BASEPRI
 8003c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8e:	f383 8811 	msr	BASEPRI, r3
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	f3bf 8f4f 	dsb	sy
 8003c9a:	61ba      	str	r2, [r7, #24]
 8003c9c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003c9e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d02f      	beq.n	8003d0e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003cb8:	68b9      	ldr	r1, [r7, #8]
 8003cba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cbc:	f000 f8d9 	bl	8003e72 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc2:	1e5a      	subs	r2, r3, #1
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003cc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd0:	d112      	bne.n	8003cf8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d016      	beq.n	8003d08 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cdc:	3310      	adds	r3, #16
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 fe7c 	bl	80049dc <xTaskRemoveFromEventList>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00e      	beq.n	8003d08 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00b      	beq.n	8003d08 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	e007      	b.n	8003d08 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	b25a      	sxtb	r2, r3
 8003d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d0c:	e001      	b.n	8003d12 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	637b      	str	r3, [r7, #52]	; 0x34
 8003d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d14:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f383 8811 	msr	BASEPRI, r3
}
 8003d1c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3738      	adds	r7, #56	; 0x38
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10a      	bne.n	8003d50 <vQueueDelete+0x28>
	__asm volatile
 8003d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3e:	f383 8811 	msr	BASEPRI, r3
 8003d42:	f3bf 8f6f 	isb	sy
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	60bb      	str	r3, [r7, #8]
}
 8003d4c:	bf00      	nop
 8003d4e:	e7fe      	b.n	8003d4e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f000 f95f 	bl	8004014 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d102      	bne.n	8003d66 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f002 f845 	bl	8005df0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003d66:	bf00      	nop
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003d6e:	b480      	push	{r7}
 8003d70:	b085      	sub	sp, #20
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d006      	beq.n	8003d8c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	e001      	b.n	8003d90 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003d90:	68fb      	ldr	r3, [r7, #12]
	}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b086      	sub	sp, #24
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	60f8      	str	r0, [r7, #12]
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003daa:	2300      	movs	r3, #0
 8003dac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10d      	bne.n	8003dd8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d14d      	bne.n	8003e60 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f001 f84f 	bl	8004e6c <xTaskPriorityDisinherit>
 8003dce:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	609a      	str	r2, [r3, #8]
 8003dd6:	e043      	b.n	8003e60 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d119      	bne.n	8003e12 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6858      	ldr	r0, [r3, #4]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	461a      	mov	r2, r3
 8003de8:	68b9      	ldr	r1, [r7, #8]
 8003dea:	f002 f9a3 	bl	8006134 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	441a      	add	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d32b      	bcc.n	8003e60 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	605a      	str	r2, [r3, #4]
 8003e10:	e026      	b.n	8003e60 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	68d8      	ldr	r0, [r3, #12]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	68b9      	ldr	r1, [r7, #8]
 8003e1e:	f002 f989 	bl	8006134 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	425b      	negs	r3, r3
 8003e2c:	441a      	add	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d207      	bcs.n	8003e4e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	425b      	negs	r3, r3
 8003e48:	441a      	add	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d105      	bne.n	8003e60 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e68:	697b      	ldr	r3, [r7, #20]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	b082      	sub	sp, #8
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
 8003e7a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d018      	beq.n	8003eb6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	441a      	add	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d303      	bcc.n	8003ea6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68d9      	ldr	r1, [r3, #12]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	461a      	mov	r2, r3
 8003eb0:	6838      	ldr	r0, [r7, #0]
 8003eb2:	f002 f93f 	bl	8006134 <memcpy>
	}
}
 8003eb6:	bf00      	nop
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ec6:	f001 fda5 	bl	8005a14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ed0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ed2:	e011      	b.n	8003ef8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d012      	beq.n	8003f02 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3324      	adds	r3, #36	; 0x24
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 fd7b 	bl	80049dc <xTaskRemoveFromEventList>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003eec:	f000 fe52 	bl	8004b94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ef0:	7bfb      	ldrb	r3, [r7, #15]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	dce9      	bgt.n	8003ed4 <prvUnlockQueue+0x16>
 8003f00:	e000      	b.n	8003f04 <prvUnlockQueue+0x46>
					break;
 8003f02:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	22ff      	movs	r2, #255	; 0xff
 8003f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003f0c:	f001 fdb2 	bl	8005a74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f10:	f001 fd80 	bl	8005a14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f1a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f1c:	e011      	b.n	8003f42 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d012      	beq.n	8003f4c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	3310      	adds	r3, #16
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fd56 	bl	80049dc <xTaskRemoveFromEventList>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f36:	f000 fe2d 	bl	8004b94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f3a:	7bbb      	ldrb	r3, [r7, #14]
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	dce9      	bgt.n	8003f1e <prvUnlockQueue+0x60>
 8003f4a:	e000      	b.n	8003f4e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f4c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	22ff      	movs	r2, #255	; 0xff
 8003f52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f56:	f001 fd8d 	bl	8005a74 <vPortExitCritical>
}
 8003f5a:	bf00      	nop
 8003f5c:	3710      	adds	r7, #16
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b084      	sub	sp, #16
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f6a:	f001 fd53 	bl	8005a14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d102      	bne.n	8003f7c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f76:	2301      	movs	r3, #1
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	e001      	b.n	8003f80 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f80:	f001 fd78 	bl	8005a74 <vPortExitCritical>

	return xReturn;
 8003f84:	68fb      	ldr	r3, [r7, #12]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b084      	sub	sp, #16
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f96:	f001 fd3d 	bl	8005a14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d102      	bne.n	8003fac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	e001      	b.n	8003fb0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003fac:	2300      	movs	r3, #0
 8003fae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fb0:	f001 fd60 	bl	8005a74 <vPortExitCritical>

	return xReturn;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	e014      	b.n	8003ffa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003fd0:	4a0f      	ldr	r2, [pc, #60]	; (8004010 <vQueueAddToRegistry+0x50>)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10b      	bne.n	8003ff4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003fdc:	490c      	ldr	r1, [pc, #48]	; (8004010 <vQueueAddToRegistry+0x50>)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003fe6:	4a0a      	ldr	r2, [pc, #40]	; (8004010 <vQueueAddToRegistry+0x50>)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	4413      	add	r3, r2
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003ff2:	e006      	b.n	8004002 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2b07      	cmp	r3, #7
 8003ffe:	d9e7      	bls.n	8003fd0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004000:	bf00      	nop
 8004002:	bf00      	nop
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	2000088c 	.word	0x2000088c

08004014 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800401c:	2300      	movs	r3, #0
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	e016      	b.n	8004050 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004022:	4a10      	ldr	r2, [pc, #64]	; (8004064 <vQueueUnregisterQueue+0x50>)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	4413      	add	r3, r2
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	429a      	cmp	r2, r3
 8004030:	d10b      	bne.n	800404a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004032:	4a0c      	ldr	r2, [pc, #48]	; (8004064 <vQueueUnregisterQueue+0x50>)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2100      	movs	r1, #0
 8004038:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800403c:	4a09      	ldr	r2, [pc, #36]	; (8004064 <vQueueUnregisterQueue+0x50>)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	4413      	add	r3, r2
 8004044:	2200      	movs	r2, #0
 8004046:	605a      	str	r2, [r3, #4]
				break;
 8004048:	e006      	b.n	8004058 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	3301      	adds	r3, #1
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2b07      	cmp	r3, #7
 8004054:	d9e5      	bls.n	8004022 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004056:	bf00      	nop
 8004058:	bf00      	nop
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	2000088c 	.word	0x2000088c

08004068 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004078:	f001 fccc 	bl	8005a14 <vPortEnterCritical>
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004082:	b25b      	sxtb	r3, r3
 8004084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004088:	d103      	bne.n	8004092 <vQueueWaitForMessageRestricted+0x2a>
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004098:	b25b      	sxtb	r3, r3
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409e:	d103      	bne.n	80040a8 <vQueueWaitForMessageRestricted+0x40>
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040a8:	f001 fce4 	bl	8005a74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d106      	bne.n	80040c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	3324      	adds	r3, #36	; 0x24
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	68b9      	ldr	r1, [r7, #8]
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 fc61 	bl	8004984 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80040c2:	6978      	ldr	r0, [r7, #20]
 80040c4:	f7ff fefb 	bl	8003ebe <prvUnlockQueue>
	}
 80040c8:	bf00      	nop
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08e      	sub	sp, #56	; 0x38
 80040d4:	af04      	add	r7, sp, #16
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
 80040dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10a      	bne.n	80040fa <xTaskCreateStatic+0x2a>
	__asm volatile
 80040e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e8:	f383 8811 	msr	BASEPRI, r3
 80040ec:	f3bf 8f6f 	isb	sy
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	623b      	str	r3, [r7, #32]
}
 80040f6:	bf00      	nop
 80040f8:	e7fe      	b.n	80040f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80040fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10a      	bne.n	8004116 <xTaskCreateStatic+0x46>
	__asm volatile
 8004100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	61fb      	str	r3, [r7, #28]
}
 8004112:	bf00      	nop
 8004114:	e7fe      	b.n	8004114 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004116:	23a8      	movs	r3, #168	; 0xa8
 8004118:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	2ba8      	cmp	r3, #168	; 0xa8
 800411e:	d00a      	beq.n	8004136 <xTaskCreateStatic+0x66>
	__asm volatile
 8004120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	61bb      	str	r3, [r7, #24]
}
 8004132:	bf00      	nop
 8004134:	e7fe      	b.n	8004134 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004136:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413a:	2b00      	cmp	r3, #0
 800413c:	d01e      	beq.n	800417c <xTaskCreateStatic+0xac>
 800413e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004140:	2b00      	cmp	r3, #0
 8004142:	d01b      	beq.n	800417c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004146:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800414c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	2202      	movs	r2, #2
 8004152:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004156:	2300      	movs	r3, #0
 8004158:	9303      	str	r3, [sp, #12]
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	9302      	str	r3, [sp, #8]
 800415e:	f107 0314 	add.w	r3, r7, #20
 8004162:	9301      	str	r3, [sp, #4]
 8004164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	68b9      	ldr	r1, [r7, #8]
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 f850 	bl	8004214 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004174:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004176:	f000 f8f3 	bl	8004360 <prvAddNewTaskToReadyList>
 800417a:	e001      	b.n	8004180 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800417c:	2300      	movs	r3, #0
 800417e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004180:	697b      	ldr	r3, [r7, #20]
	}
 8004182:	4618      	mov	r0, r3
 8004184:	3728      	adds	r7, #40	; 0x28
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800418a:	b580      	push	{r7, lr}
 800418c:	b08c      	sub	sp, #48	; 0x30
 800418e:	af04      	add	r7, sp, #16
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	603b      	str	r3, [r7, #0]
 8004196:	4613      	mov	r3, r2
 8004198:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800419a:	88fb      	ldrh	r3, [r7, #6]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4618      	mov	r0, r3
 80041a0:	f001 fd5a 	bl	8005c58 <pvPortMalloc>
 80041a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00e      	beq.n	80041ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80041ac:	20a8      	movs	r0, #168	; 0xa8
 80041ae:	f001 fd53 	bl	8005c58 <pvPortMalloc>
 80041b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	631a      	str	r2, [r3, #48]	; 0x30
 80041c0:	e005      	b.n	80041ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041c2:	6978      	ldr	r0, [r7, #20]
 80041c4:	f001 fe14 	bl	8005df0 <vPortFree>
 80041c8:	e001      	b.n	80041ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041ca:	2300      	movs	r3, #0
 80041cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d017      	beq.n	8004204 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041dc:	88fa      	ldrh	r2, [r7, #6]
 80041de:	2300      	movs	r3, #0
 80041e0:	9303      	str	r3, [sp, #12]
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	9302      	str	r3, [sp, #8]
 80041e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e8:	9301      	str	r3, [sp, #4]
 80041ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68b9      	ldr	r1, [r7, #8]
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 f80e 	bl	8004214 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041f8:	69f8      	ldr	r0, [r7, #28]
 80041fa:	f000 f8b1 	bl	8004360 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041fe:	2301      	movs	r3, #1
 8004200:	61bb      	str	r3, [r7, #24]
 8004202:	e002      	b.n	800420a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004204:	f04f 33ff 	mov.w	r3, #4294967295
 8004208:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800420a:	69bb      	ldr	r3, [r7, #24]
	}
 800420c:	4618      	mov	r0, r3
 800420e:	3720      	adds	r7, #32
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b088      	sub	sp, #32
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
 8004220:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004224:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	461a      	mov	r2, r3
 800422c:	21a5      	movs	r1, #165	; 0xa5
 800422e:	f001 fefd 	bl	800602c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800423c:	3b01      	subs	r3, #1
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	f023 0307 	bic.w	r3, r3, #7
 800424a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	617b      	str	r3, [r7, #20]
}
 8004268:	bf00      	nop
 800426a:	e7fe      	b.n	800426a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d01f      	beq.n	80042b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004272:	2300      	movs	r3, #0
 8004274:	61fb      	str	r3, [r7, #28]
 8004276:	e012      	b.n	800429e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	4413      	add	r3, r2
 800427e:	7819      	ldrb	r1, [r3, #0]
 8004280:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	4413      	add	r3, r2
 8004286:	3334      	adds	r3, #52	; 0x34
 8004288:	460a      	mov	r2, r1
 800428a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	4413      	add	r3, r2
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d006      	beq.n	80042a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	3301      	adds	r3, #1
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	2b0f      	cmp	r3, #15
 80042a2:	d9e9      	bls.n	8004278 <prvInitialiseNewTask+0x64>
 80042a4:	e000      	b.n	80042a8 <prvInitialiseNewTask+0x94>
			{
				break;
 80042a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042b0:	e003      	b.n	80042ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80042b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042bc:	2b37      	cmp	r3, #55	; 0x37
 80042be:	d901      	bls.n	80042c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042c0:	2337      	movs	r3, #55	; 0x37
 80042c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80042d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d2:	2200      	movs	r2, #0
 80042d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d8:	3304      	adds	r3, #4
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fe fe56 	bl	8002f8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e2:	3318      	adds	r3, #24
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7fe fe51 	bl	8002f8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80042f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004302:	2200      	movs	r2, #0
 8004304:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430a:	2200      	movs	r2, #0
 800430c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004312:	3354      	adds	r3, #84	; 0x54
 8004314:	224c      	movs	r2, #76	; 0x4c
 8004316:	2100      	movs	r1, #0
 8004318:	4618      	mov	r0, r3
 800431a:	f001 fe87 	bl	800602c <memset>
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	4a0c      	ldr	r2, [pc, #48]	; (8004354 <prvInitialiseNewTask+0x140>)
 8004322:	659a      	str	r2, [r3, #88]	; 0x58
 8004324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004326:	4a0c      	ldr	r2, [pc, #48]	; (8004358 <prvInitialiseNewTask+0x144>)
 8004328:	65da      	str	r2, [r3, #92]	; 0x5c
 800432a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432c:	4a0b      	ldr	r2, [pc, #44]	; (800435c <prvInitialiseNewTask+0x148>)
 800432e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	68f9      	ldr	r1, [r7, #12]
 8004334:	69b8      	ldr	r0, [r7, #24]
 8004336:	f001 fa3f 	bl	80057b8 <pxPortInitialiseStack>
 800433a:	4602      	mov	r2, r0
 800433c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800434a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800434c:	bf00      	nop
 800434e:	3720      	adds	r7, #32
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	20004b20 	.word	0x20004b20
 8004358:	20004b88 	.word	0x20004b88
 800435c:	20004bf0 	.word	0x20004bf0

08004360 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004368:	f001 fb54 	bl	8005a14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800436c:	4b2d      	ldr	r3, [pc, #180]	; (8004424 <prvAddNewTaskToReadyList+0xc4>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3301      	adds	r3, #1
 8004372:	4a2c      	ldr	r2, [pc, #176]	; (8004424 <prvAddNewTaskToReadyList+0xc4>)
 8004374:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004376:	4b2c      	ldr	r3, [pc, #176]	; (8004428 <prvAddNewTaskToReadyList+0xc8>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d109      	bne.n	8004392 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800437e:	4a2a      	ldr	r2, [pc, #168]	; (8004428 <prvAddNewTaskToReadyList+0xc8>)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004384:	4b27      	ldr	r3, [pc, #156]	; (8004424 <prvAddNewTaskToReadyList+0xc4>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d110      	bne.n	80043ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800438c:	f000 fc26 	bl	8004bdc <prvInitialiseTaskLists>
 8004390:	e00d      	b.n	80043ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004392:	4b26      	ldr	r3, [pc, #152]	; (800442c <prvAddNewTaskToReadyList+0xcc>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800439a:	4b23      	ldr	r3, [pc, #140]	; (8004428 <prvAddNewTaskToReadyList+0xc8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d802      	bhi.n	80043ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043a8:	4a1f      	ldr	r2, [pc, #124]	; (8004428 <prvAddNewTaskToReadyList+0xc8>)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043ae:	4b20      	ldr	r3, [pc, #128]	; (8004430 <prvAddNewTaskToReadyList+0xd0>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3301      	adds	r3, #1
 80043b4:	4a1e      	ldr	r2, [pc, #120]	; (8004430 <prvAddNewTaskToReadyList+0xd0>)
 80043b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80043b8:	4b1d      	ldr	r3, [pc, #116]	; (8004430 <prvAddNewTaskToReadyList+0xd0>)
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c4:	4b1b      	ldr	r3, [pc, #108]	; (8004434 <prvAddNewTaskToReadyList+0xd4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d903      	bls.n	80043d4 <prvAddNewTaskToReadyList+0x74>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	4a18      	ldr	r2, [pc, #96]	; (8004434 <prvAddNewTaskToReadyList+0xd4>)
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d8:	4613      	mov	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4a15      	ldr	r2, [pc, #84]	; (8004438 <prvAddNewTaskToReadyList+0xd8>)
 80043e2:	441a      	add	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3304      	adds	r3, #4
 80043e8:	4619      	mov	r1, r3
 80043ea:	4610      	mov	r0, r2
 80043ec:	f7fe fddb 	bl	8002fa6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043f0:	f001 fb40 	bl	8005a74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043f4:	4b0d      	ldr	r3, [pc, #52]	; (800442c <prvAddNewTaskToReadyList+0xcc>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00e      	beq.n	800441a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043fc:	4b0a      	ldr	r3, [pc, #40]	; (8004428 <prvAddNewTaskToReadyList+0xc8>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	429a      	cmp	r2, r3
 8004408:	d207      	bcs.n	800441a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800440a:	4b0c      	ldr	r3, [pc, #48]	; (800443c <prvAddNewTaskToReadyList+0xdc>)
 800440c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800441a:	bf00      	nop
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000da0 	.word	0x20000da0
 8004428:	200008cc 	.word	0x200008cc
 800442c:	20000dac 	.word	0x20000dac
 8004430:	20000dbc 	.word	0x20000dbc
 8004434:	20000da8 	.word	0x20000da8
 8004438:	200008d0 	.word	0x200008d0
 800443c:	e000ed04 	.word	0xe000ed04

08004440 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d017      	beq.n	8004482 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004452:	4b13      	ldr	r3, [pc, #76]	; (80044a0 <vTaskDelay+0x60>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <vTaskDelay+0x30>
	__asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	60bb      	str	r3, [r7, #8]
}
 800446c:	bf00      	nop
 800446e:	e7fe      	b.n	800446e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004470:	f000 f88a 	bl	8004588 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004474:	2100      	movs	r1, #0
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fdfc 	bl	8005074 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800447c:	f000 f892 	bl	80045a4 <xTaskResumeAll>
 8004480:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d107      	bne.n	8004498 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004488:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <vTaskDelay+0x64>)
 800448a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004498:	bf00      	nop
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20000dc8 	.word	0x20000dc8
 80044a4:	e000ed04 	.word	0xe000ed04

080044a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b08a      	sub	sp, #40	; 0x28
 80044ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044b6:	463a      	mov	r2, r7
 80044b8:	1d39      	adds	r1, r7, #4
 80044ba:	f107 0308 	add.w	r3, r7, #8
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fe fd10 	bl	8002ee4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044c4:	6839      	ldr	r1, [r7, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	9202      	str	r2, [sp, #8]
 80044cc:	9301      	str	r3, [sp, #4]
 80044ce:	2300      	movs	r3, #0
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	2300      	movs	r3, #0
 80044d4:	460a      	mov	r2, r1
 80044d6:	4924      	ldr	r1, [pc, #144]	; (8004568 <vTaskStartScheduler+0xc0>)
 80044d8:	4824      	ldr	r0, [pc, #144]	; (800456c <vTaskStartScheduler+0xc4>)
 80044da:	f7ff fdf9 	bl	80040d0 <xTaskCreateStatic>
 80044de:	4603      	mov	r3, r0
 80044e0:	4a23      	ldr	r2, [pc, #140]	; (8004570 <vTaskStartScheduler+0xc8>)
 80044e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044e4:	4b22      	ldr	r3, [pc, #136]	; (8004570 <vTaskStartScheduler+0xc8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044ec:	2301      	movs	r3, #1
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	e001      	b.n	80044f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044f2:	2300      	movs	r3, #0
 80044f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d102      	bne.n	8004502 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80044fc:	f000 fe0e 	bl	800511c <xTimerCreateTimerTask>
 8004500:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d11b      	bne.n	8004540 <vTaskStartScheduler+0x98>
	__asm volatile
 8004508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450c:	f383 8811 	msr	BASEPRI, r3
 8004510:	f3bf 8f6f 	isb	sy
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	613b      	str	r3, [r7, #16]
}
 800451a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800451c:	4b15      	ldr	r3, [pc, #84]	; (8004574 <vTaskStartScheduler+0xcc>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3354      	adds	r3, #84	; 0x54
 8004522:	4a15      	ldr	r2, [pc, #84]	; (8004578 <vTaskStartScheduler+0xd0>)
 8004524:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004526:	4b15      	ldr	r3, [pc, #84]	; (800457c <vTaskStartScheduler+0xd4>)
 8004528:	f04f 32ff 	mov.w	r2, #4294967295
 800452c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800452e:	4b14      	ldr	r3, [pc, #80]	; (8004580 <vTaskStartScheduler+0xd8>)
 8004530:	2201      	movs	r2, #1
 8004532:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004534:	4b13      	ldr	r3, [pc, #76]	; (8004584 <vTaskStartScheduler+0xdc>)
 8004536:	2200      	movs	r2, #0
 8004538:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800453a:	f001 f9c9 	bl	80058d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800453e:	e00e      	b.n	800455e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004546:	d10a      	bne.n	800455e <vTaskStartScheduler+0xb6>
	__asm volatile
 8004548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	60fb      	str	r3, [r7, #12]
}
 800455a:	bf00      	nop
 800455c:	e7fe      	b.n	800455c <vTaskStartScheduler+0xb4>
}
 800455e:	bf00      	nop
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	080062ac 	.word	0x080062ac
 800456c:	08004bad 	.word	0x08004bad
 8004570:	20000dc4 	.word	0x20000dc4
 8004574:	200008cc 	.word	0x200008cc
 8004578:	2000005c 	.word	0x2000005c
 800457c:	20000dc0 	.word	0x20000dc0
 8004580:	20000dac 	.word	0x20000dac
 8004584:	20000da4 	.word	0x20000da4

08004588 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800458c:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <vTaskSuspendAll+0x18>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	3301      	adds	r3, #1
 8004592:	4a03      	ldr	r2, [pc, #12]	; (80045a0 <vTaskSuspendAll+0x18>)
 8004594:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004596:	bf00      	nop
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	20000dc8 	.word	0x20000dc8

080045a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045b2:	4b42      	ldr	r3, [pc, #264]	; (80046bc <xTaskResumeAll+0x118>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10a      	bne.n	80045d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80045ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	603b      	str	r3, [r7, #0]
}
 80045cc:	bf00      	nop
 80045ce:	e7fe      	b.n	80045ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045d0:	f001 fa20 	bl	8005a14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045d4:	4b39      	ldr	r3, [pc, #228]	; (80046bc <xTaskResumeAll+0x118>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	3b01      	subs	r3, #1
 80045da:	4a38      	ldr	r2, [pc, #224]	; (80046bc <xTaskResumeAll+0x118>)
 80045dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045de:	4b37      	ldr	r3, [pc, #220]	; (80046bc <xTaskResumeAll+0x118>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d162      	bne.n	80046ac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045e6:	4b36      	ldr	r3, [pc, #216]	; (80046c0 <xTaskResumeAll+0x11c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d05e      	beq.n	80046ac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045ee:	e02f      	b.n	8004650 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045f0:	4b34      	ldr	r3, [pc, #208]	; (80046c4 <xTaskResumeAll+0x120>)
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	3318      	adds	r3, #24
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fe fd2f 	bl	8003060 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	3304      	adds	r3, #4
 8004606:	4618      	mov	r0, r3
 8004608:	f7fe fd2a 	bl	8003060 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004610:	4b2d      	ldr	r3, [pc, #180]	; (80046c8 <xTaskResumeAll+0x124>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d903      	bls.n	8004620 <xTaskResumeAll+0x7c>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	4a2a      	ldr	r2, [pc, #168]	; (80046c8 <xTaskResumeAll+0x124>)
 800461e:	6013      	str	r3, [r2, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004624:	4613      	mov	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4a27      	ldr	r2, [pc, #156]	; (80046cc <xTaskResumeAll+0x128>)
 800462e:	441a      	add	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	3304      	adds	r3, #4
 8004634:	4619      	mov	r1, r3
 8004636:	4610      	mov	r0, r2
 8004638:	f7fe fcb5 	bl	8002fa6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004640:	4b23      	ldr	r3, [pc, #140]	; (80046d0 <xTaskResumeAll+0x12c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004646:	429a      	cmp	r2, r3
 8004648:	d302      	bcc.n	8004650 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800464a:	4b22      	ldr	r3, [pc, #136]	; (80046d4 <xTaskResumeAll+0x130>)
 800464c:	2201      	movs	r2, #1
 800464e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004650:	4b1c      	ldr	r3, [pc, #112]	; (80046c4 <xTaskResumeAll+0x120>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1cb      	bne.n	80045f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800465e:	f000 fb5f 	bl	8004d20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004662:	4b1d      	ldr	r3, [pc, #116]	; (80046d8 <xTaskResumeAll+0x134>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d010      	beq.n	8004690 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800466e:	f000 f847 	bl	8004700 <xTaskIncrementTick>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d002      	beq.n	800467e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004678:	4b16      	ldr	r3, [pc, #88]	; (80046d4 <xTaskResumeAll+0x130>)
 800467a:	2201      	movs	r2, #1
 800467c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	3b01      	subs	r3, #1
 8004682:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1f1      	bne.n	800466e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800468a:	4b13      	ldr	r3, [pc, #76]	; (80046d8 <xTaskResumeAll+0x134>)
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004690:	4b10      	ldr	r3, [pc, #64]	; (80046d4 <xTaskResumeAll+0x130>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d009      	beq.n	80046ac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004698:	2301      	movs	r3, #1
 800469a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800469c:	4b0f      	ldr	r3, [pc, #60]	; (80046dc <xTaskResumeAll+0x138>)
 800469e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046ac:	f001 f9e2 	bl	8005a74 <vPortExitCritical>

	return xAlreadyYielded;
 80046b0:	68bb      	ldr	r3, [r7, #8]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	20000dc8 	.word	0x20000dc8
 80046c0:	20000da0 	.word	0x20000da0
 80046c4:	20000d60 	.word	0x20000d60
 80046c8:	20000da8 	.word	0x20000da8
 80046cc:	200008d0 	.word	0x200008d0
 80046d0:	200008cc 	.word	0x200008cc
 80046d4:	20000db4 	.word	0x20000db4
 80046d8:	20000db0 	.word	0x20000db0
 80046dc:	e000ed04 	.word	0xe000ed04

080046e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80046e6:	4b05      	ldr	r3, [pc, #20]	; (80046fc <xTaskGetTickCount+0x1c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80046ec:	687b      	ldr	r3, [r7, #4]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	20000da4 	.word	0x20000da4

08004700 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004706:	2300      	movs	r3, #0
 8004708:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800470a:	4b4f      	ldr	r3, [pc, #316]	; (8004848 <xTaskIncrementTick+0x148>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	f040 808f 	bne.w	8004832 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004714:	4b4d      	ldr	r3, [pc, #308]	; (800484c <xTaskIncrementTick+0x14c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3301      	adds	r3, #1
 800471a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800471c:	4a4b      	ldr	r2, [pc, #300]	; (800484c <xTaskIncrementTick+0x14c>)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d120      	bne.n	800476a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004728:	4b49      	ldr	r3, [pc, #292]	; (8004850 <xTaskIncrementTick+0x150>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <xTaskIncrementTick+0x48>
	__asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	603b      	str	r3, [r7, #0]
}
 8004744:	bf00      	nop
 8004746:	e7fe      	b.n	8004746 <xTaskIncrementTick+0x46>
 8004748:	4b41      	ldr	r3, [pc, #260]	; (8004850 <xTaskIncrementTick+0x150>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	4b41      	ldr	r3, [pc, #260]	; (8004854 <xTaskIncrementTick+0x154>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a3f      	ldr	r2, [pc, #252]	; (8004850 <xTaskIncrementTick+0x150>)
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	4a3f      	ldr	r2, [pc, #252]	; (8004854 <xTaskIncrementTick+0x154>)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	4b3e      	ldr	r3, [pc, #248]	; (8004858 <xTaskIncrementTick+0x158>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3301      	adds	r3, #1
 8004762:	4a3d      	ldr	r2, [pc, #244]	; (8004858 <xTaskIncrementTick+0x158>)
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	f000 fadb 	bl	8004d20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800476a:	4b3c      	ldr	r3, [pc, #240]	; (800485c <xTaskIncrementTick+0x15c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	429a      	cmp	r2, r3
 8004772:	d349      	bcc.n	8004808 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004774:	4b36      	ldr	r3, [pc, #216]	; (8004850 <xTaskIncrementTick+0x150>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d104      	bne.n	8004788 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800477e:	4b37      	ldr	r3, [pc, #220]	; (800485c <xTaskIncrementTick+0x15c>)
 8004780:	f04f 32ff 	mov.w	r2, #4294967295
 8004784:	601a      	str	r2, [r3, #0]
					break;
 8004786:	e03f      	b.n	8004808 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004788:	4b31      	ldr	r3, [pc, #196]	; (8004850 <xTaskIncrementTick+0x150>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	429a      	cmp	r2, r3
 800479e:	d203      	bcs.n	80047a8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80047a0:	4a2e      	ldr	r2, [pc, #184]	; (800485c <xTaskIncrementTick+0x15c>)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80047a6:	e02f      	b.n	8004808 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	3304      	adds	r3, #4
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fe fc57 	bl	8003060 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d004      	beq.n	80047c4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	3318      	adds	r3, #24
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fe fc4e 	bl	8003060 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c8:	4b25      	ldr	r3, [pc, #148]	; (8004860 <xTaskIncrementTick+0x160>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d903      	bls.n	80047d8 <xTaskIncrementTick+0xd8>
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	4a22      	ldr	r2, [pc, #136]	; (8004860 <xTaskIncrementTick+0x160>)
 80047d6:	6013      	str	r3, [r2, #0]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047dc:	4613      	mov	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4a1f      	ldr	r2, [pc, #124]	; (8004864 <xTaskIncrementTick+0x164>)
 80047e6:	441a      	add	r2, r3
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	3304      	adds	r3, #4
 80047ec:	4619      	mov	r1, r3
 80047ee:	4610      	mov	r0, r2
 80047f0:	f7fe fbd9 	bl	8002fa6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f8:	4b1b      	ldr	r3, [pc, #108]	; (8004868 <xTaskIncrementTick+0x168>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fe:	429a      	cmp	r2, r3
 8004800:	d3b8      	bcc.n	8004774 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004802:	2301      	movs	r3, #1
 8004804:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004806:	e7b5      	b.n	8004774 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004808:	4b17      	ldr	r3, [pc, #92]	; (8004868 <xTaskIncrementTick+0x168>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800480e:	4915      	ldr	r1, [pc, #84]	; (8004864 <xTaskIncrementTick+0x164>)
 8004810:	4613      	mov	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d901      	bls.n	8004824 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004820:	2301      	movs	r3, #1
 8004822:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004824:	4b11      	ldr	r3, [pc, #68]	; (800486c <xTaskIncrementTick+0x16c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d007      	beq.n	800483c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800482c:	2301      	movs	r3, #1
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	e004      	b.n	800483c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004832:	4b0f      	ldr	r3, [pc, #60]	; (8004870 <xTaskIncrementTick+0x170>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3301      	adds	r3, #1
 8004838:	4a0d      	ldr	r2, [pc, #52]	; (8004870 <xTaskIncrementTick+0x170>)
 800483a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800483c:	697b      	ldr	r3, [r7, #20]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	20000dc8 	.word	0x20000dc8
 800484c:	20000da4 	.word	0x20000da4
 8004850:	20000d58 	.word	0x20000d58
 8004854:	20000d5c 	.word	0x20000d5c
 8004858:	20000db8 	.word	0x20000db8
 800485c:	20000dc0 	.word	0x20000dc0
 8004860:	20000da8 	.word	0x20000da8
 8004864:	200008d0 	.word	0x200008d0
 8004868:	200008cc 	.word	0x200008cc
 800486c:	20000db4 	.word	0x20000db4
 8004870:	20000db0 	.word	0x20000db0

08004874 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800487a:	4b2a      	ldr	r3, [pc, #168]	; (8004924 <vTaskSwitchContext+0xb0>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004882:	4b29      	ldr	r3, [pc, #164]	; (8004928 <vTaskSwitchContext+0xb4>)
 8004884:	2201      	movs	r2, #1
 8004886:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004888:	e046      	b.n	8004918 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800488a:	4b27      	ldr	r3, [pc, #156]	; (8004928 <vTaskSwitchContext+0xb4>)
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004890:	4b26      	ldr	r3, [pc, #152]	; (800492c <vTaskSwitchContext+0xb8>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	e010      	b.n	80048ba <vTaskSwitchContext+0x46>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10a      	bne.n	80048b4 <vTaskSwitchContext+0x40>
	__asm volatile
 800489e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	607b      	str	r3, [r7, #4]
}
 80048b0:	bf00      	nop
 80048b2:	e7fe      	b.n	80048b2 <vTaskSwitchContext+0x3e>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	491d      	ldr	r1, [pc, #116]	; (8004930 <vTaskSwitchContext+0xbc>)
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	4613      	mov	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	440b      	add	r3, r1
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0e4      	beq.n	8004898 <vTaskSwitchContext+0x24>
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	4613      	mov	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4a15      	ldr	r2, [pc, #84]	; (8004930 <vTaskSwitchContext+0xbc>)
 80048da:	4413      	add	r3, r2
 80048dc:	60bb      	str	r3, [r7, #8]
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	605a      	str	r2, [r3, #4]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	3308      	adds	r3, #8
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d104      	bne.n	80048fe <vTaskSwitchContext+0x8a>
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	605a      	str	r2, [r3, #4]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4a0b      	ldr	r2, [pc, #44]	; (8004934 <vTaskSwitchContext+0xc0>)
 8004906:	6013      	str	r3, [r2, #0]
 8004908:	4a08      	ldr	r2, [pc, #32]	; (800492c <vTaskSwitchContext+0xb8>)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800490e:	4b09      	ldr	r3, [pc, #36]	; (8004934 <vTaskSwitchContext+0xc0>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	3354      	adds	r3, #84	; 0x54
 8004914:	4a08      	ldr	r2, [pc, #32]	; (8004938 <vTaskSwitchContext+0xc4>)
 8004916:	6013      	str	r3, [r2, #0]
}
 8004918:	bf00      	nop
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	20000dc8 	.word	0x20000dc8
 8004928:	20000db4 	.word	0x20000db4
 800492c:	20000da8 	.word	0x20000da8
 8004930:	200008d0 	.word	0x200008d0
 8004934:	200008cc 	.word	0x200008cc
 8004938:	2000005c 	.word	0x2000005c

0800493c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10a      	bne.n	8004962 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800494c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	60fb      	str	r3, [r7, #12]
}
 800495e:	bf00      	nop
 8004960:	e7fe      	b.n	8004960 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004962:	4b07      	ldr	r3, [pc, #28]	; (8004980 <vTaskPlaceOnEventList+0x44>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	3318      	adds	r3, #24
 8004968:	4619      	mov	r1, r3
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fe fb3f 	bl	8002fee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004970:	2101      	movs	r1, #1
 8004972:	6838      	ldr	r0, [r7, #0]
 8004974:	f000 fb7e 	bl	8005074 <prvAddCurrentTaskToDelayedList>
}
 8004978:	bf00      	nop
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	200008cc 	.word	0x200008cc

08004984 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10a      	bne.n	80049ac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499a:	f383 8811 	msr	BASEPRI, r3
 800499e:	f3bf 8f6f 	isb	sy
 80049a2:	f3bf 8f4f 	dsb	sy
 80049a6:	617b      	str	r3, [r7, #20]
}
 80049a8:	bf00      	nop
 80049aa:	e7fe      	b.n	80049aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049ac:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3318      	adds	r3, #24
 80049b2:	4619      	mov	r1, r3
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f7fe faf6 	bl	8002fa6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80049c0:	f04f 33ff 	mov.w	r3, #4294967295
 80049c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	68b8      	ldr	r0, [r7, #8]
 80049ca:	f000 fb53 	bl	8005074 <prvAddCurrentTaskToDelayedList>
	}
 80049ce:	bf00      	nop
 80049d0:	3718      	adds	r7, #24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	200008cc 	.word	0x200008cc

080049dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10a      	bne.n	8004a08 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	60fb      	str	r3, [r7, #12]
}
 8004a04:	bf00      	nop
 8004a06:	e7fe      	b.n	8004a06 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	3318      	adds	r3, #24
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7fe fb27 	bl	8003060 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a12:	4b1e      	ldr	r3, [pc, #120]	; (8004a8c <xTaskRemoveFromEventList+0xb0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d11d      	bne.n	8004a56 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fe fb1e 	bl	8003060 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a28:	4b19      	ldr	r3, [pc, #100]	; (8004a90 <xTaskRemoveFromEventList+0xb4>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d903      	bls.n	8004a38 <xTaskRemoveFromEventList+0x5c>
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a34:	4a16      	ldr	r2, [pc, #88]	; (8004a90 <xTaskRemoveFromEventList+0xb4>)
 8004a36:	6013      	str	r3, [r2, #0]
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4a13      	ldr	r2, [pc, #76]	; (8004a94 <xTaskRemoveFromEventList+0xb8>)
 8004a46:	441a      	add	r2, r3
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4610      	mov	r0, r2
 8004a50:	f7fe faa9 	bl	8002fa6 <vListInsertEnd>
 8004a54:	e005      	b.n	8004a62 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	3318      	adds	r3, #24
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	480e      	ldr	r0, [pc, #56]	; (8004a98 <xTaskRemoveFromEventList+0xbc>)
 8004a5e:	f7fe faa2 	bl	8002fa6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a66:	4b0d      	ldr	r3, [pc, #52]	; (8004a9c <xTaskRemoveFromEventList+0xc0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d905      	bls.n	8004a7c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a70:	2301      	movs	r3, #1
 8004a72:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a74:	4b0a      	ldr	r3, [pc, #40]	; (8004aa0 <xTaskRemoveFromEventList+0xc4>)
 8004a76:	2201      	movs	r2, #1
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	e001      	b.n	8004a80 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a80:	697b      	ldr	r3, [r7, #20]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3718      	adds	r7, #24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20000dc8 	.word	0x20000dc8
 8004a90:	20000da8 	.word	0x20000da8
 8004a94:	200008d0 	.word	0x200008d0
 8004a98:	20000d60 	.word	0x20000d60
 8004a9c:	200008cc 	.word	0x200008cc
 8004aa0:	20000db4 	.word	0x20000db4

08004aa4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004aac:	4b06      	ldr	r3, [pc, #24]	; (8004ac8 <vTaskInternalSetTimeOutState+0x24>)
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ab4:	4b05      	ldr	r3, [pc, #20]	; (8004acc <vTaskInternalSetTimeOutState+0x28>)
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	605a      	str	r2, [r3, #4]
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	20000db8 	.word	0x20000db8
 8004acc:	20000da4 	.word	0x20000da4

08004ad0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b088      	sub	sp, #32
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10a      	bne.n	8004af6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	613b      	str	r3, [r7, #16]
}
 8004af2:	bf00      	nop
 8004af4:	e7fe      	b.n	8004af4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10a      	bne.n	8004b12 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b00:	f383 8811 	msr	BASEPRI, r3
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	60fb      	str	r3, [r7, #12]
}
 8004b0e:	bf00      	nop
 8004b10:	e7fe      	b.n	8004b10 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004b12:	f000 ff7f 	bl	8005a14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b16:	4b1d      	ldr	r3, [pc, #116]	; (8004b8c <xTaskCheckForTimeOut+0xbc>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	69ba      	ldr	r2, [r7, #24]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2e:	d102      	bne.n	8004b36 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b30:	2300      	movs	r3, #0
 8004b32:	61fb      	str	r3, [r7, #28]
 8004b34:	e023      	b.n	8004b7e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	4b15      	ldr	r3, [pc, #84]	; (8004b90 <xTaskCheckForTimeOut+0xc0>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d007      	beq.n	8004b52 <xTaskCheckForTimeOut+0x82>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d302      	bcc.n	8004b52 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	61fb      	str	r3, [r7, #28]
 8004b50:	e015      	b.n	8004b7e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d20b      	bcs.n	8004b74 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	1ad2      	subs	r2, r2, r3
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f7ff ff9b 	bl	8004aa4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61fb      	str	r3, [r7, #28]
 8004b72:	e004      	b.n	8004b7e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	2200      	movs	r2, #0
 8004b78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b7e:	f000 ff79 	bl	8005a74 <vPortExitCritical>

	return xReturn;
 8004b82:	69fb      	ldr	r3, [r7, #28]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3720      	adds	r7, #32
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	20000da4 	.word	0x20000da4
 8004b90:	20000db8 	.word	0x20000db8

08004b94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b98:	4b03      	ldr	r3, [pc, #12]	; (8004ba8 <vTaskMissedYield+0x14>)
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]
}
 8004b9e:	bf00      	nop
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	20000db4 	.word	0x20000db4

08004bac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004bb4:	f000 f852 	bl	8004c5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bb8:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <prvIdleTask+0x28>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d9f9      	bls.n	8004bb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004bc0:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <prvIdleTask+0x2c>)
 8004bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004bd0:	e7f0      	b.n	8004bb4 <prvIdleTask+0x8>
 8004bd2:	bf00      	nop
 8004bd4:	200008d0 	.word	0x200008d0
 8004bd8:	e000ed04 	.word	0xe000ed04

08004bdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004be2:	2300      	movs	r3, #0
 8004be4:	607b      	str	r3, [r7, #4]
 8004be6:	e00c      	b.n	8004c02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	4613      	mov	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4a12      	ldr	r2, [pc, #72]	; (8004c3c <prvInitialiseTaskLists+0x60>)
 8004bf4:	4413      	add	r3, r2
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fe f9a8 	bl	8002f4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	607b      	str	r3, [r7, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b37      	cmp	r3, #55	; 0x37
 8004c06:	d9ef      	bls.n	8004be8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c08:	480d      	ldr	r0, [pc, #52]	; (8004c40 <prvInitialiseTaskLists+0x64>)
 8004c0a:	f7fe f99f 	bl	8002f4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c0e:	480d      	ldr	r0, [pc, #52]	; (8004c44 <prvInitialiseTaskLists+0x68>)
 8004c10:	f7fe f99c 	bl	8002f4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c14:	480c      	ldr	r0, [pc, #48]	; (8004c48 <prvInitialiseTaskLists+0x6c>)
 8004c16:	f7fe f999 	bl	8002f4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c1a:	480c      	ldr	r0, [pc, #48]	; (8004c4c <prvInitialiseTaskLists+0x70>)
 8004c1c:	f7fe f996 	bl	8002f4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c20:	480b      	ldr	r0, [pc, #44]	; (8004c50 <prvInitialiseTaskLists+0x74>)
 8004c22:	f7fe f993 	bl	8002f4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c26:	4b0b      	ldr	r3, [pc, #44]	; (8004c54 <prvInitialiseTaskLists+0x78>)
 8004c28:	4a05      	ldr	r2, [pc, #20]	; (8004c40 <prvInitialiseTaskLists+0x64>)
 8004c2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	; (8004c58 <prvInitialiseTaskLists+0x7c>)
 8004c2e:	4a05      	ldr	r2, [pc, #20]	; (8004c44 <prvInitialiseTaskLists+0x68>)
 8004c30:	601a      	str	r2, [r3, #0]
}
 8004c32:	bf00      	nop
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	200008d0 	.word	0x200008d0
 8004c40:	20000d30 	.word	0x20000d30
 8004c44:	20000d44 	.word	0x20000d44
 8004c48:	20000d60 	.word	0x20000d60
 8004c4c:	20000d74 	.word	0x20000d74
 8004c50:	20000d8c 	.word	0x20000d8c
 8004c54:	20000d58 	.word	0x20000d58
 8004c58:	20000d5c 	.word	0x20000d5c

08004c5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c62:	e019      	b.n	8004c98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c64:	f000 fed6 	bl	8005a14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c68:	4b10      	ldr	r3, [pc, #64]	; (8004cac <prvCheckTasksWaitingTermination+0x50>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3304      	adds	r3, #4
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fe f9f3 	bl	8003060 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c7a:	4b0d      	ldr	r3, [pc, #52]	; (8004cb0 <prvCheckTasksWaitingTermination+0x54>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	4a0b      	ldr	r2, [pc, #44]	; (8004cb0 <prvCheckTasksWaitingTermination+0x54>)
 8004c82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c84:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <prvCheckTasksWaitingTermination+0x58>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	4a0a      	ldr	r2, [pc, #40]	; (8004cb4 <prvCheckTasksWaitingTermination+0x58>)
 8004c8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c8e:	f000 fef1 	bl	8005a74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f810 	bl	8004cb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c98:	4b06      	ldr	r3, [pc, #24]	; (8004cb4 <prvCheckTasksWaitingTermination+0x58>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1e1      	bne.n	8004c64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ca0:	bf00      	nop
 8004ca2:	bf00      	nop
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20000d74 	.word	0x20000d74
 8004cb0:	20000da0 	.word	0x20000da0
 8004cb4:	20000d88 	.word	0x20000d88

08004cb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	3354      	adds	r3, #84	; 0x54
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f001 f9b9 	bl	800603c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d108      	bne.n	8004ce6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f001 f889 	bl	8005df0 <vPortFree>
				vPortFree( pxTCB );
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f001 f886 	bl	8005df0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ce4:	e018      	b.n	8004d18 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d103      	bne.n	8004cf8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f001 f87d 	bl	8005df0 <vPortFree>
	}
 8004cf6:	e00f      	b.n	8004d18 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d00a      	beq.n	8004d18 <prvDeleteTCB+0x60>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	60fb      	str	r3, [r7, #12]
}
 8004d14:	bf00      	nop
 8004d16:	e7fe      	b.n	8004d16 <prvDeleteTCB+0x5e>
	}
 8004d18:	bf00      	nop
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d26:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <prvResetNextTaskUnblockTime+0x38>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d104      	bne.n	8004d3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d30:	4b0a      	ldr	r3, [pc, #40]	; (8004d5c <prvResetNextTaskUnblockTime+0x3c>)
 8004d32:	f04f 32ff 	mov.w	r2, #4294967295
 8004d36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d38:	e008      	b.n	8004d4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d3a:	4b07      	ldr	r3, [pc, #28]	; (8004d58 <prvResetNextTaskUnblockTime+0x38>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	4a04      	ldr	r2, [pc, #16]	; (8004d5c <prvResetNextTaskUnblockTime+0x3c>)
 8004d4a:	6013      	str	r3, [r2, #0]
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	20000d58 	.word	0x20000d58
 8004d5c:	20000dc0 	.word	0x20000dc0

08004d60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d66:	4b0b      	ldr	r3, [pc, #44]	; (8004d94 <xTaskGetSchedulerState+0x34>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d102      	bne.n	8004d74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	607b      	str	r3, [r7, #4]
 8004d72:	e008      	b.n	8004d86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d74:	4b08      	ldr	r3, [pc, #32]	; (8004d98 <xTaskGetSchedulerState+0x38>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d102      	bne.n	8004d82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	607b      	str	r3, [r7, #4]
 8004d80:	e001      	b.n	8004d86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d82:	2300      	movs	r3, #0
 8004d84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d86:	687b      	ldr	r3, [r7, #4]
	}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	20000dac 	.word	0x20000dac
 8004d98:	20000dc8 	.word	0x20000dc8

08004d9c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d051      	beq.n	8004e56 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db6:	4b2a      	ldr	r3, [pc, #168]	; (8004e60 <xTaskPriorityInherit+0xc4>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d241      	bcs.n	8004e44 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	db06      	blt.n	8004dd6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dc8:	4b25      	ldr	r3, [pc, #148]	; (8004e60 <xTaskPriorityInherit+0xc4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	6959      	ldr	r1, [r3, #20]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dde:	4613      	mov	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4a1f      	ldr	r2, [pc, #124]	; (8004e64 <xTaskPriorityInherit+0xc8>)
 8004de8:	4413      	add	r3, r2
 8004dea:	4299      	cmp	r1, r3
 8004dec:	d122      	bne.n	8004e34 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	3304      	adds	r3, #4
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7fe f934 	bl	8003060 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004df8:	4b19      	ldr	r3, [pc, #100]	; (8004e60 <xTaskPriorityInherit+0xc4>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e06:	4b18      	ldr	r3, [pc, #96]	; (8004e68 <xTaskPriorityInherit+0xcc>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d903      	bls.n	8004e16 <xTaskPriorityInherit+0x7a>
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e12:	4a15      	ldr	r2, [pc, #84]	; (8004e68 <xTaskPriorityInherit+0xcc>)
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4413      	add	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4a10      	ldr	r2, [pc, #64]	; (8004e64 <xTaskPriorityInherit+0xc8>)
 8004e24:	441a      	add	r2, r3
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	3304      	adds	r3, #4
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	f7fe f8ba 	bl	8002fa6 <vListInsertEnd>
 8004e32:	e004      	b.n	8004e3e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e34:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <xTaskPriorityInherit+0xc4>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	60fb      	str	r3, [r7, #12]
 8004e42:	e008      	b.n	8004e56 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e48:	4b05      	ldr	r3, [pc, #20]	; (8004e60 <xTaskPriorityInherit+0xc4>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d201      	bcs.n	8004e56 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004e52:	2301      	movs	r3, #1
 8004e54:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e56:	68fb      	ldr	r3, [r7, #12]
	}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	200008cc 	.word	0x200008cc
 8004e64:	200008d0 	.word	0x200008d0
 8004e68:	20000da8 	.word	0x20000da8

08004e6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d056      	beq.n	8004f30 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e82:	4b2e      	ldr	r3, [pc, #184]	; (8004f3c <xTaskPriorityDisinherit+0xd0>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d00a      	beq.n	8004ea2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	60fb      	str	r3, [r7, #12]
}
 8004e9e:	bf00      	nop
 8004ea0:	e7fe      	b.n	8004ea0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10a      	bne.n	8004ec0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	60bb      	str	r3, [r7, #8]
}
 8004ebc:	bf00      	nop
 8004ebe:	e7fe      	b.n	8004ebe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec4:	1e5a      	subs	r2, r3, #1
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d02c      	beq.n	8004f30 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d128      	bne.n	8004f30 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fe f8bc 	bl	8003060 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f00:	4b0f      	ldr	r3, [pc, #60]	; (8004f40 <xTaskPriorityDisinherit+0xd4>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d903      	bls.n	8004f10 <xTaskPriorityDisinherit+0xa4>
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0c:	4a0c      	ldr	r2, [pc, #48]	; (8004f40 <xTaskPriorityDisinherit+0xd4>)
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4a09      	ldr	r2, [pc, #36]	; (8004f44 <xTaskPriorityDisinherit+0xd8>)
 8004f1e:	441a      	add	r2, r3
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	3304      	adds	r3, #4
 8004f24:	4619      	mov	r1, r3
 8004f26:	4610      	mov	r0, r2
 8004f28:	f7fe f83d 	bl	8002fa6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f30:	697b      	ldr	r3, [r7, #20]
	}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3718      	adds	r7, #24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	200008cc 	.word	0x200008cc
 8004f40:	20000da8 	.word	0x20000da8
 8004f44:	200008d0 	.word	0x200008d0

08004f48 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b088      	sub	sp, #32
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004f56:	2301      	movs	r3, #1
 8004f58:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d06a      	beq.n	8005036 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10a      	bne.n	8004f7e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6c:	f383 8811 	msr	BASEPRI, r3
 8004f70:	f3bf 8f6f 	isb	sy
 8004f74:	f3bf 8f4f 	dsb	sy
 8004f78:	60fb      	str	r3, [r7, #12]
}
 8004f7a:	bf00      	nop
 8004f7c:	e7fe      	b.n	8004f7c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f82:	683a      	ldr	r2, [r7, #0]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d902      	bls.n	8004f8e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	61fb      	str	r3, [r7, #28]
 8004f8c:	e002      	b.n	8004f94 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f92:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	69fa      	ldr	r2, [r7, #28]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d04b      	beq.n	8005036 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d146      	bne.n	8005036 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004fa8:	4b25      	ldr	r3, [pc, #148]	; (8005040 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d10a      	bne.n	8004fc8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	60bb      	str	r3, [r7, #8]
}
 8004fc4:	bf00      	nop
 8004fc6:	e7fe      	b.n	8004fc6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fcc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	69fa      	ldr	r2, [r7, #28]
 8004fd2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	db04      	blt.n	8004fe6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	6959      	ldr	r1, [r3, #20]
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	4613      	mov	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4a13      	ldr	r2, [pc, #76]	; (8005044 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004ff6:	4413      	add	r3, r2
 8004ff8:	4299      	cmp	r1, r3
 8004ffa:	d11c      	bne.n	8005036 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	3304      	adds	r3, #4
 8005000:	4618      	mov	r0, r3
 8005002:	f7fe f82d 	bl	8003060 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500a:	4b0f      	ldr	r3, [pc, #60]	; (8005048 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	429a      	cmp	r2, r3
 8005010:	d903      	bls.n	800501a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005016:	4a0c      	ldr	r2, [pc, #48]	; (8005048 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800501e:	4613      	mov	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4a07      	ldr	r2, [pc, #28]	; (8005044 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005028:	441a      	add	r2, r3
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	3304      	adds	r3, #4
 800502e:	4619      	mov	r1, r3
 8005030:	4610      	mov	r0, r2
 8005032:	f7fd ffb8 	bl	8002fa6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005036:	bf00      	nop
 8005038:	3720      	adds	r7, #32
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	200008cc 	.word	0x200008cc
 8005044:	200008d0 	.word	0x200008d0
 8005048:	20000da8 	.word	0x20000da8

0800504c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005050:	4b07      	ldr	r3, [pc, #28]	; (8005070 <pvTaskIncrementMutexHeldCount+0x24>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d004      	beq.n	8005062 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005058:	4b05      	ldr	r3, [pc, #20]	; (8005070 <pvTaskIncrementMutexHeldCount+0x24>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800505e:	3201      	adds	r2, #1
 8005060:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005062:	4b03      	ldr	r3, [pc, #12]	; (8005070 <pvTaskIncrementMutexHeldCount+0x24>)
 8005064:	681b      	ldr	r3, [r3, #0]
	}
 8005066:	4618      	mov	r0, r3
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	200008cc 	.word	0x200008cc

08005074 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800507e:	4b21      	ldr	r3, [pc, #132]	; (8005104 <prvAddCurrentTaskToDelayedList+0x90>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005084:	4b20      	ldr	r3, [pc, #128]	; (8005108 <prvAddCurrentTaskToDelayedList+0x94>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3304      	adds	r3, #4
 800508a:	4618      	mov	r0, r3
 800508c:	f7fd ffe8 	bl	8003060 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005096:	d10a      	bne.n	80050ae <prvAddCurrentTaskToDelayedList+0x3a>
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d007      	beq.n	80050ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800509e:	4b1a      	ldr	r3, [pc, #104]	; (8005108 <prvAddCurrentTaskToDelayedList+0x94>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	3304      	adds	r3, #4
 80050a4:	4619      	mov	r1, r3
 80050a6:	4819      	ldr	r0, [pc, #100]	; (800510c <prvAddCurrentTaskToDelayedList+0x98>)
 80050a8:	f7fd ff7d 	bl	8002fa6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050ac:	e026      	b.n	80050fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4413      	add	r3, r2
 80050b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050b6:	4b14      	ldr	r3, [pc, #80]	; (8005108 <prvAddCurrentTaskToDelayedList+0x94>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d209      	bcs.n	80050da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050c6:	4b12      	ldr	r3, [pc, #72]	; (8005110 <prvAddCurrentTaskToDelayedList+0x9c>)
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	4b0f      	ldr	r3, [pc, #60]	; (8005108 <prvAddCurrentTaskToDelayedList+0x94>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3304      	adds	r3, #4
 80050d0:	4619      	mov	r1, r3
 80050d2:	4610      	mov	r0, r2
 80050d4:	f7fd ff8b 	bl	8002fee <vListInsert>
}
 80050d8:	e010      	b.n	80050fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050da:	4b0e      	ldr	r3, [pc, #56]	; (8005114 <prvAddCurrentTaskToDelayedList+0xa0>)
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	4b0a      	ldr	r3, [pc, #40]	; (8005108 <prvAddCurrentTaskToDelayedList+0x94>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3304      	adds	r3, #4
 80050e4:	4619      	mov	r1, r3
 80050e6:	4610      	mov	r0, r2
 80050e8:	f7fd ff81 	bl	8002fee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050ec:	4b0a      	ldr	r3, [pc, #40]	; (8005118 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d202      	bcs.n	80050fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80050f6:	4a08      	ldr	r2, [pc, #32]	; (8005118 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	6013      	str	r3, [r2, #0]
}
 80050fc:	bf00      	nop
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	20000da4 	.word	0x20000da4
 8005108:	200008cc 	.word	0x200008cc
 800510c:	20000d8c 	.word	0x20000d8c
 8005110:	20000d5c 	.word	0x20000d5c
 8005114:	20000d58 	.word	0x20000d58
 8005118:	20000dc0 	.word	0x20000dc0

0800511c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b08a      	sub	sp, #40	; 0x28
 8005120:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005122:	2300      	movs	r3, #0
 8005124:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005126:	f000 fb07 	bl	8005738 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800512a:	4b1c      	ldr	r3, [pc, #112]	; (800519c <xTimerCreateTimerTask+0x80>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d021      	beq.n	8005176 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005132:	2300      	movs	r3, #0
 8005134:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005136:	2300      	movs	r3, #0
 8005138:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800513a:	1d3a      	adds	r2, r7, #4
 800513c:	f107 0108 	add.w	r1, r7, #8
 8005140:	f107 030c 	add.w	r3, r7, #12
 8005144:	4618      	mov	r0, r3
 8005146:	f7fd fee7 	bl	8002f18 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800514a:	6879      	ldr	r1, [r7, #4]
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	9202      	str	r2, [sp, #8]
 8005152:	9301      	str	r3, [sp, #4]
 8005154:	2302      	movs	r3, #2
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	2300      	movs	r3, #0
 800515a:	460a      	mov	r2, r1
 800515c:	4910      	ldr	r1, [pc, #64]	; (80051a0 <xTimerCreateTimerTask+0x84>)
 800515e:	4811      	ldr	r0, [pc, #68]	; (80051a4 <xTimerCreateTimerTask+0x88>)
 8005160:	f7fe ffb6 	bl	80040d0 <xTaskCreateStatic>
 8005164:	4603      	mov	r3, r0
 8005166:	4a10      	ldr	r2, [pc, #64]	; (80051a8 <xTimerCreateTimerTask+0x8c>)
 8005168:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800516a:	4b0f      	ldr	r3, [pc, #60]	; (80051a8 <xTimerCreateTimerTask+0x8c>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005172:	2301      	movs	r3, #1
 8005174:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10a      	bne.n	8005192 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800517c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005180:	f383 8811 	msr	BASEPRI, r3
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	613b      	str	r3, [r7, #16]
}
 800518e:	bf00      	nop
 8005190:	e7fe      	b.n	8005190 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005192:	697b      	ldr	r3, [r7, #20]
}
 8005194:	4618      	mov	r0, r3
 8005196:	3718      	adds	r7, #24
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	20000dfc 	.word	0x20000dfc
 80051a0:	080062b4 	.word	0x080062b4
 80051a4:	080052e1 	.word	0x080052e1
 80051a8:	20000e00 	.word	0x20000e00

080051ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08a      	sub	sp, #40	; 0x28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80051ba:	2300      	movs	r3, #0
 80051bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10a      	bne.n	80051da <xTimerGenericCommand+0x2e>
	__asm volatile
 80051c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	623b      	str	r3, [r7, #32]
}
 80051d6:	bf00      	nop
 80051d8:	e7fe      	b.n	80051d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80051da:	4b1a      	ldr	r3, [pc, #104]	; (8005244 <xTimerGenericCommand+0x98>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d02a      	beq.n	8005238 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2b05      	cmp	r3, #5
 80051f2:	dc18      	bgt.n	8005226 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80051f4:	f7ff fdb4 	bl	8004d60 <xTaskGetSchedulerState>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d109      	bne.n	8005212 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051fe:	4b11      	ldr	r3, [pc, #68]	; (8005244 <xTimerGenericCommand+0x98>)
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	f107 0110 	add.w	r1, r7, #16
 8005206:	2300      	movs	r3, #0
 8005208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800520a:	f7fe f8fb 	bl	8003404 <xQueueGenericSend>
 800520e:	6278      	str	r0, [r7, #36]	; 0x24
 8005210:	e012      	b.n	8005238 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005212:	4b0c      	ldr	r3, [pc, #48]	; (8005244 <xTimerGenericCommand+0x98>)
 8005214:	6818      	ldr	r0, [r3, #0]
 8005216:	f107 0110 	add.w	r1, r7, #16
 800521a:	2300      	movs	r3, #0
 800521c:	2200      	movs	r2, #0
 800521e:	f7fe f8f1 	bl	8003404 <xQueueGenericSend>
 8005222:	6278      	str	r0, [r7, #36]	; 0x24
 8005224:	e008      	b.n	8005238 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005226:	4b07      	ldr	r3, [pc, #28]	; (8005244 <xTimerGenericCommand+0x98>)
 8005228:	6818      	ldr	r0, [r3, #0]
 800522a:	f107 0110 	add.w	r1, r7, #16
 800522e:	2300      	movs	r3, #0
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	f7fe f9e5 	bl	8003600 <xQueueGenericSendFromISR>
 8005236:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800523a:	4618      	mov	r0, r3
 800523c:	3728      	adds	r7, #40	; 0x28
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	20000dfc 	.word	0x20000dfc

08005248 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b088      	sub	sp, #32
 800524c:	af02      	add	r7, sp, #8
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005252:	4b22      	ldr	r3, [pc, #136]	; (80052dc <prvProcessExpiredTimer+0x94>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	3304      	adds	r3, #4
 8005260:	4618      	mov	r0, r3
 8005262:	f7fd fefd 	bl	8003060 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	d022      	beq.n	80052ba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	699a      	ldr	r2, [r3, #24]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	18d1      	adds	r1, r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	6978      	ldr	r0, [r7, #20]
 8005282:	f000 f8d1 	bl	8005428 <prvInsertTimerInActiveList>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d01f      	beq.n	80052cc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800528c:	2300      	movs	r3, #0
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	2300      	movs	r3, #0
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	2100      	movs	r1, #0
 8005296:	6978      	ldr	r0, [r7, #20]
 8005298:	f7ff ff88 	bl	80051ac <xTimerGenericCommand>
 800529c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d113      	bne.n	80052cc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80052a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	60fb      	str	r3, [r7, #12]
}
 80052b6:	bf00      	nop
 80052b8:	e7fe      	b.n	80052b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052c0:	f023 0301 	bic.w	r3, r3, #1
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	6978      	ldr	r0, [r7, #20]
 80052d2:	4798      	blx	r3
}
 80052d4:	bf00      	nop
 80052d6:	3718      	adds	r7, #24
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	20000df4 	.word	0x20000df4

080052e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052e8:	f107 0308 	add.w	r3, r7, #8
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 f857 	bl	80053a0 <prvGetNextExpireTime>
 80052f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4619      	mov	r1, r3
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 f803 	bl	8005304 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80052fe:	f000 f8d5 	bl	80054ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005302:	e7f1      	b.n	80052e8 <prvTimerTask+0x8>

08005304 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800530e:	f7ff f93b 	bl	8004588 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005312:	f107 0308 	add.w	r3, r7, #8
 8005316:	4618      	mov	r0, r3
 8005318:	f000 f866 	bl	80053e8 <prvSampleTimeNow>
 800531c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d130      	bne.n	8005386 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10a      	bne.n	8005340 <prvProcessTimerOrBlockTask+0x3c>
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	429a      	cmp	r2, r3
 8005330:	d806      	bhi.n	8005340 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005332:	f7ff f937 	bl	80045a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005336:	68f9      	ldr	r1, [r7, #12]
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f7ff ff85 	bl	8005248 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800533e:	e024      	b.n	800538a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d008      	beq.n	8005358 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005346:	4b13      	ldr	r3, [pc, #76]	; (8005394 <prvProcessTimerOrBlockTask+0x90>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <prvProcessTimerOrBlockTask+0x50>
 8005350:	2301      	movs	r3, #1
 8005352:	e000      	b.n	8005356 <prvProcessTimerOrBlockTask+0x52>
 8005354:	2300      	movs	r3, #0
 8005356:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005358:	4b0f      	ldr	r3, [pc, #60]	; (8005398 <prvProcessTimerOrBlockTask+0x94>)
 800535a:	6818      	ldr	r0, [r3, #0]
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	1ad3      	subs	r3, r2, r3
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	4619      	mov	r1, r3
 8005366:	f7fe fe7f 	bl	8004068 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800536a:	f7ff f91b 	bl	80045a4 <xTaskResumeAll>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10a      	bne.n	800538a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005374:	4b09      	ldr	r3, [pc, #36]	; (800539c <prvProcessTimerOrBlockTask+0x98>)
 8005376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	f3bf 8f6f 	isb	sy
}
 8005384:	e001      	b.n	800538a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005386:	f7ff f90d 	bl	80045a4 <xTaskResumeAll>
}
 800538a:	bf00      	nop
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	20000df8 	.word	0x20000df8
 8005398:	20000dfc 	.word	0x20000dfc
 800539c:	e000ed04 	.word	0xe000ed04

080053a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80053a8:	4b0e      	ldr	r3, [pc, #56]	; (80053e4 <prvGetNextExpireTime+0x44>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <prvGetNextExpireTime+0x16>
 80053b2:	2201      	movs	r2, #1
 80053b4:	e000      	b.n	80053b8 <prvGetNextExpireTime+0x18>
 80053b6:	2200      	movs	r2, #0
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d105      	bne.n	80053d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053c4:	4b07      	ldr	r3, [pc, #28]	; (80053e4 <prvGetNextExpireTime+0x44>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	e001      	b.n	80053d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80053d4:	68fb      	ldr	r3, [r7, #12]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	20000df4 	.word	0x20000df4

080053e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80053f0:	f7ff f976 	bl	80046e0 <xTaskGetTickCount>
 80053f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80053f6:	4b0b      	ldr	r3, [pc, #44]	; (8005424 <prvSampleTimeNow+0x3c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d205      	bcs.n	800540c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005400:	f000 f936 	bl	8005670 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	e002      	b.n	8005412 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005412:	4a04      	ldr	r2, [pc, #16]	; (8005424 <prvSampleTimeNow+0x3c>)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005418:	68fb      	ldr	r3, [r7, #12]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	20000e04 	.word	0x20000e04

08005428 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
 8005434:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005436:	2300      	movs	r3, #0
 8005438:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	429a      	cmp	r2, r3
 800544c:	d812      	bhi.n	8005474 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	1ad2      	subs	r2, r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	429a      	cmp	r2, r3
 800545a:	d302      	bcc.n	8005462 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800545c:	2301      	movs	r3, #1
 800545e:	617b      	str	r3, [r7, #20]
 8005460:	e01b      	b.n	800549a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005462:	4b10      	ldr	r3, [pc, #64]	; (80054a4 <prvInsertTimerInActiveList+0x7c>)
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	3304      	adds	r3, #4
 800546a:	4619      	mov	r1, r3
 800546c:	4610      	mov	r0, r2
 800546e:	f7fd fdbe 	bl	8002fee <vListInsert>
 8005472:	e012      	b.n	800549a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	429a      	cmp	r2, r3
 800547a:	d206      	bcs.n	800548a <prvInsertTimerInActiveList+0x62>
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	429a      	cmp	r2, r3
 8005482:	d302      	bcc.n	800548a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005484:	2301      	movs	r3, #1
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	e007      	b.n	800549a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800548a:	4b07      	ldr	r3, [pc, #28]	; (80054a8 <prvInsertTimerInActiveList+0x80>)
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	3304      	adds	r3, #4
 8005492:	4619      	mov	r1, r3
 8005494:	4610      	mov	r0, r2
 8005496:	f7fd fdaa 	bl	8002fee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800549a:	697b      	ldr	r3, [r7, #20]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3718      	adds	r7, #24
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	20000df8 	.word	0x20000df8
 80054a8:	20000df4 	.word	0x20000df4

080054ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b08e      	sub	sp, #56	; 0x38
 80054b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054b2:	e0ca      	b.n	800564a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	da18      	bge.n	80054ec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80054ba:	1d3b      	adds	r3, r7, #4
 80054bc:	3304      	adds	r3, #4
 80054be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80054c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10a      	bne.n	80054dc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	61fb      	str	r3, [r7, #28]
}
 80054d8:	bf00      	nop
 80054da:	e7fe      	b.n	80054da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80054dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054e2:	6850      	ldr	r0, [r2, #4]
 80054e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054e6:	6892      	ldr	r2, [r2, #8]
 80054e8:	4611      	mov	r1, r2
 80054ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f2c0 80ab 	blt.w	800564a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d004      	beq.n	800550a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005502:	3304      	adds	r3, #4
 8005504:	4618      	mov	r0, r3
 8005506:	f7fd fdab 	bl	8003060 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800550a:	463b      	mov	r3, r7
 800550c:	4618      	mov	r0, r3
 800550e:	f7ff ff6b 	bl	80053e8 <prvSampleTimeNow>
 8005512:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b09      	cmp	r3, #9
 8005518:	f200 8096 	bhi.w	8005648 <prvProcessReceivedCommands+0x19c>
 800551c:	a201      	add	r2, pc, #4	; (adr r2, 8005524 <prvProcessReceivedCommands+0x78>)
 800551e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005522:	bf00      	nop
 8005524:	0800554d 	.word	0x0800554d
 8005528:	0800554d 	.word	0x0800554d
 800552c:	0800554d 	.word	0x0800554d
 8005530:	080055c1 	.word	0x080055c1
 8005534:	080055d5 	.word	0x080055d5
 8005538:	0800561f 	.word	0x0800561f
 800553c:	0800554d 	.word	0x0800554d
 8005540:	0800554d 	.word	0x0800554d
 8005544:	080055c1 	.word	0x080055c1
 8005548:	080055d5 	.word	0x080055d5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800554c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005552:	f043 0301 	orr.w	r3, r3, #1
 8005556:	b2da      	uxtb	r2, r3
 8005558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	18d1      	adds	r1, r2, r3
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800556a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800556c:	f7ff ff5c 	bl	8005428 <prvInsertTimerInActiveList>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d069      	beq.n	800564a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800557c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005584:	f003 0304 	and.w	r3, r3, #4
 8005588:	2b00      	cmp	r3, #0
 800558a:	d05e      	beq.n	800564a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	441a      	add	r2, r3
 8005594:	2300      	movs	r3, #0
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	2300      	movs	r3, #0
 800559a:	2100      	movs	r1, #0
 800559c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800559e:	f7ff fe05 	bl	80051ac <xTimerGenericCommand>
 80055a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d14f      	bne.n	800564a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80055aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	61bb      	str	r3, [r7, #24]
}
 80055bc:	bf00      	nop
 80055be:	e7fe      	b.n	80055be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055c6:	f023 0301 	bic.w	r3, r3, #1
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80055d2:	e03a      	b.n	800564a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055da:	f043 0301 	orr.w	r3, r3, #1
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10a      	bne.n	800560a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80055f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	617b      	str	r3, [r7, #20]
}
 8005606:	bf00      	nop
 8005608:	e7fe      	b.n	8005608 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560c:	699a      	ldr	r2, [r3, #24]
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	18d1      	adds	r1, r2, r3
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005618:	f7ff ff06 	bl	8005428 <prvInsertTimerInActiveList>
					break;
 800561c:	e015      	b.n	800564a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800561e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005620:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d103      	bne.n	8005634 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800562c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800562e:	f000 fbdf 	bl	8005df0 <vPortFree>
 8005632:	e00a      	b.n	800564a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005636:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800563a:	f023 0301 	bic.w	r3, r3, #1
 800563e:	b2da      	uxtb	r2, r3
 8005640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005642:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005646:	e000      	b.n	800564a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8005648:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800564a:	4b08      	ldr	r3, [pc, #32]	; (800566c <prvProcessReceivedCommands+0x1c0>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	1d39      	adds	r1, r7, #4
 8005650:	2200      	movs	r2, #0
 8005652:	4618      	mov	r0, r3
 8005654:	f7fe f8fc 	bl	8003850 <xQueueReceive>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	f47f af2a 	bne.w	80054b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005660:	bf00      	nop
 8005662:	bf00      	nop
 8005664:	3730      	adds	r7, #48	; 0x30
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	20000dfc 	.word	0x20000dfc

08005670 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b088      	sub	sp, #32
 8005674:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005676:	e048      	b.n	800570a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005678:	4b2d      	ldr	r3, [pc, #180]	; (8005730 <prvSwitchTimerLists+0xc0>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005682:	4b2b      	ldr	r3, [pc, #172]	; (8005730 <prvSwitchTimerLists+0xc0>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3304      	adds	r3, #4
 8005690:	4618      	mov	r0, r3
 8005692:	f7fd fce5 	bl	8003060 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d02e      	beq.n	800570a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	4413      	add	r3, r2
 80056b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d90e      	bls.n	80056dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056ca:	4b19      	ldr	r3, [pc, #100]	; (8005730 <prvSwitchTimerLists+0xc0>)
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3304      	adds	r3, #4
 80056d2:	4619      	mov	r1, r3
 80056d4:	4610      	mov	r0, r2
 80056d6:	f7fd fc8a 	bl	8002fee <vListInsert>
 80056da:	e016      	b.n	800570a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056dc:	2300      	movs	r3, #0
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	2300      	movs	r3, #0
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	2100      	movs	r1, #0
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f7ff fd60 	bl	80051ac <xTimerGenericCommand>
 80056ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d10a      	bne.n	800570a <prvSwitchTimerLists+0x9a>
	__asm volatile
 80056f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	603b      	str	r3, [r7, #0]
}
 8005706:	bf00      	nop
 8005708:	e7fe      	b.n	8005708 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800570a:	4b09      	ldr	r3, [pc, #36]	; (8005730 <prvSwitchTimerLists+0xc0>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1b1      	bne.n	8005678 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005714:	4b06      	ldr	r3, [pc, #24]	; (8005730 <prvSwitchTimerLists+0xc0>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800571a:	4b06      	ldr	r3, [pc, #24]	; (8005734 <prvSwitchTimerLists+0xc4>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a04      	ldr	r2, [pc, #16]	; (8005730 <prvSwitchTimerLists+0xc0>)
 8005720:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005722:	4a04      	ldr	r2, [pc, #16]	; (8005734 <prvSwitchTimerLists+0xc4>)
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	6013      	str	r3, [r2, #0]
}
 8005728:	bf00      	nop
 800572a:	3718      	adds	r7, #24
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	20000df4 	.word	0x20000df4
 8005734:	20000df8 	.word	0x20000df8

08005738 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800573e:	f000 f969 	bl	8005a14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005742:	4b15      	ldr	r3, [pc, #84]	; (8005798 <prvCheckForValidListAndQueue+0x60>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d120      	bne.n	800578c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800574a:	4814      	ldr	r0, [pc, #80]	; (800579c <prvCheckForValidListAndQueue+0x64>)
 800574c:	f7fd fbfe 	bl	8002f4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005750:	4813      	ldr	r0, [pc, #76]	; (80057a0 <prvCheckForValidListAndQueue+0x68>)
 8005752:	f7fd fbfb 	bl	8002f4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005756:	4b13      	ldr	r3, [pc, #76]	; (80057a4 <prvCheckForValidListAndQueue+0x6c>)
 8005758:	4a10      	ldr	r2, [pc, #64]	; (800579c <prvCheckForValidListAndQueue+0x64>)
 800575a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800575c:	4b12      	ldr	r3, [pc, #72]	; (80057a8 <prvCheckForValidListAndQueue+0x70>)
 800575e:	4a10      	ldr	r2, [pc, #64]	; (80057a0 <prvCheckForValidListAndQueue+0x68>)
 8005760:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005762:	2300      	movs	r3, #0
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	4b11      	ldr	r3, [pc, #68]	; (80057ac <prvCheckForValidListAndQueue+0x74>)
 8005768:	4a11      	ldr	r2, [pc, #68]	; (80057b0 <prvCheckForValidListAndQueue+0x78>)
 800576a:	2110      	movs	r1, #16
 800576c:	200a      	movs	r0, #10
 800576e:	f7fd fd09 	bl	8003184 <xQueueGenericCreateStatic>
 8005772:	4603      	mov	r3, r0
 8005774:	4a08      	ldr	r2, [pc, #32]	; (8005798 <prvCheckForValidListAndQueue+0x60>)
 8005776:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005778:	4b07      	ldr	r3, [pc, #28]	; (8005798 <prvCheckForValidListAndQueue+0x60>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d005      	beq.n	800578c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005780:	4b05      	ldr	r3, [pc, #20]	; (8005798 <prvCheckForValidListAndQueue+0x60>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	490b      	ldr	r1, [pc, #44]	; (80057b4 <prvCheckForValidListAndQueue+0x7c>)
 8005786:	4618      	mov	r0, r3
 8005788:	f7fe fc1a 	bl	8003fc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800578c:	f000 f972 	bl	8005a74 <vPortExitCritical>
}
 8005790:	bf00      	nop
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20000dfc 	.word	0x20000dfc
 800579c:	20000dcc 	.word	0x20000dcc
 80057a0:	20000de0 	.word	0x20000de0
 80057a4:	20000df4 	.word	0x20000df4
 80057a8:	20000df8 	.word	0x20000df8
 80057ac:	20000ea8 	.word	0x20000ea8
 80057b0:	20000e08 	.word	0x20000e08
 80057b4:	080062bc 	.word	0x080062bc

080057b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	3b04      	subs	r3, #4
 80057c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80057d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	3b04      	subs	r3, #4
 80057d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	f023 0201 	bic.w	r2, r3, #1
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3b04      	subs	r3, #4
 80057e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057e8:	4a0c      	ldr	r2, [pc, #48]	; (800581c <pxPortInitialiseStack+0x64>)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	3b14      	subs	r3, #20
 80057f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	3b04      	subs	r3, #4
 80057fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f06f 0202 	mvn.w	r2, #2
 8005806:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	3b20      	subs	r3, #32
 800580c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800580e:	68fb      	ldr	r3, [r7, #12]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	08005821 	.word	0x08005821

08005820 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005826:	2300      	movs	r3, #0
 8005828:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800582a:	4b12      	ldr	r3, [pc, #72]	; (8005874 <prvTaskExitError+0x54>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005832:	d00a      	beq.n	800584a <prvTaskExitError+0x2a>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	60fb      	str	r3, [r7, #12]
}
 8005846:	bf00      	nop
 8005848:	e7fe      	b.n	8005848 <prvTaskExitError+0x28>
	__asm volatile
 800584a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584e:	f383 8811 	msr	BASEPRI, r3
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	60bb      	str	r3, [r7, #8]
}
 800585c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800585e:	bf00      	nop
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0fc      	beq.n	8005860 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005866:	bf00      	nop
 8005868:	bf00      	nop
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	2000000c 	.word	0x2000000c
	...

08005880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005880:	4b07      	ldr	r3, [pc, #28]	; (80058a0 <pxCurrentTCBConst2>)
 8005882:	6819      	ldr	r1, [r3, #0]
 8005884:	6808      	ldr	r0, [r1, #0]
 8005886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588a:	f380 8809 	msr	PSP, r0
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f04f 0000 	mov.w	r0, #0
 8005896:	f380 8811 	msr	BASEPRI, r0
 800589a:	4770      	bx	lr
 800589c:	f3af 8000 	nop.w

080058a0 <pxCurrentTCBConst2>:
 80058a0:	200008cc 	.word	0x200008cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80058a4:	bf00      	nop
 80058a6:	bf00      	nop

080058a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80058a8:	4808      	ldr	r0, [pc, #32]	; (80058cc <prvPortStartFirstTask+0x24>)
 80058aa:	6800      	ldr	r0, [r0, #0]
 80058ac:	6800      	ldr	r0, [r0, #0]
 80058ae:	f380 8808 	msr	MSP, r0
 80058b2:	f04f 0000 	mov.w	r0, #0
 80058b6:	f380 8814 	msr	CONTROL, r0
 80058ba:	b662      	cpsie	i
 80058bc:	b661      	cpsie	f
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	df00      	svc	0
 80058c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058ca:	bf00      	nop
 80058cc:	e000ed08 	.word	0xe000ed08

080058d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058d6:	4b46      	ldr	r3, [pc, #280]	; (80059f0 <xPortStartScheduler+0x120>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a46      	ldr	r2, [pc, #280]	; (80059f4 <xPortStartScheduler+0x124>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d10a      	bne.n	80058f6 <xPortStartScheduler+0x26>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	613b      	str	r3, [r7, #16]
}
 80058f2:	bf00      	nop
 80058f4:	e7fe      	b.n	80058f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058f6:	4b3e      	ldr	r3, [pc, #248]	; (80059f0 <xPortStartScheduler+0x120>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a3f      	ldr	r2, [pc, #252]	; (80059f8 <xPortStartScheduler+0x128>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d10a      	bne.n	8005916 <xPortStartScheduler+0x46>
	__asm volatile
 8005900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005904:	f383 8811 	msr	BASEPRI, r3
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	60fb      	str	r3, [r7, #12]
}
 8005912:	bf00      	nop
 8005914:	e7fe      	b.n	8005914 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005916:	4b39      	ldr	r3, [pc, #228]	; (80059fc <xPortStartScheduler+0x12c>)
 8005918:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	b2db      	uxtb	r3, r3
 8005920:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	22ff      	movs	r2, #255	; 0xff
 8005926:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	b2db      	uxtb	r3, r3
 800592e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	b2db      	uxtb	r3, r3
 8005934:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005938:	b2da      	uxtb	r2, r3
 800593a:	4b31      	ldr	r3, [pc, #196]	; (8005a00 <xPortStartScheduler+0x130>)
 800593c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800593e:	4b31      	ldr	r3, [pc, #196]	; (8005a04 <xPortStartScheduler+0x134>)
 8005940:	2207      	movs	r2, #7
 8005942:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005944:	e009      	b.n	800595a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005946:	4b2f      	ldr	r3, [pc, #188]	; (8005a04 <xPortStartScheduler+0x134>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	3b01      	subs	r3, #1
 800594c:	4a2d      	ldr	r2, [pc, #180]	; (8005a04 <xPortStartScheduler+0x134>)
 800594e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005950:	78fb      	ldrb	r3, [r7, #3]
 8005952:	b2db      	uxtb	r3, r3
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	b2db      	uxtb	r3, r3
 8005958:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800595a:	78fb      	ldrb	r3, [r7, #3]
 800595c:	b2db      	uxtb	r3, r3
 800595e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005962:	2b80      	cmp	r3, #128	; 0x80
 8005964:	d0ef      	beq.n	8005946 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005966:	4b27      	ldr	r3, [pc, #156]	; (8005a04 <xPortStartScheduler+0x134>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f1c3 0307 	rsb	r3, r3, #7
 800596e:	2b04      	cmp	r3, #4
 8005970:	d00a      	beq.n	8005988 <xPortStartScheduler+0xb8>
	__asm volatile
 8005972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005976:	f383 8811 	msr	BASEPRI, r3
 800597a:	f3bf 8f6f 	isb	sy
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	60bb      	str	r3, [r7, #8]
}
 8005984:	bf00      	nop
 8005986:	e7fe      	b.n	8005986 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005988:	4b1e      	ldr	r3, [pc, #120]	; (8005a04 <xPortStartScheduler+0x134>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	021b      	lsls	r3, r3, #8
 800598e:	4a1d      	ldr	r2, [pc, #116]	; (8005a04 <xPortStartScheduler+0x134>)
 8005990:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005992:	4b1c      	ldr	r3, [pc, #112]	; (8005a04 <xPortStartScheduler+0x134>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800599a:	4a1a      	ldr	r2, [pc, #104]	; (8005a04 <xPortStartScheduler+0x134>)
 800599c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059a6:	4b18      	ldr	r3, [pc, #96]	; (8005a08 <xPortStartScheduler+0x138>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a17      	ldr	r2, [pc, #92]	; (8005a08 <xPortStartScheduler+0x138>)
 80059ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059b2:	4b15      	ldr	r3, [pc, #84]	; (8005a08 <xPortStartScheduler+0x138>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a14      	ldr	r2, [pc, #80]	; (8005a08 <xPortStartScheduler+0x138>)
 80059b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80059bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80059be:	f000 f8dd 	bl	8005b7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059c2:	4b12      	ldr	r3, [pc, #72]	; (8005a0c <xPortStartScheduler+0x13c>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80059c8:	f000 f8fc 	bl	8005bc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059cc:	4b10      	ldr	r3, [pc, #64]	; (8005a10 <xPortStartScheduler+0x140>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a0f      	ldr	r2, [pc, #60]	; (8005a10 <xPortStartScheduler+0x140>)
 80059d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80059d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059d8:	f7ff ff66 	bl	80058a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059dc:	f7fe ff4a 	bl	8004874 <vTaskSwitchContext>
	prvTaskExitError();
 80059e0:	f7ff ff1e 	bl	8005820 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3718      	adds	r7, #24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	e000ed00 	.word	0xe000ed00
 80059f4:	410fc271 	.word	0x410fc271
 80059f8:	410fc270 	.word	0x410fc270
 80059fc:	e000e400 	.word	0xe000e400
 8005a00:	20000ef8 	.word	0x20000ef8
 8005a04:	20000efc 	.word	0x20000efc
 8005a08:	e000ed20 	.word	0xe000ed20
 8005a0c:	2000000c 	.word	0x2000000c
 8005a10:	e000ef34 	.word	0xe000ef34

08005a14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
	__asm volatile
 8005a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1e:	f383 8811 	msr	BASEPRI, r3
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	607b      	str	r3, [r7, #4]
}
 8005a2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a2e:	4b0f      	ldr	r3, [pc, #60]	; (8005a6c <vPortEnterCritical+0x58>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	3301      	adds	r3, #1
 8005a34:	4a0d      	ldr	r2, [pc, #52]	; (8005a6c <vPortEnterCritical+0x58>)
 8005a36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a38:	4b0c      	ldr	r3, [pc, #48]	; (8005a6c <vPortEnterCritical+0x58>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d10f      	bne.n	8005a60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a40:	4b0b      	ldr	r3, [pc, #44]	; (8005a70 <vPortEnterCritical+0x5c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00a      	beq.n	8005a60 <vPortEnterCritical+0x4c>
	__asm volatile
 8005a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	603b      	str	r3, [r7, #0]
}
 8005a5c:	bf00      	nop
 8005a5e:	e7fe      	b.n	8005a5e <vPortEnterCritical+0x4a>
	}
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	2000000c 	.word	0x2000000c
 8005a70:	e000ed04 	.word	0xe000ed04

08005a74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a7a:	4b12      	ldr	r3, [pc, #72]	; (8005ac4 <vPortExitCritical+0x50>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10a      	bne.n	8005a98 <vPortExitCritical+0x24>
	__asm volatile
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	607b      	str	r3, [r7, #4]
}
 8005a94:	bf00      	nop
 8005a96:	e7fe      	b.n	8005a96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a98:	4b0a      	ldr	r3, [pc, #40]	; (8005ac4 <vPortExitCritical+0x50>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	4a09      	ldr	r2, [pc, #36]	; (8005ac4 <vPortExitCritical+0x50>)
 8005aa0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005aa2:	4b08      	ldr	r3, [pc, #32]	; (8005ac4 <vPortExitCritical+0x50>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d105      	bne.n	8005ab6 <vPortExitCritical+0x42>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	f383 8811 	msr	BASEPRI, r3
}
 8005ab4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	2000000c 	.word	0x2000000c
	...

08005ad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ad0:	f3ef 8009 	mrs	r0, PSP
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	4b15      	ldr	r3, [pc, #84]	; (8005b30 <pxCurrentTCBConst>)
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	f01e 0f10 	tst.w	lr, #16
 8005ae0:	bf08      	it	eq
 8005ae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aea:	6010      	str	r0, [r2, #0]
 8005aec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005af0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005af4:	f380 8811 	msr	BASEPRI, r0
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f7fe feb8 	bl	8004874 <vTaskSwitchContext>
 8005b04:	f04f 0000 	mov.w	r0, #0
 8005b08:	f380 8811 	msr	BASEPRI, r0
 8005b0c:	bc09      	pop	{r0, r3}
 8005b0e:	6819      	ldr	r1, [r3, #0]
 8005b10:	6808      	ldr	r0, [r1, #0]
 8005b12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b16:	f01e 0f10 	tst.w	lr, #16
 8005b1a:	bf08      	it	eq
 8005b1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b20:	f380 8809 	msr	PSP, r0
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	f3af 8000 	nop.w

08005b30 <pxCurrentTCBConst>:
 8005b30:	200008cc 	.word	0x200008cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b34:	bf00      	nop
 8005b36:	bf00      	nop

08005b38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	607b      	str	r3, [r7, #4]
}
 8005b50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b52:	f7fe fdd5 	bl	8004700 <xTaskIncrementTick>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b5c:	4b06      	ldr	r3, [pc, #24]	; (8005b78 <xPortSysTickHandler+0x40>)
 8005b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	2300      	movs	r3, #0
 8005b66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	f383 8811 	msr	BASEPRI, r3
}
 8005b6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b70:	bf00      	nop
 8005b72:	3708      	adds	r7, #8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	e000ed04 	.word	0xe000ed04

08005b7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b80:	4b0b      	ldr	r3, [pc, #44]	; (8005bb0 <vPortSetupTimerInterrupt+0x34>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b86:	4b0b      	ldr	r3, [pc, #44]	; (8005bb4 <vPortSetupTimerInterrupt+0x38>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b8c:	4b0a      	ldr	r3, [pc, #40]	; (8005bb8 <vPortSetupTimerInterrupt+0x3c>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a0a      	ldr	r2, [pc, #40]	; (8005bbc <vPortSetupTimerInterrupt+0x40>)
 8005b92:	fba2 2303 	umull	r2, r3, r2, r3
 8005b96:	099b      	lsrs	r3, r3, #6
 8005b98:	4a09      	ldr	r2, [pc, #36]	; (8005bc0 <vPortSetupTimerInterrupt+0x44>)
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b9e:	4b04      	ldr	r3, [pc, #16]	; (8005bb0 <vPortSetupTimerInterrupt+0x34>)
 8005ba0:	2207      	movs	r2, #7
 8005ba2:	601a      	str	r2, [r3, #0]
}
 8005ba4:	bf00      	nop
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	e000e010 	.word	0xe000e010
 8005bb4:	e000e018 	.word	0xe000e018
 8005bb8:	20000000 	.word	0x20000000
 8005bbc:	10624dd3 	.word	0x10624dd3
 8005bc0:	e000e014 	.word	0xe000e014

08005bc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005bc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005bd4 <vPortEnableVFP+0x10>
 8005bc8:	6801      	ldr	r1, [r0, #0]
 8005bca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005bce:	6001      	str	r1, [r0, #0]
 8005bd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005bd2:	bf00      	nop
 8005bd4:	e000ed88 	.word	0xe000ed88

08005bd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005bde:	f3ef 8305 	mrs	r3, IPSR
 8005be2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b0f      	cmp	r3, #15
 8005be8:	d914      	bls.n	8005c14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bea:	4a17      	ldr	r2, [pc, #92]	; (8005c48 <vPortValidateInterruptPriority+0x70>)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4413      	add	r3, r2
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005bf4:	4b15      	ldr	r3, [pc, #84]	; (8005c4c <vPortValidateInterruptPriority+0x74>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	7afa      	ldrb	r2, [r7, #11]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d20a      	bcs.n	8005c14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	607b      	str	r3, [r7, #4]
}
 8005c10:	bf00      	nop
 8005c12:	e7fe      	b.n	8005c12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c14:	4b0e      	ldr	r3, [pc, #56]	; (8005c50 <vPortValidateInterruptPriority+0x78>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c1c:	4b0d      	ldr	r3, [pc, #52]	; (8005c54 <vPortValidateInterruptPriority+0x7c>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d90a      	bls.n	8005c3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	603b      	str	r3, [r7, #0]
}
 8005c36:	bf00      	nop
 8005c38:	e7fe      	b.n	8005c38 <vPortValidateInterruptPriority+0x60>
	}
 8005c3a:	bf00      	nop
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	e000e3f0 	.word	0xe000e3f0
 8005c4c:	20000ef8 	.word	0x20000ef8
 8005c50:	e000ed0c 	.word	0xe000ed0c
 8005c54:	20000efc 	.word	0x20000efc

08005c58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b08a      	sub	sp, #40	; 0x28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c60:	2300      	movs	r3, #0
 8005c62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c64:	f7fe fc90 	bl	8004588 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c68:	4b5b      	ldr	r3, [pc, #364]	; (8005dd8 <pvPortMalloc+0x180>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c70:	f000 f920 	bl	8005eb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c74:	4b59      	ldr	r3, [pc, #356]	; (8005ddc <pvPortMalloc+0x184>)
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f040 8093 	bne.w	8005da8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d01d      	beq.n	8005cc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005c88:	2208      	movs	r2, #8
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f003 0307 	and.w	r3, r3, #7
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d014      	beq.n	8005cc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f023 0307 	bic.w	r3, r3, #7
 8005ca0:	3308      	adds	r3, #8
 8005ca2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00a      	beq.n	8005cc4 <pvPortMalloc+0x6c>
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	617b      	str	r3, [r7, #20]
}
 8005cc0:	bf00      	nop
 8005cc2:	e7fe      	b.n	8005cc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d06e      	beq.n	8005da8 <pvPortMalloc+0x150>
 8005cca:	4b45      	ldr	r3, [pc, #276]	; (8005de0 <pvPortMalloc+0x188>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d869      	bhi.n	8005da8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005cd4:	4b43      	ldr	r3, [pc, #268]	; (8005de4 <pvPortMalloc+0x18c>)
 8005cd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005cd8:	4b42      	ldr	r3, [pc, #264]	; (8005de4 <pvPortMalloc+0x18c>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cde:	e004      	b.n	8005cea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d903      	bls.n	8005cfc <pvPortMalloc+0xa4>
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1f1      	bne.n	8005ce0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005cfc:	4b36      	ldr	r3, [pc, #216]	; (8005dd8 <pvPortMalloc+0x180>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d050      	beq.n	8005da8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2208      	movs	r2, #8
 8005d0c:	4413      	add	r3, r2
 8005d0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	6a3b      	ldr	r3, [r7, #32]
 8005d16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	1ad2      	subs	r2, r2, r3
 8005d20:	2308      	movs	r3, #8
 8005d22:	005b      	lsls	r3, r3, #1
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d91f      	bls.n	8005d68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	f003 0307 	and.w	r3, r3, #7
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00a      	beq.n	8005d50 <pvPortMalloc+0xf8>
	__asm volatile
 8005d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	613b      	str	r3, [r7, #16]
}
 8005d4c:	bf00      	nop
 8005d4e:	e7fe      	b.n	8005d4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	1ad2      	subs	r2, r2, r3
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d62:	69b8      	ldr	r0, [r7, #24]
 8005d64:	f000 f908 	bl	8005f78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d68:	4b1d      	ldr	r3, [pc, #116]	; (8005de0 <pvPortMalloc+0x188>)
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	4a1b      	ldr	r2, [pc, #108]	; (8005de0 <pvPortMalloc+0x188>)
 8005d74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d76:	4b1a      	ldr	r3, [pc, #104]	; (8005de0 <pvPortMalloc+0x188>)
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	4b1b      	ldr	r3, [pc, #108]	; (8005de8 <pvPortMalloc+0x190>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d203      	bcs.n	8005d8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d82:	4b17      	ldr	r3, [pc, #92]	; (8005de0 <pvPortMalloc+0x188>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a18      	ldr	r2, [pc, #96]	; (8005de8 <pvPortMalloc+0x190>)
 8005d88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	685a      	ldr	r2, [r3, #4]
 8005d8e:	4b13      	ldr	r3, [pc, #76]	; (8005ddc <pvPortMalloc+0x184>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	431a      	orrs	r2, r3
 8005d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005d9e:	4b13      	ldr	r3, [pc, #76]	; (8005dec <pvPortMalloc+0x194>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	3301      	adds	r3, #1
 8005da4:	4a11      	ldr	r2, [pc, #68]	; (8005dec <pvPortMalloc+0x194>)
 8005da6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005da8:	f7fe fbfc 	bl	80045a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	f003 0307 	and.w	r3, r3, #7
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00a      	beq.n	8005dcc <pvPortMalloc+0x174>
	__asm volatile
 8005db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dba:	f383 8811 	msr	BASEPRI, r3
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f3bf 8f4f 	dsb	sy
 8005dc6:	60fb      	str	r3, [r7, #12]
}
 8005dc8:	bf00      	nop
 8005dca:	e7fe      	b.n	8005dca <pvPortMalloc+0x172>
	return pvReturn;
 8005dcc:	69fb      	ldr	r3, [r7, #28]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3728      	adds	r7, #40	; 0x28
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20004b08 	.word	0x20004b08
 8005ddc:	20004b1c 	.word	0x20004b1c
 8005de0:	20004b0c 	.word	0x20004b0c
 8005de4:	20004b00 	.word	0x20004b00
 8005de8:	20004b10 	.word	0x20004b10
 8005dec:	20004b14 	.word	0x20004b14

08005df0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d04d      	beq.n	8005e9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e02:	2308      	movs	r3, #8
 8005e04:	425b      	negs	r3, r3
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	4413      	add	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	4b24      	ldr	r3, [pc, #144]	; (8005ea8 <vPortFree+0xb8>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4013      	ands	r3, r2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10a      	bne.n	8005e34 <vPortFree+0x44>
	__asm volatile
 8005e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	60fb      	str	r3, [r7, #12]
}
 8005e30:	bf00      	nop
 8005e32:	e7fe      	b.n	8005e32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00a      	beq.n	8005e52 <vPortFree+0x62>
	__asm volatile
 8005e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e40:	f383 8811 	msr	BASEPRI, r3
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	60bb      	str	r3, [r7, #8]
}
 8005e4e:	bf00      	nop
 8005e50:	e7fe      	b.n	8005e50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	4b14      	ldr	r3, [pc, #80]	; (8005ea8 <vPortFree+0xb8>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d01e      	beq.n	8005e9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d11a      	bne.n	8005e9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	4b0e      	ldr	r3, [pc, #56]	; (8005ea8 <vPortFree+0xb8>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	43db      	mvns	r3, r3
 8005e72:	401a      	ands	r2, r3
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e78:	f7fe fb86 	bl	8004588 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	4b0a      	ldr	r3, [pc, #40]	; (8005eac <vPortFree+0xbc>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4413      	add	r3, r2
 8005e86:	4a09      	ldr	r2, [pc, #36]	; (8005eac <vPortFree+0xbc>)
 8005e88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e8a:	6938      	ldr	r0, [r7, #16]
 8005e8c:	f000 f874 	bl	8005f78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005e90:	4b07      	ldr	r3, [pc, #28]	; (8005eb0 <vPortFree+0xc0>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3301      	adds	r3, #1
 8005e96:	4a06      	ldr	r2, [pc, #24]	; (8005eb0 <vPortFree+0xc0>)
 8005e98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005e9a:	f7fe fb83 	bl	80045a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e9e:	bf00      	nop
 8005ea0:	3718      	adds	r7, #24
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	20004b1c 	.word	0x20004b1c
 8005eac:	20004b0c 	.word	0x20004b0c
 8005eb0:	20004b18 	.word	0x20004b18

08005eb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005eba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005ebe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ec0:	4b27      	ldr	r3, [pc, #156]	; (8005f60 <prvHeapInit+0xac>)
 8005ec2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f003 0307 	and.w	r3, r3, #7
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00c      	beq.n	8005ee8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	3307      	adds	r3, #7
 8005ed2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f023 0307 	bic.w	r3, r3, #7
 8005eda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	4a1f      	ldr	r2, [pc, #124]	; (8005f60 <prvHeapInit+0xac>)
 8005ee4:	4413      	add	r3, r2
 8005ee6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005eec:	4a1d      	ldr	r2, [pc, #116]	; (8005f64 <prvHeapInit+0xb0>)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ef2:	4b1c      	ldr	r3, [pc, #112]	; (8005f64 <prvHeapInit+0xb0>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	4413      	add	r3, r2
 8005efe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f00:	2208      	movs	r2, #8
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	1a9b      	subs	r3, r3, r2
 8005f06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f023 0307 	bic.w	r3, r3, #7
 8005f0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4a15      	ldr	r2, [pc, #84]	; (8005f68 <prvHeapInit+0xb4>)
 8005f14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f16:	4b14      	ldr	r3, [pc, #80]	; (8005f68 <prvHeapInit+0xb4>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f1e:	4b12      	ldr	r3, [pc, #72]	; (8005f68 <prvHeapInit+0xb4>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2200      	movs	r2, #0
 8005f24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	1ad2      	subs	r2, r2, r3
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f34:	4b0c      	ldr	r3, [pc, #48]	; (8005f68 <prvHeapInit+0xb4>)
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	4a0a      	ldr	r2, [pc, #40]	; (8005f6c <prvHeapInit+0xb8>)
 8005f42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	4a09      	ldr	r2, [pc, #36]	; (8005f70 <prvHeapInit+0xbc>)
 8005f4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f4c:	4b09      	ldr	r3, [pc, #36]	; (8005f74 <prvHeapInit+0xc0>)
 8005f4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f52:	601a      	str	r2, [r3, #0]
}
 8005f54:	bf00      	nop
 8005f56:	3714      	adds	r7, #20
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	20000f00 	.word	0x20000f00
 8005f64:	20004b00 	.word	0x20004b00
 8005f68:	20004b08 	.word	0x20004b08
 8005f6c:	20004b10 	.word	0x20004b10
 8005f70:	20004b0c 	.word	0x20004b0c
 8005f74:	20004b1c 	.word	0x20004b1c

08005f78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f80:	4b28      	ldr	r3, [pc, #160]	; (8006024 <prvInsertBlockIntoFreeList+0xac>)
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	e002      	b.n	8005f8c <prvInsertBlockIntoFreeList+0x14>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d8f7      	bhi.n	8005f86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d108      	bne.n	8005fba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	441a      	add	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	441a      	add	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d118      	bne.n	8006000 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	4b15      	ldr	r3, [pc, #84]	; (8006028 <prvInsertBlockIntoFreeList+0xb0>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d00d      	beq.n	8005ff6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	441a      	add	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	e008      	b.n	8006008 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ff6:	4b0c      	ldr	r3, [pc, #48]	; (8006028 <prvInsertBlockIntoFreeList+0xb0>)
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	e003      	b.n	8006008 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	429a      	cmp	r2, r3
 800600e:	d002      	beq.n	8006016 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006016:	bf00      	nop
 8006018:	3714      	adds	r7, #20
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	20004b00 	.word	0x20004b00
 8006028:	20004b08 	.word	0x20004b08

0800602c <memset>:
 800602c:	4402      	add	r2, r0
 800602e:	4603      	mov	r3, r0
 8006030:	4293      	cmp	r3, r2
 8006032:	d100      	bne.n	8006036 <memset+0xa>
 8006034:	4770      	bx	lr
 8006036:	f803 1b01 	strb.w	r1, [r3], #1
 800603a:	e7f9      	b.n	8006030 <memset+0x4>

0800603c <_reclaim_reent>:
 800603c:	4b29      	ldr	r3, [pc, #164]	; (80060e4 <_reclaim_reent+0xa8>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4283      	cmp	r3, r0
 8006042:	b570      	push	{r4, r5, r6, lr}
 8006044:	4604      	mov	r4, r0
 8006046:	d04b      	beq.n	80060e0 <_reclaim_reent+0xa4>
 8006048:	69c3      	ldr	r3, [r0, #28]
 800604a:	b143      	cbz	r3, 800605e <_reclaim_reent+0x22>
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d144      	bne.n	80060dc <_reclaim_reent+0xa0>
 8006052:	69e3      	ldr	r3, [r4, #28]
 8006054:	6819      	ldr	r1, [r3, #0]
 8006056:	b111      	cbz	r1, 800605e <_reclaim_reent+0x22>
 8006058:	4620      	mov	r0, r4
 800605a:	f000 f879 	bl	8006150 <_free_r>
 800605e:	6961      	ldr	r1, [r4, #20]
 8006060:	b111      	cbz	r1, 8006068 <_reclaim_reent+0x2c>
 8006062:	4620      	mov	r0, r4
 8006064:	f000 f874 	bl	8006150 <_free_r>
 8006068:	69e1      	ldr	r1, [r4, #28]
 800606a:	b111      	cbz	r1, 8006072 <_reclaim_reent+0x36>
 800606c:	4620      	mov	r0, r4
 800606e:	f000 f86f 	bl	8006150 <_free_r>
 8006072:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006074:	b111      	cbz	r1, 800607c <_reclaim_reent+0x40>
 8006076:	4620      	mov	r0, r4
 8006078:	f000 f86a 	bl	8006150 <_free_r>
 800607c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800607e:	b111      	cbz	r1, 8006086 <_reclaim_reent+0x4a>
 8006080:	4620      	mov	r0, r4
 8006082:	f000 f865 	bl	8006150 <_free_r>
 8006086:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006088:	b111      	cbz	r1, 8006090 <_reclaim_reent+0x54>
 800608a:	4620      	mov	r0, r4
 800608c:	f000 f860 	bl	8006150 <_free_r>
 8006090:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006092:	b111      	cbz	r1, 800609a <_reclaim_reent+0x5e>
 8006094:	4620      	mov	r0, r4
 8006096:	f000 f85b 	bl	8006150 <_free_r>
 800609a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800609c:	b111      	cbz	r1, 80060a4 <_reclaim_reent+0x68>
 800609e:	4620      	mov	r0, r4
 80060a0:	f000 f856 	bl	8006150 <_free_r>
 80060a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80060a6:	b111      	cbz	r1, 80060ae <_reclaim_reent+0x72>
 80060a8:	4620      	mov	r0, r4
 80060aa:	f000 f851 	bl	8006150 <_free_r>
 80060ae:	6a23      	ldr	r3, [r4, #32]
 80060b0:	b1b3      	cbz	r3, 80060e0 <_reclaim_reent+0xa4>
 80060b2:	4620      	mov	r0, r4
 80060b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80060b8:	4718      	bx	r3
 80060ba:	5949      	ldr	r1, [r1, r5]
 80060bc:	b941      	cbnz	r1, 80060d0 <_reclaim_reent+0x94>
 80060be:	3504      	adds	r5, #4
 80060c0:	69e3      	ldr	r3, [r4, #28]
 80060c2:	2d80      	cmp	r5, #128	; 0x80
 80060c4:	68d9      	ldr	r1, [r3, #12]
 80060c6:	d1f8      	bne.n	80060ba <_reclaim_reent+0x7e>
 80060c8:	4620      	mov	r0, r4
 80060ca:	f000 f841 	bl	8006150 <_free_r>
 80060ce:	e7c0      	b.n	8006052 <_reclaim_reent+0x16>
 80060d0:	680e      	ldr	r6, [r1, #0]
 80060d2:	4620      	mov	r0, r4
 80060d4:	f000 f83c 	bl	8006150 <_free_r>
 80060d8:	4631      	mov	r1, r6
 80060da:	e7ef      	b.n	80060bc <_reclaim_reent+0x80>
 80060dc:	2500      	movs	r5, #0
 80060de:	e7ef      	b.n	80060c0 <_reclaim_reent+0x84>
 80060e0:	bd70      	pop	{r4, r5, r6, pc}
 80060e2:	bf00      	nop
 80060e4:	2000005c 	.word	0x2000005c

080060e8 <__libc_init_array>:
 80060e8:	b570      	push	{r4, r5, r6, lr}
 80060ea:	4d0d      	ldr	r5, [pc, #52]	; (8006120 <__libc_init_array+0x38>)
 80060ec:	4c0d      	ldr	r4, [pc, #52]	; (8006124 <__libc_init_array+0x3c>)
 80060ee:	1b64      	subs	r4, r4, r5
 80060f0:	10a4      	asrs	r4, r4, #2
 80060f2:	2600      	movs	r6, #0
 80060f4:	42a6      	cmp	r6, r4
 80060f6:	d109      	bne.n	800610c <__libc_init_array+0x24>
 80060f8:	4d0b      	ldr	r5, [pc, #44]	; (8006128 <__libc_init_array+0x40>)
 80060fa:	4c0c      	ldr	r4, [pc, #48]	; (800612c <__libc_init_array+0x44>)
 80060fc:	f000 f880 	bl	8006200 <_init>
 8006100:	1b64      	subs	r4, r4, r5
 8006102:	10a4      	asrs	r4, r4, #2
 8006104:	2600      	movs	r6, #0
 8006106:	42a6      	cmp	r6, r4
 8006108:	d105      	bne.n	8006116 <__libc_init_array+0x2e>
 800610a:	bd70      	pop	{r4, r5, r6, pc}
 800610c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006110:	4798      	blx	r3
 8006112:	3601      	adds	r6, #1
 8006114:	e7ee      	b.n	80060f4 <__libc_init_array+0xc>
 8006116:	f855 3b04 	ldr.w	r3, [r5], #4
 800611a:	4798      	blx	r3
 800611c:	3601      	adds	r6, #1
 800611e:	e7f2      	b.n	8006106 <__libc_init_array+0x1e>
 8006120:	080063e8 	.word	0x080063e8
 8006124:	080063e8 	.word	0x080063e8
 8006128:	080063e8 	.word	0x080063e8
 800612c:	080063ec 	.word	0x080063ec

08006130 <__retarget_lock_acquire_recursive>:
 8006130:	4770      	bx	lr

08006132 <__retarget_lock_release_recursive>:
 8006132:	4770      	bx	lr

08006134 <memcpy>:
 8006134:	440a      	add	r2, r1
 8006136:	4291      	cmp	r1, r2
 8006138:	f100 33ff 	add.w	r3, r0, #4294967295
 800613c:	d100      	bne.n	8006140 <memcpy+0xc>
 800613e:	4770      	bx	lr
 8006140:	b510      	push	{r4, lr}
 8006142:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006146:	f803 4f01 	strb.w	r4, [r3, #1]!
 800614a:	4291      	cmp	r1, r2
 800614c:	d1f9      	bne.n	8006142 <memcpy+0xe>
 800614e:	bd10      	pop	{r4, pc}

08006150 <_free_r>:
 8006150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006152:	2900      	cmp	r1, #0
 8006154:	d044      	beq.n	80061e0 <_free_r+0x90>
 8006156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800615a:	9001      	str	r0, [sp, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	f1a1 0404 	sub.w	r4, r1, #4
 8006162:	bfb8      	it	lt
 8006164:	18e4      	addlt	r4, r4, r3
 8006166:	f000 f83f 	bl	80061e8 <__malloc_lock>
 800616a:	4a1e      	ldr	r2, [pc, #120]	; (80061e4 <_free_r+0x94>)
 800616c:	9801      	ldr	r0, [sp, #4]
 800616e:	6813      	ldr	r3, [r2, #0]
 8006170:	b933      	cbnz	r3, 8006180 <_free_r+0x30>
 8006172:	6063      	str	r3, [r4, #4]
 8006174:	6014      	str	r4, [r2, #0]
 8006176:	b003      	add	sp, #12
 8006178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800617c:	f000 b83a 	b.w	80061f4 <__malloc_unlock>
 8006180:	42a3      	cmp	r3, r4
 8006182:	d908      	bls.n	8006196 <_free_r+0x46>
 8006184:	6825      	ldr	r5, [r4, #0]
 8006186:	1961      	adds	r1, r4, r5
 8006188:	428b      	cmp	r3, r1
 800618a:	bf01      	itttt	eq
 800618c:	6819      	ldreq	r1, [r3, #0]
 800618e:	685b      	ldreq	r3, [r3, #4]
 8006190:	1949      	addeq	r1, r1, r5
 8006192:	6021      	streq	r1, [r4, #0]
 8006194:	e7ed      	b.n	8006172 <_free_r+0x22>
 8006196:	461a      	mov	r2, r3
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	b10b      	cbz	r3, 80061a0 <_free_r+0x50>
 800619c:	42a3      	cmp	r3, r4
 800619e:	d9fa      	bls.n	8006196 <_free_r+0x46>
 80061a0:	6811      	ldr	r1, [r2, #0]
 80061a2:	1855      	adds	r5, r2, r1
 80061a4:	42a5      	cmp	r5, r4
 80061a6:	d10b      	bne.n	80061c0 <_free_r+0x70>
 80061a8:	6824      	ldr	r4, [r4, #0]
 80061aa:	4421      	add	r1, r4
 80061ac:	1854      	adds	r4, r2, r1
 80061ae:	42a3      	cmp	r3, r4
 80061b0:	6011      	str	r1, [r2, #0]
 80061b2:	d1e0      	bne.n	8006176 <_free_r+0x26>
 80061b4:	681c      	ldr	r4, [r3, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	6053      	str	r3, [r2, #4]
 80061ba:	440c      	add	r4, r1
 80061bc:	6014      	str	r4, [r2, #0]
 80061be:	e7da      	b.n	8006176 <_free_r+0x26>
 80061c0:	d902      	bls.n	80061c8 <_free_r+0x78>
 80061c2:	230c      	movs	r3, #12
 80061c4:	6003      	str	r3, [r0, #0]
 80061c6:	e7d6      	b.n	8006176 <_free_r+0x26>
 80061c8:	6825      	ldr	r5, [r4, #0]
 80061ca:	1961      	adds	r1, r4, r5
 80061cc:	428b      	cmp	r3, r1
 80061ce:	bf04      	itt	eq
 80061d0:	6819      	ldreq	r1, [r3, #0]
 80061d2:	685b      	ldreq	r3, [r3, #4]
 80061d4:	6063      	str	r3, [r4, #4]
 80061d6:	bf04      	itt	eq
 80061d8:	1949      	addeq	r1, r1, r5
 80061da:	6021      	streq	r1, [r4, #0]
 80061dc:	6054      	str	r4, [r2, #4]
 80061de:	e7ca      	b.n	8006176 <_free_r+0x26>
 80061e0:	b003      	add	sp, #12
 80061e2:	bd30      	pop	{r4, r5, pc}
 80061e4:	20004c5c 	.word	0x20004c5c

080061e8 <__malloc_lock>:
 80061e8:	4801      	ldr	r0, [pc, #4]	; (80061f0 <__malloc_lock+0x8>)
 80061ea:	f7ff bfa1 	b.w	8006130 <__retarget_lock_acquire_recursive>
 80061ee:	bf00      	nop
 80061f0:	20004c58 	.word	0x20004c58

080061f4 <__malloc_unlock>:
 80061f4:	4801      	ldr	r0, [pc, #4]	; (80061fc <__malloc_unlock+0x8>)
 80061f6:	f7ff bf9c 	b.w	8006132 <__retarget_lock_release_recursive>
 80061fa:	bf00      	nop
 80061fc:	20004c58 	.word	0x20004c58

08006200 <_init>:
 8006200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006202:	bf00      	nop
 8006204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006206:	bc08      	pop	{r3}
 8006208:	469e      	mov	lr, r3
 800620a:	4770      	bx	lr

0800620c <_fini>:
 800620c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620e:	bf00      	nop
 8006210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006212:	bc08      	pop	{r3}
 8006214:	469e      	mov	lr, r3
 8006216:	4770      	bx	lr
