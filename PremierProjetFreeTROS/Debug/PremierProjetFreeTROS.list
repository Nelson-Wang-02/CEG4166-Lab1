
PremierProjetFreeTROS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005658  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08005828  08005828  00015828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058dc  080058dc  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  080058dc  080058dc  000158dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058e4  080058e4  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058e4  080058e4  000158e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058e8  080058e8  000158e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080058ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004be4  2000008c  08005978  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c70  08005978  00024c70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018992  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034ba  00000000  00000000  00038a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001480  00000000  00000000  0003bf50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff3  00000000  00000000  0003d3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000332c  00000000  00000000  0003e3c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001771b  00000000  00000000  000416ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dad79  00000000  00000000  00058e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005948  00000000  00000000  00133b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001394cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005810 	.word	0x08005810

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000090 	.word	0x20000090
 800020c:	08005810 	.word	0x08005810

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fad4 	bl	8000abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f834 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f8ce 	bl	80006b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800051c:	f000 f8a2 	bl	8000664 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000520:	f002 fb14 	bl	8002b4c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000524:	4a0d      	ldr	r2, [pc, #52]	; (800055c <main+0x50>)
 8000526:	2100      	movs	r1, #0
 8000528:	480d      	ldr	r0, [pc, #52]	; (8000560 <main+0x54>)
 800052a:	f002 fb59 	bl	8002be0 <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a0c      	ldr	r2, [pc, #48]	; (8000564 <main+0x58>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000534:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <main+0x5c>)
 8000536:	2100      	movs	r1, #0
 8000538:	480c      	ldr	r0, [pc, #48]	; (800056c <main+0x60>)
 800053a:	f002 fb51 	bl	8002be0 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <main+0x64>)
 8000542:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(StartTask3, NULL, &Task3_attributes);
 8000544:	4a0b      	ldr	r2, [pc, #44]	; (8000574 <main+0x68>)
 8000546:	2100      	movs	r1, #0
 8000548:	480b      	ldr	r0, [pc, #44]	; (8000578 <main+0x6c>)
 800054a:	f002 fb49 	bl	8002be0 <osThreadNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a0a      	ldr	r2, [pc, #40]	; (800057c <main+0x70>)
 8000552:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000554:	f002 fb1e 	bl	8002b94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000558:	e7fe      	b.n	8000558 <main+0x4c>
 800055a:	bf00      	nop
 800055c:	08005858 	.word	0x08005858
 8000560:	08000759 	.word	0x08000759
 8000564:	200000f0 	.word	0x200000f0
 8000568:	0800587c 	.word	0x0800587c
 800056c:	0800078d 	.word	0x0800078d
 8000570:	200000f4 	.word	0x200000f4
 8000574:	080058a0 	.word	0x080058a0
 8000578:	080007c1 	.word	0x080007c1
 800057c:	200000f8 	.word	0x200000f8

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	; 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 031c 	add.w	r3, r7, #28
 800058a:	2234      	movs	r2, #52	; 0x34
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f005 f854 	bl	800563c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 0308 	add.w	r3, r7, #8
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b2c      	ldr	r3, [pc, #176]	; (800065c <SystemClock_Config+0xdc>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	4a2b      	ldr	r2, [pc, #172]	; (800065c <SystemClock_Config+0xdc>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	; 0x40
 80005b4:	4b29      	ldr	r3, [pc, #164]	; (800065c <SystemClock_Config+0xdc>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	2300      	movs	r3, #0
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	4b26      	ldr	r3, [pc, #152]	; (8000660 <SystemClock_Config+0xe0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a25      	ldr	r2, [pc, #148]	; (8000660 <SystemClock_Config+0xe0>)
 80005ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b23      	ldr	r3, [pc, #140]	; (8000660 <SystemClock_Config+0xe0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005dc:	2302      	movs	r3, #2
 80005de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e0:	2301      	movs	r3, #1
 80005e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e4:	2310      	movs	r3, #16
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e8:	2302      	movs	r3, #2
 80005ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ec:	2300      	movs	r3, #0
 80005ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005f0:	2308      	movs	r3, #8
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005f4:	23b4      	movs	r3, #180	; 0xb4
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000600:	2302      	movs	r3, #2
 8000602:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 031c 	add.w	r3, r7, #28
 8000608:	4618      	mov	r0, r3
 800060a:	f001 f90f 	bl	800182c <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000614:	f000 f900 	bl	8000818 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000618:	f000 fd3c 	bl	8001094 <HAL_PWREx_EnableOverDrive>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000622:	f000 f8f9 	bl	8000818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000626:	230f      	movs	r3, #15
 8000628:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2302      	movs	r3, #2
 800062c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000632:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000636:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800063e:	f107 0308 	add.w	r3, r7, #8
 8000642:	2105      	movs	r1, #5
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fd75 	bl	8001134 <HAL_RCC_ClockConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000650:	f000 f8e2 	bl	8000818 <Error_Handler>
  }
}
 8000654:	bf00      	nop
 8000656:	3750      	adds	r7, #80	; 0x50
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40023800 	.word	0x40023800
 8000660:	40007000 	.word	0x40007000

08000664 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800066a:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <MX_USART2_UART_Init+0x50>)
 800066c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000670:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000674:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_USART2_UART_Init+0x4c>)
 800069c:	f001 fe06 	bl	80022ac <HAL_UART_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006a6:	f000 f8b7 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200000a8 	.word	0x200000a8
 80006b4:	40004400 	.word	0x40004400

080006b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <MX_GPIO_Init+0x98>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a1e      	ldr	r2, [pc, #120]	; (8000750 <MX_GPIO_Init+0x98>)
 80006d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <MX_GPIO_Init+0x98>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	4b18      	ldr	r3, [pc, #96]	; (8000750 <MX_GPIO_Init+0x98>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a17      	ldr	r2, [pc, #92]	; (8000750 <MX_GPIO_Init+0x98>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b15      	ldr	r3, [pc, #84]	; (8000750 <MX_GPIO_Init+0x98>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_GPIO_Init+0x98>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a10      	ldr	r2, [pc, #64]	; (8000750 <MX_GPIO_Init+0x98>)
 8000710:	f043 0302 	orr.w	r3, r3, #2
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_GPIO_Init+0x98>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2138      	movs	r1, #56	; 0x38
 8000726:	480b      	ldr	r0, [pc, #44]	; (8000754 <MX_GPIO_Init+0x9c>)
 8000728:	f000 fc80 	bl	800102c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800072c:	2338      	movs	r3, #56	; 0x38
 800072e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000730:	2301      	movs	r3, #1
 8000732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	4619      	mov	r1, r3
 8000742:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_GPIO_Init+0x9c>)
 8000744:	f000 fade 	bl	8000d04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000748:	bf00      	nop
 800074a:	3720      	adds	r7, #32
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40023800 	.word	0x40023800
 8000754:	40020400 	.word	0x40020400

08000758 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart2, dataTask1, sizeof(dataTask1), 1000);
 8000760:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000764:	220c      	movs	r2, #12
 8000766:	4906      	ldr	r1, [pc, #24]	; (8000780 <StartTask1+0x28>)
 8000768:	4806      	ldr	r0, [pc, #24]	; (8000784 <StartTask1+0x2c>)
 800076a:	f001 fdef 	bl	800234c <HAL_UART_Transmit>
	 // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_5);
 800076e:	2120      	movs	r1, #32
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <StartTask1+0x30>)
 8000772:	f000 fc74 	bl	800105e <HAL_GPIO_TogglePin>
      osDelay(1000);
 8000776:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800077a:	f002 fac3 	bl	8002d04 <osDelay>
	  HAL_UART_Transmit(&huart2, dataTask1, sizeof(dataTask1), 1000);
 800077e:	e7ef      	b.n	8000760 <StartTask1+0x8>
 8000780:	20000000 	.word	0x20000000
 8000784:	200000a8 	.word	0x200000a8
 8000788:	40020400 	.word	0x40020400

0800078c <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart2, dataTask2, sizeof(dataTask2), 1000);
 8000794:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000798:	220f      	movs	r2, #15
 800079a:	4906      	ldr	r1, [pc, #24]	; (80007b4 <StartTask2+0x28>)
 800079c:	4806      	ldr	r0, [pc, #24]	; (80007b8 <StartTask2+0x2c>)
 800079e:	f001 fdd5 	bl	800234c <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_4);
 80007a2:	2110      	movs	r1, #16
 80007a4:	4805      	ldr	r0, [pc, #20]	; (80007bc <StartTask2+0x30>)
 80007a6:	f000 fc5a 	bl	800105e <HAL_GPIO_TogglePin>
	  osDelay(1000);
 80007aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ae:	f002 faa9 	bl	8002d04 <osDelay>
	  HAL_UART_Transmit(&huart2, dataTask2, sizeof(dataTask2), 1000);
 80007b2:	e7ef      	b.n	8000794 <StartTask2+0x8>
 80007b4:	2000000c 	.word	0x2000000c
 80007b8:	200000a8 	.word	0x200000a8
 80007bc:	40020400 	.word	0x40020400

080007c0 <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart2, dataTask3, sizeof(dataTask3), 1000);
 80007c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007cc:	220f      	movs	r2, #15
 80007ce:	4906      	ldr	r1, [pc, #24]	; (80007e8 <StartTask3+0x28>)
 80007d0:	4806      	ldr	r0, [pc, #24]	; (80007ec <StartTask3+0x2c>)
 80007d2:	f001 fdbb 	bl	800234c <HAL_UART_Transmit>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80007d6:	2108      	movs	r1, #8
 80007d8:	4805      	ldr	r0, [pc, #20]	; (80007f0 <StartTask3+0x30>)
 80007da:	f000 fc40 	bl	800105e <HAL_GPIO_TogglePin>
	  osDelay(1000);
 80007de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007e2:	f002 fa8f 	bl	8002d04 <osDelay>
	  HAL_UART_Transmit(&huart2, dataTask3, sizeof(dataTask3), 1000);
 80007e6:	e7ef      	b.n	80007c8 <StartTask3+0x8>
 80007e8:	2000001c 	.word	0x2000001c
 80007ec:	200000a8 	.word	0x200000a8
 80007f0:	40020400 	.word	0x40020400

080007f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a04      	ldr	r2, [pc, #16]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d101      	bne.n	800080a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000806:	f000 f97b 	bl	8000b00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40001000 	.word	0x40001000

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	e7fe      	b.n	8000820 <Error_Handler+0x8>
	...

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b12      	ldr	r3, [pc, #72]	; (8000878 <HAL_MspInit+0x54>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	4a11      	ldr	r2, [pc, #68]	; (8000878 <HAL_MspInit+0x54>)
 8000834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000838:	6453      	str	r3, [r2, #68]	; 0x44
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <HAL_MspInit+0x54>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <HAL_MspInit+0x54>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <HAL_MspInit+0x54>)
 8000850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000854:	6413      	str	r3, [r2, #64]	; 0x40
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <HAL_MspInit+0x54>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	210f      	movs	r1, #15
 8000866:	f06f 0001 	mvn.w	r0, #1
 800086a:	f000 fa21 	bl	8000cb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800

0800087c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a19      	ldr	r2, [pc, #100]	; (8000900 <HAL_UART_MspInit+0x84>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d12b      	bne.n	80008f6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <HAL_UART_MspInit+0x88>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	4a17      	ldr	r2, [pc, #92]	; (8000904 <HAL_UART_MspInit+0x88>)
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ac:	6413      	str	r3, [r2, #64]	; 0x40
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <HAL_UART_MspInit+0x88>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <HAL_UART_MspInit+0x88>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a10      	ldr	r2, [pc, #64]	; (8000904 <HAL_UART_MspInit+0x88>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <HAL_UART_MspInit+0x88>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008d6:	230c      	movs	r3, #12
 80008d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008e6:	2307      	movs	r3, #7
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <HAL_UART_MspInit+0x8c>)
 80008f2:	f000 fa07 	bl	8000d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008f6:	bf00      	nop
 80008f8:	3728      	adds	r7, #40	; 0x28
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40004400 	.word	0x40004400
 8000904:	40023800 	.word	0x40023800
 8000908:	40020000 	.word	0x40020000

0800090c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08e      	sub	sp, #56	; 0x38
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000914:	2300      	movs	r3, #0
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	4b33      	ldr	r3, [pc, #204]	; (80009f0 <HAL_InitTick+0xe4>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	4a32      	ldr	r2, [pc, #200]	; (80009f0 <HAL_InitTick+0xe4>)
 8000926:	f043 0310 	orr.w	r3, r3, #16
 800092a:	6413      	str	r3, [r2, #64]	; 0x40
 800092c:	4b30      	ldr	r3, [pc, #192]	; (80009f0 <HAL_InitTick+0xe4>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	f003 0310 	and.w	r3, r3, #16
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000938:	f107 0210 	add.w	r2, r7, #16
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4611      	mov	r1, r2
 8000942:	4618      	mov	r0, r3
 8000944:	f000 fd10 	bl	8001368 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000948:	6a3b      	ldr	r3, [r7, #32]
 800094a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800094c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800094e:	2b00      	cmp	r3, #0
 8000950:	d103      	bne.n	800095a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000952:	f000 fce1 	bl	8001318 <HAL_RCC_GetPCLK1Freq>
 8000956:	6378      	str	r0, [r7, #52]	; 0x34
 8000958:	e004      	b.n	8000964 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800095a:	f000 fcdd 	bl	8001318 <HAL_RCC_GetPCLK1Freq>
 800095e:	4603      	mov	r3, r0
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000966:	4a23      	ldr	r2, [pc, #140]	; (80009f4 <HAL_InitTick+0xe8>)
 8000968:	fba2 2303 	umull	r2, r3, r2, r3
 800096c:	0c9b      	lsrs	r3, r3, #18
 800096e:	3b01      	subs	r3, #1
 8000970:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000972:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <HAL_InitTick+0xec>)
 8000974:	4a21      	ldr	r2, [pc, #132]	; (80009fc <HAL_InitTick+0xf0>)
 8000976:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <HAL_InitTick+0xec>)
 800097a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800097e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000980:	4a1d      	ldr	r2, [pc, #116]	; (80009f8 <HAL_InitTick+0xec>)
 8000982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000984:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000986:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <HAL_InitTick+0xec>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098c:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <HAL_InitTick+0xec>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000992:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <HAL_InitTick+0xec>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000998:	4817      	ldr	r0, [pc, #92]	; (80009f8 <HAL_InitTick+0xec>)
 800099a:	f001 f9e5 	bl	8001d68 <HAL_TIM_Base_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d11b      	bne.n	80009e4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009ac:	4812      	ldr	r0, [pc, #72]	; (80009f8 <HAL_InitTick+0xec>)
 80009ae:	f001 fa35 	bl	8001e1c <HAL_TIM_Base_Start_IT>
 80009b2:	4603      	mov	r3, r0
 80009b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d111      	bne.n	80009e4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009c0:	2036      	movs	r0, #54	; 0x36
 80009c2:	f000 f991 	bl	8000ce8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2b0f      	cmp	r3, #15
 80009ca:	d808      	bhi.n	80009de <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009cc:	2200      	movs	r2, #0
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	2036      	movs	r0, #54	; 0x36
 80009d2:	f000 f96d 	bl	8000cb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <HAL_InitTick+0xf4>)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6013      	str	r3, [r2, #0]
 80009dc:	e002      	b.n	80009e4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3738      	adds	r7, #56	; 0x38
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40023800 	.word	0x40023800
 80009f4:	431bde83 	.word	0x431bde83
 80009f8:	200000fc 	.word	0x200000fc
 80009fc:	40001000 	.word	0x40001000
 8000a00:	20000030 	.word	0x20000030

08000a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a08:	e7fe      	b.n	8000a08 <NMI_Handler+0x4>

08000a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <HardFault_Handler+0x4>

08000a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <MemManage_Handler+0x4>

08000a16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <BusFault_Handler+0x4>

08000a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <UsageFault_Handler+0x4>

08000a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a34:	4802      	ldr	r0, [pc, #8]	; (8000a40 <TIM6_DAC_IRQHandler+0x10>)
 8000a36:	f001 fa61 	bl	8001efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200000fc 	.word	0x200000fc

08000a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <SystemInit+0x20>)
 8000a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a4e:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <SystemInit+0x20>)
 8000a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a6c:	f7ff ffea 	bl	8000a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a70:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a72:	490d      	ldr	r1, [pc, #52]	; (8000aa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a74:	4a0d      	ldr	r2, [pc, #52]	; (8000aac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a78:	e002      	b.n	8000a80 <LoopCopyDataInit>

08000a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7e:	3304      	adds	r3, #4

08000a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a84:	d3f9      	bcc.n	8000a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a86:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a88:	4c0a      	ldr	r4, [pc, #40]	; (8000ab4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a8c:	e001      	b.n	8000a92 <LoopFillZerobss>

08000a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a90:	3204      	adds	r2, #4

08000a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a94:	d3fb      	bcc.n	8000a8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a96:	f004 fe2f 	bl	80056f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a9a:	f7ff fd37 	bl	800050c <main>
  bx  lr    
 8000a9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000aa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000aac:	080058ec 	.word	0x080058ec
  ldr r2, =_sbss
 8000ab0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000ab4:	20004c70 	.word	0x20004c70

08000ab8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC_IRQHandler>
	...

08000abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <HAL_Init+0x40>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <HAL_Init+0x40>)
 8000ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000acc:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <HAL_Init+0x40>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <HAL_Init+0x40>)
 8000ad2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ad6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <HAL_Init+0x40>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a07      	ldr	r2, [pc, #28]	; (8000afc <HAL_Init+0x40>)
 8000ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae4:	2003      	movs	r0, #3
 8000ae6:	f000 f8d8 	bl	8000c9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aea:	200f      	movs	r0, #15
 8000aec:	f7ff ff0e 	bl	800090c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af0:	f7ff fe98 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023c00 	.word	0x40023c00

08000b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_IncTick+0x20>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_IncTick+0x24>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <HAL_IncTick+0x24>)
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20000034 	.word	0x20000034
 8000b24:	20000144 	.word	0x20000144

08000b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <HAL_GetTick+0x14>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000144 	.word	0x20000144

08000b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b72:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	60d3      	str	r3, [r2, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	0a1b      	lsrs	r3, r3, #8
 8000b92:	f003 0307 	and.w	r3, r3, #7
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	db0b      	blt.n	8000bce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	f003 021f 	and.w	r2, r3, #31
 8000bbc:	4907      	ldr	r1, [pc, #28]	; (8000bdc <__NVIC_EnableIRQ+0x38>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	095b      	lsrs	r3, r3, #5
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	e000e100 	.word	0xe000e100

08000be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db0a      	blt.n	8000c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	490c      	ldr	r1, [pc, #48]	; (8000c2c <__NVIC_SetPriority+0x4c>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	0112      	lsls	r2, r2, #4
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	440b      	add	r3, r1
 8000c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c08:	e00a      	b.n	8000c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4908      	ldr	r1, [pc, #32]	; (8000c30 <__NVIC_SetPriority+0x50>)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	f003 030f 	and.w	r3, r3, #15
 8000c16:	3b04      	subs	r3, #4
 8000c18:	0112      	lsls	r2, r2, #4
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	761a      	strb	r2, [r3, #24]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000e100 	.word	0xe000e100
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	; 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f1c3 0307 	rsb	r3, r3, #7
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	bf28      	it	cs
 8000c52:	2304      	movcs	r3, #4
 8000c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	2b06      	cmp	r3, #6
 8000c5c:	d902      	bls.n	8000c64 <NVIC_EncodePriority+0x30>
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3b03      	subs	r3, #3
 8000c62:	e000      	b.n	8000c66 <NVIC_EncodePriority+0x32>
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43da      	mvns	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa01 f303 	lsl.w	r3, r1, r3
 8000c86:	43d9      	mvns	r1, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	4313      	orrs	r3, r2
         );
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3724      	adds	r7, #36	; 0x24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff ff4c 	bl	8000b40 <__NVIC_SetPriorityGrouping>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
 8000cbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc2:	f7ff ff61 	bl	8000b88 <__NVIC_GetPriorityGrouping>
 8000cc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	68b9      	ldr	r1, [r7, #8]
 8000ccc:	6978      	ldr	r0, [r7, #20]
 8000cce:	f7ff ffb1 	bl	8000c34 <NVIC_EncodePriority>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd8:	4611      	mov	r1, r2
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff80 	bl	8000be0 <__NVIC_SetPriority>
}
 8000ce0:	bf00      	nop
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff ff54 	bl	8000ba4 <__NVIC_EnableIRQ>
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
 8000d1e:	e165      	b.n	8000fec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d20:	2201      	movs	r2, #1
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	f040 8154 	bne.w	8000fe6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 0303 	and.w	r3, r3, #3
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d005      	beq.n	8000d56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d130      	bne.n	8000db8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	2203      	movs	r2, #3
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	091b      	lsrs	r3, r3, #4
 8000da2:	f003 0201 	and.w	r2, r3, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d017      	beq.n	8000df4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d123      	bne.n	8000e48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	08da      	lsrs	r2, r3, #3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3208      	adds	r2, #8
 8000e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	f003 0307 	and.w	r3, r3, #7
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	220f      	movs	r2, #15
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	691a      	ldr	r2, [r3, #16]
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	08da      	lsrs	r2, r3, #3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3208      	adds	r2, #8
 8000e42:	69b9      	ldr	r1, [r7, #24]
 8000e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0203 	and.w	r2, r3, #3
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 80ae 	beq.w	8000fe6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b5d      	ldr	r3, [pc, #372]	; (8001004 <HAL_GPIO_Init+0x300>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	4a5c      	ldr	r2, [pc, #368]	; (8001004 <HAL_GPIO_Init+0x300>)
 8000e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e98:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9a:	4b5a      	ldr	r3, [pc, #360]	; (8001004 <HAL_GPIO_Init+0x300>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ea6:	4a58      	ldr	r2, [pc, #352]	; (8001008 <HAL_GPIO_Init+0x304>)
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	089b      	lsrs	r3, r3, #2
 8000eac:	3302      	adds	r3, #2
 8000eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	220f      	movs	r2, #15
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a4f      	ldr	r2, [pc, #316]	; (800100c <HAL_GPIO_Init+0x308>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d025      	beq.n	8000f1e <HAL_GPIO_Init+0x21a>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a4e      	ldr	r2, [pc, #312]	; (8001010 <HAL_GPIO_Init+0x30c>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d01f      	beq.n	8000f1a <HAL_GPIO_Init+0x216>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a4d      	ldr	r2, [pc, #308]	; (8001014 <HAL_GPIO_Init+0x310>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d019      	beq.n	8000f16 <HAL_GPIO_Init+0x212>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a4c      	ldr	r2, [pc, #304]	; (8001018 <HAL_GPIO_Init+0x314>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d013      	beq.n	8000f12 <HAL_GPIO_Init+0x20e>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4b      	ldr	r2, [pc, #300]	; (800101c <HAL_GPIO_Init+0x318>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d00d      	beq.n	8000f0e <HAL_GPIO_Init+0x20a>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a4a      	ldr	r2, [pc, #296]	; (8001020 <HAL_GPIO_Init+0x31c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d007      	beq.n	8000f0a <HAL_GPIO_Init+0x206>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a49      	ldr	r2, [pc, #292]	; (8001024 <HAL_GPIO_Init+0x320>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d101      	bne.n	8000f06 <HAL_GPIO_Init+0x202>
 8000f02:	2306      	movs	r3, #6
 8000f04:	e00c      	b.n	8000f20 <HAL_GPIO_Init+0x21c>
 8000f06:	2307      	movs	r3, #7
 8000f08:	e00a      	b.n	8000f20 <HAL_GPIO_Init+0x21c>
 8000f0a:	2305      	movs	r3, #5
 8000f0c:	e008      	b.n	8000f20 <HAL_GPIO_Init+0x21c>
 8000f0e:	2304      	movs	r3, #4
 8000f10:	e006      	b.n	8000f20 <HAL_GPIO_Init+0x21c>
 8000f12:	2303      	movs	r3, #3
 8000f14:	e004      	b.n	8000f20 <HAL_GPIO_Init+0x21c>
 8000f16:	2302      	movs	r3, #2
 8000f18:	e002      	b.n	8000f20 <HAL_GPIO_Init+0x21c>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e000      	b.n	8000f20 <HAL_GPIO_Init+0x21c>
 8000f1e:	2300      	movs	r3, #0
 8000f20:	69fa      	ldr	r2, [r7, #28]
 8000f22:	f002 0203 	and.w	r2, r2, #3
 8000f26:	0092      	lsls	r2, r2, #2
 8000f28:	4093      	lsls	r3, r2
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f30:	4935      	ldr	r1, [pc, #212]	; (8001008 <HAL_GPIO_Init+0x304>)
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	089b      	lsrs	r3, r3, #2
 8000f36:	3302      	adds	r3, #2
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f3e:	4b3a      	ldr	r3, [pc, #232]	; (8001028 <HAL_GPIO_Init+0x324>)
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f62:	4a31      	ldr	r2, [pc, #196]	; (8001028 <HAL_GPIO_Init+0x324>)
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f68:	4b2f      	ldr	r3, [pc, #188]	; (8001028 <HAL_GPIO_Init+0x324>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f8c:	4a26      	ldr	r2, [pc, #152]	; (8001028 <HAL_GPIO_Init+0x324>)
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f92:	4b25      	ldr	r3, [pc, #148]	; (8001028 <HAL_GPIO_Init+0x324>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fb6:	4a1c      	ldr	r2, [pc, #112]	; (8001028 <HAL_GPIO_Init+0x324>)
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <HAL_GPIO_Init+0x324>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d003      	beq.n	8000fe0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fe0:	4a11      	ldr	r2, [pc, #68]	; (8001028 <HAL_GPIO_Init+0x324>)
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	61fb      	str	r3, [r7, #28]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	2b0f      	cmp	r3, #15
 8000ff0:	f67f ae96 	bls.w	8000d20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	3724      	adds	r7, #36	; 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40023800 	.word	0x40023800
 8001008:	40013800 	.word	0x40013800
 800100c:	40020000 	.word	0x40020000
 8001010:	40020400 	.word	0x40020400
 8001014:	40020800 	.word	0x40020800
 8001018:	40020c00 	.word	0x40020c00
 800101c:	40021000 	.word	0x40021000
 8001020:	40021400 	.word	0x40021400
 8001024:	40021800 	.word	0x40021800
 8001028:	40013c00 	.word	0x40013c00

0800102c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	807b      	strh	r3, [r7, #2]
 8001038:	4613      	mov	r3, r2
 800103a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800103c:	787b      	ldrb	r3, [r7, #1]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001042:	887a      	ldrh	r2, [r7, #2]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001048:	e003      	b.n	8001052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800104a:	887b      	ldrh	r3, [r7, #2]
 800104c:	041a      	lsls	r2, r3, #16
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	619a      	str	r2, [r3, #24]
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800105e:	b480      	push	{r7}
 8001060:	b085      	sub	sp, #20
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	460b      	mov	r3, r1
 8001068:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001070:	887a      	ldrh	r2, [r7, #2]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4013      	ands	r3, r2
 8001076:	041a      	lsls	r2, r3, #16
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	43d9      	mvns	r1, r3
 800107c:	887b      	ldrh	r3, [r7, #2]
 800107e:	400b      	ands	r3, r1
 8001080:	431a      	orrs	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	619a      	str	r2, [r3, #24]
}
 8001086:	bf00      	nop
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	4b20      	ldr	r3, [pc, #128]	; (8001124 <HAL_PWREx_EnableOverDrive+0x90>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	4a1f      	ldr	r2, [pc, #124]	; (8001124 <HAL_PWREx_EnableOverDrive+0x90>)
 80010a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ac:	6413      	str	r3, [r2, #64]	; 0x40
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <HAL_PWREx_EnableOverDrive+0x90>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80010ba:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <HAL_PWREx_EnableOverDrive+0x94>)
 80010bc:	2201      	movs	r2, #1
 80010be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010c0:	f7ff fd32 	bl	8000b28 <HAL_GetTick>
 80010c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80010c6:	e009      	b.n	80010dc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010c8:	f7ff fd2e 	bl	8000b28 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010d6:	d901      	bls.n	80010dc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e01f      	b.n	800111c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <HAL_PWREx_EnableOverDrive+0x98>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e8:	d1ee      	bne.n	80010c8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_PWREx_EnableOverDrive+0x9c>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010f0:	f7ff fd1a 	bl	8000b28 <HAL_GetTick>
 80010f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80010f6:	e009      	b.n	800110c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010f8:	f7ff fd16 	bl	8000b28 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001106:	d901      	bls.n	800110c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e007      	b.n	800111c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <HAL_PWREx_EnableOverDrive+0x98>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001114:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001118:	d1ee      	bne.n	80010f8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40023800 	.word	0x40023800
 8001128:	420e0040 	.word	0x420e0040
 800112c:	40007000 	.word	0x40007000
 8001130:	420e0044 	.word	0x420e0044

08001134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d101      	bne.n	8001148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e0cc      	b.n	80012e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001148:	4b68      	ldr	r3, [pc, #416]	; (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 030f 	and.w	r3, r3, #15
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	429a      	cmp	r2, r3
 8001154:	d90c      	bls.n	8001170 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001156:	4b65      	ldr	r3, [pc, #404]	; (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800115e:	4b63      	ldr	r3, [pc, #396]	; (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	429a      	cmp	r2, r3
 800116a:	d001      	beq.n	8001170 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e0b8      	b.n	80012e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	2b00      	cmp	r3, #0
 800117a:	d020      	beq.n	80011be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	2b00      	cmp	r3, #0
 8001186:	d005      	beq.n	8001194 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001188:	4b59      	ldr	r3, [pc, #356]	; (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	4a58      	ldr	r2, [pc, #352]	; (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 800118e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001192:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	2b00      	cmp	r3, #0
 800119e:	d005      	beq.n	80011ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011a0:	4b53      	ldr	r3, [pc, #332]	; (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	4a52      	ldr	r2, [pc, #328]	; (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 80011a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011ac:	4b50      	ldr	r3, [pc, #320]	; (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	494d      	ldr	r1, [pc, #308]	; (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d044      	beq.n	8001254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d107      	bne.n	80011e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d2:	4b47      	ldr	r3, [pc, #284]	; (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d119      	bne.n	8001212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e07f      	b.n	80012e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d003      	beq.n	80011f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ee:	2b03      	cmp	r3, #3
 80011f0:	d107      	bne.n	8001202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011f2:	4b3f      	ldr	r3, [pc, #252]	; (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d109      	bne.n	8001212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e06f      	b.n	80012e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001202:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e067      	b.n	80012e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001212:	4b37      	ldr	r3, [pc, #220]	; (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f023 0203 	bic.w	r2, r3, #3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	4934      	ldr	r1, [pc, #208]	; (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001220:	4313      	orrs	r3, r2
 8001222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001224:	f7ff fc80 	bl	8000b28 <HAL_GetTick>
 8001228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800122a:	e00a      	b.n	8001242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800122c:	f7ff fc7c 	bl	8000b28 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	f241 3288 	movw	r2, #5000	; 0x1388
 800123a:	4293      	cmp	r3, r2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e04f      	b.n	80012e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001242:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f003 020c 	and.w	r2, r3, #12
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	429a      	cmp	r2, r3
 8001252:	d1eb      	bne.n	800122c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001254:	4b25      	ldr	r3, [pc, #148]	; (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 030f 	and.w	r3, r3, #15
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	429a      	cmp	r2, r3
 8001260:	d20c      	bcs.n	800127c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001262:	4b22      	ldr	r3, [pc, #136]	; (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <HAL_RCC_ClockConfig+0x1b8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	d001      	beq.n	800127c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e032      	b.n	80012e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	2b00      	cmp	r3, #0
 8001286:	d008      	beq.n	800129a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001288:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	4916      	ldr	r1, [pc, #88]	; (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001296:	4313      	orrs	r3, r2
 8001298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d009      	beq.n	80012ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	490e      	ldr	r1, [pc, #56]	; (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012ba:	f000 f887 	bl	80013cc <HAL_RCC_GetSysClockFreq>
 80012be:	4602      	mov	r2, r0
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <HAL_RCC_ClockConfig+0x1bc>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	091b      	lsrs	r3, r3, #4
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	490a      	ldr	r1, [pc, #40]	; (80012f4 <HAL_RCC_ClockConfig+0x1c0>)
 80012cc:	5ccb      	ldrb	r3, [r1, r3]
 80012ce:	fa22 f303 	lsr.w	r3, r2, r3
 80012d2:	4a09      	ldr	r2, [pc, #36]	; (80012f8 <HAL_RCC_ClockConfig+0x1c4>)
 80012d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <HAL_RCC_ClockConfig+0x1c8>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fb16 	bl	800090c <HAL_InitTick>

  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023c00 	.word	0x40023c00
 80012f0:	40023800 	.word	0x40023800
 80012f4:	080058c4 	.word	0x080058c4
 80012f8:	2000002c 	.word	0x2000002c
 80012fc:	20000030 	.word	0x20000030

08001300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <HAL_RCC_GetHCLKFreq+0x14>)
 8001306:	681b      	ldr	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	2000002c 	.word	0x2000002c

08001318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800131c:	f7ff fff0 	bl	8001300 <HAL_RCC_GetHCLKFreq>
 8001320:	4602      	mov	r2, r0
 8001322:	4b05      	ldr	r3, [pc, #20]	; (8001338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	0a9b      	lsrs	r3, r3, #10
 8001328:	f003 0307 	and.w	r3, r3, #7
 800132c:	4903      	ldr	r1, [pc, #12]	; (800133c <HAL_RCC_GetPCLK1Freq+0x24>)
 800132e:	5ccb      	ldrb	r3, [r1, r3]
 8001330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001334:	4618      	mov	r0, r3
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40023800 	.word	0x40023800
 800133c:	080058d4 	.word	0x080058d4

08001340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001344:	f7ff ffdc 	bl	8001300 <HAL_RCC_GetHCLKFreq>
 8001348:	4602      	mov	r2, r0
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	0b5b      	lsrs	r3, r3, #13
 8001350:	f003 0307 	and.w	r3, r3, #7
 8001354:	4903      	ldr	r1, [pc, #12]	; (8001364 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001356:	5ccb      	ldrb	r3, [r1, r3]
 8001358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800135c:	4618      	mov	r0, r3
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40023800 	.word	0x40023800
 8001364:	080058d4 	.word	0x080058d4

08001368 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	220f      	movs	r2, #15
 8001376:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_RCC_GetClockConfig+0x5c>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 0203 	and.w	r2, r3, #3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_RCC_GetClockConfig+0x5c>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <HAL_RCC_GetClockConfig+0x5c>)
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <HAL_RCC_GetClockConfig+0x5c>)
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	08db      	lsrs	r3, r3, #3
 80013a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <HAL_RCC_GetClockConfig+0x60>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 020f 	and.w	r2, r3, #15
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	601a      	str	r2, [r3, #0]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40023c00 	.word	0x40023c00

080013cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013d0:	b0ae      	sub	sp, #184	; 0xb8
 80013d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80013da:	2300      	movs	r3, #0
 80013dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013f2:	4bcb      	ldr	r3, [pc, #812]	; (8001720 <HAL_RCC_GetSysClockFreq+0x354>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 030c 	and.w	r3, r3, #12
 80013fa:	2b0c      	cmp	r3, #12
 80013fc:	f200 8206 	bhi.w	800180c <HAL_RCC_GetSysClockFreq+0x440>
 8001400:	a201      	add	r2, pc, #4	; (adr r2, 8001408 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001406:	bf00      	nop
 8001408:	0800143d 	.word	0x0800143d
 800140c:	0800180d 	.word	0x0800180d
 8001410:	0800180d 	.word	0x0800180d
 8001414:	0800180d 	.word	0x0800180d
 8001418:	08001445 	.word	0x08001445
 800141c:	0800180d 	.word	0x0800180d
 8001420:	0800180d 	.word	0x0800180d
 8001424:	0800180d 	.word	0x0800180d
 8001428:	0800144d 	.word	0x0800144d
 800142c:	0800180d 	.word	0x0800180d
 8001430:	0800180d 	.word	0x0800180d
 8001434:	0800180d 	.word	0x0800180d
 8001438:	0800163d 	.word	0x0800163d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800143c:	4bb9      	ldr	r3, [pc, #740]	; (8001724 <HAL_RCC_GetSysClockFreq+0x358>)
 800143e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001442:	e1e7      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001444:	4bb8      	ldr	r3, [pc, #736]	; (8001728 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001446:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800144a:	e1e3      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800144c:	4bb4      	ldr	r3, [pc, #720]	; (8001720 <HAL_RCC_GetSysClockFreq+0x354>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001454:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001458:	4bb1      	ldr	r3, [pc, #708]	; (8001720 <HAL_RCC_GetSysClockFreq+0x354>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d071      	beq.n	8001548 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001464:	4bae      	ldr	r3, [pc, #696]	; (8001720 <HAL_RCC_GetSysClockFreq+0x354>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	099b      	lsrs	r3, r3, #6
 800146a:	2200      	movs	r2, #0
 800146c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001470:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001474:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800147c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001480:	2300      	movs	r3, #0
 8001482:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001486:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800148a:	4622      	mov	r2, r4
 800148c:	462b      	mov	r3, r5
 800148e:	f04f 0000 	mov.w	r0, #0
 8001492:	f04f 0100 	mov.w	r1, #0
 8001496:	0159      	lsls	r1, r3, #5
 8001498:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800149c:	0150      	lsls	r0, r2, #5
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4621      	mov	r1, r4
 80014a4:	1a51      	subs	r1, r2, r1
 80014a6:	6439      	str	r1, [r7, #64]	; 0x40
 80014a8:	4629      	mov	r1, r5
 80014aa:	eb63 0301 	sbc.w	r3, r3, r1
 80014ae:	647b      	str	r3, [r7, #68]	; 0x44
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	f04f 0300 	mov.w	r3, #0
 80014b8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80014bc:	4649      	mov	r1, r9
 80014be:	018b      	lsls	r3, r1, #6
 80014c0:	4641      	mov	r1, r8
 80014c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014c6:	4641      	mov	r1, r8
 80014c8:	018a      	lsls	r2, r1, #6
 80014ca:	4641      	mov	r1, r8
 80014cc:	1a51      	subs	r1, r2, r1
 80014ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80014d0:	4649      	mov	r1, r9
 80014d2:	eb63 0301 	sbc.w	r3, r3, r1
 80014d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80014e4:	4649      	mov	r1, r9
 80014e6:	00cb      	lsls	r3, r1, #3
 80014e8:	4641      	mov	r1, r8
 80014ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014ee:	4641      	mov	r1, r8
 80014f0:	00ca      	lsls	r2, r1, #3
 80014f2:	4610      	mov	r0, r2
 80014f4:	4619      	mov	r1, r3
 80014f6:	4603      	mov	r3, r0
 80014f8:	4622      	mov	r2, r4
 80014fa:	189b      	adds	r3, r3, r2
 80014fc:	633b      	str	r3, [r7, #48]	; 0x30
 80014fe:	462b      	mov	r3, r5
 8001500:	460a      	mov	r2, r1
 8001502:	eb42 0303 	adc.w	r3, r2, r3
 8001506:	637b      	str	r3, [r7, #52]	; 0x34
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	f04f 0300 	mov.w	r3, #0
 8001510:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001514:	4629      	mov	r1, r5
 8001516:	024b      	lsls	r3, r1, #9
 8001518:	4621      	mov	r1, r4
 800151a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800151e:	4621      	mov	r1, r4
 8001520:	024a      	lsls	r2, r1, #9
 8001522:	4610      	mov	r0, r2
 8001524:	4619      	mov	r1, r3
 8001526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800152a:	2200      	movs	r2, #0
 800152c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001530:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001534:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001538:	f7fe fe6a 	bl	8000210 <__aeabi_uldivmod>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4613      	mov	r3, r2
 8001542:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001546:	e067      	b.n	8001618 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001548:	4b75      	ldr	r3, [pc, #468]	; (8001720 <HAL_RCC_GetSysClockFreq+0x354>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	099b      	lsrs	r3, r3, #6
 800154e:	2200      	movs	r2, #0
 8001550:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001554:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001558:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800155c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001560:	67bb      	str	r3, [r7, #120]	; 0x78
 8001562:	2300      	movs	r3, #0
 8001564:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001566:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800156a:	4622      	mov	r2, r4
 800156c:	462b      	mov	r3, r5
 800156e:	f04f 0000 	mov.w	r0, #0
 8001572:	f04f 0100 	mov.w	r1, #0
 8001576:	0159      	lsls	r1, r3, #5
 8001578:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800157c:	0150      	lsls	r0, r2, #5
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4621      	mov	r1, r4
 8001584:	1a51      	subs	r1, r2, r1
 8001586:	62b9      	str	r1, [r7, #40]	; 0x28
 8001588:	4629      	mov	r1, r5
 800158a:	eb63 0301 	sbc.w	r3, r3, r1
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 0300 	mov.w	r3, #0
 8001598:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800159c:	4649      	mov	r1, r9
 800159e:	018b      	lsls	r3, r1, #6
 80015a0:	4641      	mov	r1, r8
 80015a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015a6:	4641      	mov	r1, r8
 80015a8:	018a      	lsls	r2, r1, #6
 80015aa:	4641      	mov	r1, r8
 80015ac:	ebb2 0a01 	subs.w	sl, r2, r1
 80015b0:	4649      	mov	r1, r9
 80015b2:	eb63 0b01 	sbc.w	fp, r3, r1
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80015c2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80015c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80015ca:	4692      	mov	sl, r2
 80015cc:	469b      	mov	fp, r3
 80015ce:	4623      	mov	r3, r4
 80015d0:	eb1a 0303 	adds.w	r3, sl, r3
 80015d4:	623b      	str	r3, [r7, #32]
 80015d6:	462b      	mov	r3, r5
 80015d8:	eb4b 0303 	adc.w	r3, fp, r3
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015ea:	4629      	mov	r1, r5
 80015ec:	028b      	lsls	r3, r1, #10
 80015ee:	4621      	mov	r1, r4
 80015f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015f4:	4621      	mov	r1, r4
 80015f6:	028a      	lsls	r2, r1, #10
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001600:	2200      	movs	r2, #0
 8001602:	673b      	str	r3, [r7, #112]	; 0x70
 8001604:	677a      	str	r2, [r7, #116]	; 0x74
 8001606:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800160a:	f7fe fe01 	bl	8000210 <__aeabi_uldivmod>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4613      	mov	r3, r2
 8001614:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001618:	4b41      	ldr	r3, [pc, #260]	; (8001720 <HAL_RCC_GetSysClockFreq+0x354>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	0c1b      	lsrs	r3, r3, #16
 800161e:	f003 0303 	and.w	r3, r3, #3
 8001622:	3301      	adds	r3, #1
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800162a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800162e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001632:	fbb2 f3f3 	udiv	r3, r2, r3
 8001636:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800163a:	e0eb      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800163c:	4b38      	ldr	r3, [pc, #224]	; (8001720 <HAL_RCC_GetSysClockFreq+0x354>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001644:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001648:	4b35      	ldr	r3, [pc, #212]	; (8001720 <HAL_RCC_GetSysClockFreq+0x354>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d06b      	beq.n	800172c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001654:	4b32      	ldr	r3, [pc, #200]	; (8001720 <HAL_RCC_GetSysClockFreq+0x354>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	099b      	lsrs	r3, r3, #6
 800165a:	2200      	movs	r2, #0
 800165c:	66bb      	str	r3, [r7, #104]	; 0x68
 800165e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001660:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001666:	663b      	str	r3, [r7, #96]	; 0x60
 8001668:	2300      	movs	r3, #0
 800166a:	667b      	str	r3, [r7, #100]	; 0x64
 800166c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001670:	4622      	mov	r2, r4
 8001672:	462b      	mov	r3, r5
 8001674:	f04f 0000 	mov.w	r0, #0
 8001678:	f04f 0100 	mov.w	r1, #0
 800167c:	0159      	lsls	r1, r3, #5
 800167e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001682:	0150      	lsls	r0, r2, #5
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4621      	mov	r1, r4
 800168a:	1a51      	subs	r1, r2, r1
 800168c:	61b9      	str	r1, [r7, #24]
 800168e:	4629      	mov	r1, r5
 8001690:	eb63 0301 	sbc.w	r3, r3, r1
 8001694:	61fb      	str	r3, [r7, #28]
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	f04f 0300 	mov.w	r3, #0
 800169e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80016a2:	4659      	mov	r1, fp
 80016a4:	018b      	lsls	r3, r1, #6
 80016a6:	4651      	mov	r1, sl
 80016a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016ac:	4651      	mov	r1, sl
 80016ae:	018a      	lsls	r2, r1, #6
 80016b0:	4651      	mov	r1, sl
 80016b2:	ebb2 0801 	subs.w	r8, r2, r1
 80016b6:	4659      	mov	r1, fp
 80016b8:	eb63 0901 	sbc.w	r9, r3, r1
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016d0:	4690      	mov	r8, r2
 80016d2:	4699      	mov	r9, r3
 80016d4:	4623      	mov	r3, r4
 80016d6:	eb18 0303 	adds.w	r3, r8, r3
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	462b      	mov	r3, r5
 80016de:	eb49 0303 	adc.w	r3, r9, r3
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016f0:	4629      	mov	r1, r5
 80016f2:	024b      	lsls	r3, r1, #9
 80016f4:	4621      	mov	r1, r4
 80016f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016fa:	4621      	mov	r1, r4
 80016fc:	024a      	lsls	r2, r1, #9
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001706:	2200      	movs	r2, #0
 8001708:	65bb      	str	r3, [r7, #88]	; 0x58
 800170a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800170c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001710:	f7fe fd7e 	bl	8000210 <__aeabi_uldivmod>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4613      	mov	r3, r2
 800171a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800171e:	e065      	b.n	80017ec <HAL_RCC_GetSysClockFreq+0x420>
 8001720:	40023800 	.word	0x40023800
 8001724:	00f42400 	.word	0x00f42400
 8001728:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800172c:	4b3d      	ldr	r3, [pc, #244]	; (8001824 <HAL_RCC_GetSysClockFreq+0x458>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	099b      	lsrs	r3, r3, #6
 8001732:	2200      	movs	r2, #0
 8001734:	4618      	mov	r0, r3
 8001736:	4611      	mov	r1, r2
 8001738:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800173c:	653b      	str	r3, [r7, #80]	; 0x50
 800173e:	2300      	movs	r3, #0
 8001740:	657b      	str	r3, [r7, #84]	; 0x54
 8001742:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001746:	4642      	mov	r2, r8
 8001748:	464b      	mov	r3, r9
 800174a:	f04f 0000 	mov.w	r0, #0
 800174e:	f04f 0100 	mov.w	r1, #0
 8001752:	0159      	lsls	r1, r3, #5
 8001754:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001758:	0150      	lsls	r0, r2, #5
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4641      	mov	r1, r8
 8001760:	1a51      	subs	r1, r2, r1
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	4649      	mov	r1, r9
 8001766:	eb63 0301 	sbc.w	r3, r3, r1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001778:	4659      	mov	r1, fp
 800177a:	018b      	lsls	r3, r1, #6
 800177c:	4651      	mov	r1, sl
 800177e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001782:	4651      	mov	r1, sl
 8001784:	018a      	lsls	r2, r1, #6
 8001786:	4651      	mov	r1, sl
 8001788:	1a54      	subs	r4, r2, r1
 800178a:	4659      	mov	r1, fp
 800178c:	eb63 0501 	sbc.w	r5, r3, r1
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	00eb      	lsls	r3, r5, #3
 800179a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800179e:	00e2      	lsls	r2, r4, #3
 80017a0:	4614      	mov	r4, r2
 80017a2:	461d      	mov	r5, r3
 80017a4:	4643      	mov	r3, r8
 80017a6:	18e3      	adds	r3, r4, r3
 80017a8:	603b      	str	r3, [r7, #0]
 80017aa:	464b      	mov	r3, r9
 80017ac:	eb45 0303 	adc.w	r3, r5, r3
 80017b0:	607b      	str	r3, [r7, #4]
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017be:	4629      	mov	r1, r5
 80017c0:	028b      	lsls	r3, r1, #10
 80017c2:	4621      	mov	r1, r4
 80017c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017c8:	4621      	mov	r1, r4
 80017ca:	028a      	lsls	r2, r1, #10
 80017cc:	4610      	mov	r0, r2
 80017ce:	4619      	mov	r1, r3
 80017d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017d4:	2200      	movs	r2, #0
 80017d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80017d8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80017da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017de:	f7fe fd17 	bl	8000210 <__aeabi_uldivmod>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4613      	mov	r3, r2
 80017e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017ec:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <HAL_RCC_GetSysClockFreq+0x458>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	0f1b      	lsrs	r3, r3, #28
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80017fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80017fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001802:	fbb2 f3f3 	udiv	r3, r2, r3
 8001806:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800180a:	e003      	b.n	8001814 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_RCC_GetSysClockFreq+0x45c>)
 800180e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001812:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001814:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001818:	4618      	mov	r0, r3
 800181a:	37b8      	adds	r7, #184	; 0xb8
 800181c:	46bd      	mov	sp, r7
 800181e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800
 8001828:	00f42400 	.word	0x00f42400

0800182c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e28d      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 8083 	beq.w	8001952 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800184c:	4b94      	ldr	r3, [pc, #592]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 030c 	and.w	r3, r3, #12
 8001854:	2b04      	cmp	r3, #4
 8001856:	d019      	beq.n	800188c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001858:	4b91      	ldr	r3, [pc, #580]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001860:	2b08      	cmp	r3, #8
 8001862:	d106      	bne.n	8001872 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001864:	4b8e      	ldr	r3, [pc, #568]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001870:	d00c      	beq.n	800188c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001872:	4b8b      	ldr	r3, [pc, #556]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800187a:	2b0c      	cmp	r3, #12
 800187c:	d112      	bne.n	80018a4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800187e:	4b88      	ldr	r3, [pc, #544]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001886:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800188a:	d10b      	bne.n	80018a4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188c:	4b84      	ldr	r3, [pc, #528]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d05b      	beq.n	8001950 <HAL_RCC_OscConfig+0x124>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d157      	bne.n	8001950 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e25a      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ac:	d106      	bne.n	80018bc <HAL_RCC_OscConfig+0x90>
 80018ae:	4b7c      	ldr	r3, [pc, #496]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a7b      	ldr	r2, [pc, #492]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 80018b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e01d      	b.n	80018f8 <HAL_RCC_OscConfig+0xcc>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c4:	d10c      	bne.n	80018e0 <HAL_RCC_OscConfig+0xb4>
 80018c6:	4b76      	ldr	r3, [pc, #472]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a75      	ldr	r2, [pc, #468]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 80018cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	4b73      	ldr	r3, [pc, #460]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a72      	ldr	r2, [pc, #456]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 80018d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	e00b      	b.n	80018f8 <HAL_RCC_OscConfig+0xcc>
 80018e0:	4b6f      	ldr	r3, [pc, #444]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a6e      	ldr	r2, [pc, #440]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 80018e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b6c      	ldr	r3, [pc, #432]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a6b      	ldr	r2, [pc, #428]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 80018f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d013      	beq.n	8001928 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff f912 	bl	8000b28 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001908:	f7ff f90e 	bl	8000b28 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	; 0x64
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e21f      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191a:	4b61      	ldr	r3, [pc, #388]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0xdc>
 8001926:	e014      	b.n	8001952 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff f8fe 	bl	8000b28 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001930:	f7ff f8fa 	bl	8000b28 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b64      	cmp	r3, #100	; 0x64
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e20b      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001942:	4b57      	ldr	r3, [pc, #348]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x104>
 800194e:	e000      	b.n	8001952 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d06f      	beq.n	8001a3e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800195e:	4b50      	ldr	r3, [pc, #320]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 030c 	and.w	r3, r3, #12
 8001966:	2b00      	cmp	r3, #0
 8001968:	d017      	beq.n	800199a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800196a:	4b4d      	ldr	r3, [pc, #308]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001972:	2b08      	cmp	r3, #8
 8001974:	d105      	bne.n	8001982 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001976:	4b4a      	ldr	r3, [pc, #296]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00b      	beq.n	800199a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001982:	4b47      	ldr	r3, [pc, #284]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800198a:	2b0c      	cmp	r3, #12
 800198c:	d11c      	bne.n	80019c8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800198e:	4b44      	ldr	r3, [pc, #272]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d116      	bne.n	80019c8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199a:	4b41      	ldr	r3, [pc, #260]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d005      	beq.n	80019b2 <HAL_RCC_OscConfig+0x186>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d001      	beq.n	80019b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e1d3      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b2:	4b3b      	ldr	r3, [pc, #236]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	4937      	ldr	r1, [pc, #220]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c6:	e03a      	b.n	8001a3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d020      	beq.n	8001a12 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d0:	4b34      	ldr	r3, [pc, #208]	; (8001aa4 <HAL_RCC_OscConfig+0x278>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d6:	f7ff f8a7 	bl	8000b28 <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019de:	f7ff f8a3 	bl	8000b28 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e1b4      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f0:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fc:	4b28      	ldr	r3, [pc, #160]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	4925      	ldr	r1, [pc, #148]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	600b      	str	r3, [r1, #0]
 8001a10:	e015      	b.n	8001a3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a12:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <HAL_RCC_OscConfig+0x278>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a18:	f7ff f886 	bl	8000b28 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a20:	f7ff f882 	bl	8000b28 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e193      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a32:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d036      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d016      	beq.n	8001a80 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a58:	f7ff f866 	bl	8000b28 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a60:	f7ff f862 	bl	8000b28 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e173      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_RCC_OscConfig+0x274>)
 8001a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0x234>
 8001a7e:	e01b      	b.n	8001ab8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_RCC_OscConfig+0x27c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a86:	f7ff f84f 	bl	8000b28 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a8c:	e00e      	b.n	8001aac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a8e:	f7ff f84b 	bl	8000b28 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d907      	bls.n	8001aac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e15c      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	42470000 	.word	0x42470000
 8001aa8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aac:	4b8a      	ldr	r3, [pc, #552]	; (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1ea      	bne.n	8001a8e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f000 8097 	beq.w	8001bf4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aca:	4b83      	ldr	r3, [pc, #524]	; (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d10f      	bne.n	8001af6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	4b7f      	ldr	r3, [pc, #508]	; (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	4a7e      	ldr	r2, [pc, #504]	; (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae6:	4b7c      	ldr	r3, [pc, #496]	; (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001af2:	2301      	movs	r3, #1
 8001af4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af6:	4b79      	ldr	r3, [pc, #484]	; (8001cdc <HAL_RCC_OscConfig+0x4b0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d118      	bne.n	8001b34 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b02:	4b76      	ldr	r3, [pc, #472]	; (8001cdc <HAL_RCC_OscConfig+0x4b0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a75      	ldr	r2, [pc, #468]	; (8001cdc <HAL_RCC_OscConfig+0x4b0>)
 8001b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b0e:	f7ff f80b 	bl	8000b28 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b16:	f7ff f807 	bl	8000b28 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e118      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b28:	4b6c      	ldr	r3, [pc, #432]	; (8001cdc <HAL_RCC_OscConfig+0x4b0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d0f0      	beq.n	8001b16 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d106      	bne.n	8001b4a <HAL_RCC_OscConfig+0x31e>
 8001b3c:	4b66      	ldr	r3, [pc, #408]	; (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b40:	4a65      	ldr	r2, [pc, #404]	; (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6713      	str	r3, [r2, #112]	; 0x70
 8001b48:	e01c      	b.n	8001b84 <HAL_RCC_OscConfig+0x358>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b05      	cmp	r3, #5
 8001b50:	d10c      	bne.n	8001b6c <HAL_RCC_OscConfig+0x340>
 8001b52:	4b61      	ldr	r3, [pc, #388]	; (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b56:	4a60      	ldr	r2, [pc, #384]	; (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001b58:	f043 0304 	orr.w	r3, r3, #4
 8001b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b5e:	4b5e      	ldr	r3, [pc, #376]	; (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b62:	4a5d      	ldr	r2, [pc, #372]	; (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6713      	str	r3, [r2, #112]	; 0x70
 8001b6a:	e00b      	b.n	8001b84 <HAL_RCC_OscConfig+0x358>
 8001b6c:	4b5a      	ldr	r3, [pc, #360]	; (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b70:	4a59      	ldr	r2, [pc, #356]	; (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001b72:	f023 0301 	bic.w	r3, r3, #1
 8001b76:	6713      	str	r3, [r2, #112]	; 0x70
 8001b78:	4b57      	ldr	r3, [pc, #348]	; (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7c:	4a56      	ldr	r2, [pc, #344]	; (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001b7e:	f023 0304 	bic.w	r3, r3, #4
 8001b82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d015      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8c:	f7fe ffcc 	bl	8000b28 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b94:	f7fe ffc8 	bl	8000b28 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e0d7      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001baa:	4b4b      	ldr	r3, [pc, #300]	; (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0ee      	beq.n	8001b94 <HAL_RCC_OscConfig+0x368>
 8001bb6:	e014      	b.n	8001be2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb8:	f7fe ffb6 	bl	8000b28 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bbe:	e00a      	b.n	8001bd6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc0:	f7fe ffb2 	bl	8000b28 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e0c1      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd6:	4b40      	ldr	r3, [pc, #256]	; (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1ee      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001be2:	7dfb      	ldrb	r3, [r7, #23]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d105      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be8:	4b3b      	ldr	r3, [pc, #236]	; (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	4a3a      	ldr	r2, [pc, #232]	; (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001bee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 80ad 	beq.w	8001d58 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bfe:	4b36      	ldr	r3, [pc, #216]	; (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d060      	beq.n	8001ccc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d145      	bne.n	8001c9e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c12:	4b33      	ldr	r3, [pc, #204]	; (8001ce0 <HAL_RCC_OscConfig+0x4b4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c18:	f7fe ff86 	bl	8000b28 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c20:	f7fe ff82 	bl	8000b28 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e093      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c32:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69da      	ldr	r2, [r3, #28]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	019b      	lsls	r3, r3, #6
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c54:	085b      	lsrs	r3, r3, #1
 8001c56:	3b01      	subs	r3, #1
 8001c58:	041b      	lsls	r3, r3, #16
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c60:	061b      	lsls	r3, r3, #24
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	071b      	lsls	r3, r3, #28
 8001c6a:	491b      	ldr	r1, [pc, #108]	; (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c70:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <HAL_RCC_OscConfig+0x4b4>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c76:	f7fe ff57 	bl	8000b28 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7fe ff53 	bl	8000b28 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e064      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x452>
 8001c9c:	e05c      	b.n	8001d58 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <HAL_RCC_OscConfig+0x4b4>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7fe ff40 	bl	8000b28 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cac:	f7fe ff3c 	bl	8000b28 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e04d      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_RCC_OscConfig+0x4ac>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x480>
 8001cca:	e045      	b.n	8001d58 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d107      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e040      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40007000 	.word	0x40007000
 8001ce0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ce4:	4b1f      	ldr	r3, [pc, #124]	; (8001d64 <HAL_RCC_OscConfig+0x538>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d030      	beq.n	8001d54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d129      	bne.n	8001d54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d122      	bne.n	8001d54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d14:	4013      	ands	r3, r2
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d119      	bne.n	8001d54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2a:	085b      	lsrs	r3, r3, #1
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d10f      	bne.n	8001d54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d107      	bne.n	8001d54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d001      	beq.n	8001d58 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800

08001d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e041      	b.n	8001dfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d106      	bne.n	8001d94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f839 	bl	8001e06 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2202      	movs	r2, #2
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3304      	adds	r3, #4
 8001da4:	4619      	mov	r1, r3
 8001da6:	4610      	mov	r0, r2
 8001da8:	f000 f9c0 	bl	800212c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d001      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e04e      	b.n	8001ed2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2202      	movs	r2, #2
 8001e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0201 	orr.w	r2, r2, #1
 8001e4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a23      	ldr	r2, [pc, #140]	; (8001ee0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d022      	beq.n	8001e9c <HAL_TIM_Base_Start_IT+0x80>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e5e:	d01d      	beq.n	8001e9c <HAL_TIM_Base_Start_IT+0x80>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a1f      	ldr	r2, [pc, #124]	; (8001ee4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d018      	beq.n	8001e9c <HAL_TIM_Base_Start_IT+0x80>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a1e      	ldr	r2, [pc, #120]	; (8001ee8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d013      	beq.n	8001e9c <HAL_TIM_Base_Start_IT+0x80>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a1c      	ldr	r2, [pc, #112]	; (8001eec <HAL_TIM_Base_Start_IT+0xd0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d00e      	beq.n	8001e9c <HAL_TIM_Base_Start_IT+0x80>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a1b      	ldr	r2, [pc, #108]	; (8001ef0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d009      	beq.n	8001e9c <HAL_TIM_Base_Start_IT+0x80>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a19      	ldr	r2, [pc, #100]	; (8001ef4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d004      	beq.n	8001e9c <HAL_TIM_Base_Start_IT+0x80>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a18      	ldr	r2, [pc, #96]	; (8001ef8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d111      	bne.n	8001ec0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d010      	beq.n	8001ed0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f042 0201 	orr.w	r2, r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ebe:	e007      	b.n	8001ed0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0201 	orr.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40010000 	.word	0x40010000
 8001ee4:	40000400 	.word	0x40000400
 8001ee8:	40000800 	.word	0x40000800
 8001eec:	40000c00 	.word	0x40000c00
 8001ef0:	40010400 	.word	0x40010400
 8001ef4:	40014000 	.word	0x40014000
 8001ef8:	40001800 	.word	0x40001800

08001efc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d020      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d01b      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0202 	mvn.w	r2, #2
 8001f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f8d2 	bl	80020f0 <HAL_TIM_IC_CaptureCallback>
 8001f4c:	e005      	b.n	8001f5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f8c4 	bl	80020dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f8d5 	bl	8002104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d020      	beq.n	8001fac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d01b      	beq.n	8001fac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0204 	mvn.w	r2, #4
 8001f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2202      	movs	r2, #2
 8001f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f8ac 	bl	80020f0 <HAL_TIM_IC_CaptureCallback>
 8001f98:	e005      	b.n	8001fa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f89e 	bl	80020dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f8af 	bl	8002104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d020      	beq.n	8001ff8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d01b      	beq.n	8001ff8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f06f 0208 	mvn.w	r2, #8
 8001fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2204      	movs	r2, #4
 8001fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f886 	bl	80020f0 <HAL_TIM_IC_CaptureCallback>
 8001fe4:	e005      	b.n	8001ff2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f878 	bl	80020dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f889 	bl	8002104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d020      	beq.n	8002044 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f003 0310 	and.w	r3, r3, #16
 8002008:	2b00      	cmp	r3, #0
 800200a:	d01b      	beq.n	8002044 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f06f 0210 	mvn.w	r2, #16
 8002014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2208      	movs	r2, #8
 800201a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f860 	bl	80020f0 <HAL_TIM_IC_CaptureCallback>
 8002030:	e005      	b.n	800203e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f852 	bl	80020dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f863 	bl	8002104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00c      	beq.n	8002068 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b00      	cmp	r3, #0
 8002056:	d007      	beq.n	8002068 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0201 	mvn.w	r2, #1
 8002060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7fe fbc6 	bl	80007f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00c      	beq.n	800208c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002078:	2b00      	cmp	r3, #0
 800207a:	d007      	beq.n	800208c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f906 	bl	8002298 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00c      	beq.n	80020b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209c:	2b00      	cmp	r3, #0
 800209e:	d007      	beq.n	80020b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f834 	bl	8002118 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f003 0320 	and.w	r3, r3, #32
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00c      	beq.n	80020d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f003 0320 	and.w	r3, r3, #32
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d007      	beq.n	80020d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0220 	mvn.w	r2, #32
 80020cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f8d8 	bl	8002284 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020d4:	bf00      	nop
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a46      	ldr	r2, [pc, #280]	; (8002258 <TIM_Base_SetConfig+0x12c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d013      	beq.n	800216c <TIM_Base_SetConfig+0x40>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800214a:	d00f      	beq.n	800216c <TIM_Base_SetConfig+0x40>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a43      	ldr	r2, [pc, #268]	; (800225c <TIM_Base_SetConfig+0x130>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d00b      	beq.n	800216c <TIM_Base_SetConfig+0x40>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a42      	ldr	r2, [pc, #264]	; (8002260 <TIM_Base_SetConfig+0x134>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d007      	beq.n	800216c <TIM_Base_SetConfig+0x40>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a41      	ldr	r2, [pc, #260]	; (8002264 <TIM_Base_SetConfig+0x138>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d003      	beq.n	800216c <TIM_Base_SetConfig+0x40>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a40      	ldr	r2, [pc, #256]	; (8002268 <TIM_Base_SetConfig+0x13c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d108      	bne.n	800217e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a35      	ldr	r2, [pc, #212]	; (8002258 <TIM_Base_SetConfig+0x12c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d02b      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800218c:	d027      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a32      	ldr	r2, [pc, #200]	; (800225c <TIM_Base_SetConfig+0x130>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d023      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a31      	ldr	r2, [pc, #196]	; (8002260 <TIM_Base_SetConfig+0x134>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d01f      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a30      	ldr	r2, [pc, #192]	; (8002264 <TIM_Base_SetConfig+0x138>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d01b      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a2f      	ldr	r2, [pc, #188]	; (8002268 <TIM_Base_SetConfig+0x13c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d017      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a2e      	ldr	r2, [pc, #184]	; (800226c <TIM_Base_SetConfig+0x140>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d013      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a2d      	ldr	r2, [pc, #180]	; (8002270 <TIM_Base_SetConfig+0x144>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d00f      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a2c      	ldr	r2, [pc, #176]	; (8002274 <TIM_Base_SetConfig+0x148>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00b      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a2b      	ldr	r2, [pc, #172]	; (8002278 <TIM_Base_SetConfig+0x14c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d007      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a2a      	ldr	r2, [pc, #168]	; (800227c <TIM_Base_SetConfig+0x150>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d003      	beq.n	80021de <TIM_Base_SetConfig+0xb2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a29      	ldr	r2, [pc, #164]	; (8002280 <TIM_Base_SetConfig+0x154>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d108      	bne.n	80021f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a10      	ldr	r2, [pc, #64]	; (8002258 <TIM_Base_SetConfig+0x12c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d003      	beq.n	8002224 <TIM_Base_SetConfig+0xf8>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a12      	ldr	r2, [pc, #72]	; (8002268 <TIM_Base_SetConfig+0x13c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d103      	bne.n	800222c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b01      	cmp	r3, #1
 800223c:	d105      	bne.n	800224a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	f023 0201 	bic.w	r2, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	611a      	str	r2, [r3, #16]
  }
}
 800224a:	bf00      	nop
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40010000 	.word	0x40010000
 800225c:	40000400 	.word	0x40000400
 8002260:	40000800 	.word	0x40000800
 8002264:	40000c00 	.word	0x40000c00
 8002268:	40010400 	.word	0x40010400
 800226c:	40014000 	.word	0x40014000
 8002270:	40014400 	.word	0x40014400
 8002274:	40014800 	.word	0x40014800
 8002278:	40001800 	.word	0x40001800
 800227c:	40001c00 	.word	0x40001c00
 8002280:	40002000 	.word	0x40002000

08002284 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e042      	b.n	8002344 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d106      	bne.n	80022d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7fe fad2 	bl	800087c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2224      	movs	r2, #36	; 0x24
 80022dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f973 	bl	80025dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002304:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695a      	ldr	r2, [r3, #20]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002314:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002324:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2220      	movs	r2, #32
 8002330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2220      	movs	r2, #32
 8002338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08a      	sub	sp, #40	; 0x28
 8002350:	af02      	add	r7, sp, #8
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	4613      	mov	r3, r2
 800235a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b20      	cmp	r3, #32
 800236a:	d175      	bne.n	8002458 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <HAL_UART_Transmit+0x2c>
 8002372:	88fb      	ldrh	r3, [r7, #6]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e06e      	b.n	800245a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2221      	movs	r2, #33	; 0x21
 8002386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800238a:	f7fe fbcd 	bl	8000b28 <HAL_GetTick>
 800238e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	88fa      	ldrh	r2, [r7, #6]
 8002394:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	88fa      	ldrh	r2, [r7, #6]
 800239a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a4:	d108      	bne.n	80023b8 <HAL_UART_Transmit+0x6c>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d104      	bne.n	80023b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	61bb      	str	r3, [r7, #24]
 80023b6:	e003      	b.n	80023c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023c0:	e02e      	b.n	8002420 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2200      	movs	r2, #0
 80023ca:	2180      	movs	r1, #128	; 0x80
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 f848 	bl	8002462 <UART_WaitOnFlagUntilTimeout>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e03a      	b.n	800245a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10b      	bne.n	8002402 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	3302      	adds	r3, #2
 80023fe:	61bb      	str	r3, [r7, #24]
 8002400:	e007      	b.n	8002412 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	781a      	ldrb	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	3301      	adds	r3, #1
 8002410:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002416:	b29b      	uxth	r3, r3
 8002418:	3b01      	subs	r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002424:	b29b      	uxth	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1cb      	bne.n	80023c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	2200      	movs	r2, #0
 8002432:	2140      	movs	r1, #64	; 0x40
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 f814 	bl	8002462 <UART_WaitOnFlagUntilTimeout>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2220      	movs	r2, #32
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e006      	b.n	800245a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2220      	movs	r2, #32
 8002450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	e000      	b.n	800245a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002458:	2302      	movs	r3, #2
  }
}
 800245a:	4618      	mov	r0, r3
 800245c:	3720      	adds	r7, #32
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b086      	sub	sp, #24
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	603b      	str	r3, [r7, #0]
 800246e:	4613      	mov	r3, r2
 8002470:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002472:	e03b      	b.n	80024ec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247a:	d037      	beq.n	80024ec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800247c:	f7fe fb54 	bl	8000b28 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	6a3a      	ldr	r2, [r7, #32]
 8002488:	429a      	cmp	r2, r3
 800248a:	d302      	bcc.n	8002492 <UART_WaitOnFlagUntilTimeout+0x30>
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e03a      	b.n	800250c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d023      	beq.n	80024ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b80      	cmp	r3, #128	; 0x80
 80024a8:	d020      	beq.n	80024ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	2b40      	cmp	r3, #64	; 0x40
 80024ae:	d01d      	beq.n	80024ec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d116      	bne.n	80024ec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 f81d 	bl	8002514 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2208      	movs	r2, #8
 80024de:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e00f      	b.n	800250c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	4013      	ands	r3, r2
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	bf0c      	ite	eq
 80024fc:	2301      	moveq	r3, #1
 80024fe:	2300      	movne	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	461a      	mov	r2, r3
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	429a      	cmp	r2, r3
 8002508:	d0b4      	beq.n	8002474 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002514:	b480      	push	{r7}
 8002516:	b095      	sub	sp, #84	; 0x54
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	330c      	adds	r3, #12
 8002522:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002526:	e853 3f00 	ldrex	r3, [r3]
 800252a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800252c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	330c      	adds	r3, #12
 800253a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800253c:	643a      	str	r2, [r7, #64]	; 0x40
 800253e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002540:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002542:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002544:	e841 2300 	strex	r3, r2, [r1]
 8002548:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800254a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1e5      	bne.n	800251c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	3314      	adds	r3, #20
 8002556:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	e853 3f00 	ldrex	r3, [r3]
 800255e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f023 0301 	bic.w	r3, r3, #1
 8002566:	64bb      	str	r3, [r7, #72]	; 0x48
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	3314      	adds	r3, #20
 800256e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002570:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002572:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002574:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002578:	e841 2300 	strex	r3, r2, [r1]
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1e5      	bne.n	8002550 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	2b01      	cmp	r3, #1
 800258a:	d119      	bne.n	80025c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	330c      	adds	r3, #12
 8002592:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	e853 3f00 	ldrex	r3, [r3]
 800259a:	60bb      	str	r3, [r7, #8]
   return(result);
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f023 0310 	bic.w	r3, r3, #16
 80025a2:	647b      	str	r3, [r7, #68]	; 0x44
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	330c      	adds	r3, #12
 80025aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025ac:	61ba      	str	r2, [r7, #24]
 80025ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025b0:	6979      	ldr	r1, [r7, #20]
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	e841 2300 	strex	r3, r2, [r1]
 80025b8:	613b      	str	r3, [r7, #16]
   return(result);
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1e5      	bne.n	800258c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2220      	movs	r2, #32
 80025c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80025ce:	bf00      	nop
 80025d0:	3754      	adds	r7, #84	; 0x54
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025e0:	b0c0      	sub	sp, #256	; 0x100
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80025f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025f8:	68d9      	ldr	r1, [r3, #12]
 80025fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	ea40 0301 	orr.w	r3, r0, r1
 8002604:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	431a      	orrs	r2, r3
 8002614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	431a      	orrs	r2, r3
 800261c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	4313      	orrs	r3, r2
 8002624:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002634:	f021 010c 	bic.w	r1, r1, #12
 8002638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002642:	430b      	orrs	r3, r1
 8002644:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002656:	6999      	ldr	r1, [r3, #24]
 8002658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	ea40 0301 	orr.w	r3, r0, r1
 8002662:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	4b8f      	ldr	r3, [pc, #572]	; (80028a8 <UART_SetConfig+0x2cc>)
 800266c:	429a      	cmp	r2, r3
 800266e:	d005      	beq.n	800267c <UART_SetConfig+0xa0>
 8002670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	4b8d      	ldr	r3, [pc, #564]	; (80028ac <UART_SetConfig+0x2d0>)
 8002678:	429a      	cmp	r2, r3
 800267a:	d104      	bne.n	8002686 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800267c:	f7fe fe60 	bl	8001340 <HAL_RCC_GetPCLK2Freq>
 8002680:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002684:	e003      	b.n	800268e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002686:	f7fe fe47 	bl	8001318 <HAL_RCC_GetPCLK1Freq>
 800268a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800268e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002698:	f040 810c 	bne.w	80028b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800269c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026a0:	2200      	movs	r2, #0
 80026a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80026a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80026aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80026ae:	4622      	mov	r2, r4
 80026b0:	462b      	mov	r3, r5
 80026b2:	1891      	adds	r1, r2, r2
 80026b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80026b6:	415b      	adcs	r3, r3
 80026b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80026be:	4621      	mov	r1, r4
 80026c0:	eb12 0801 	adds.w	r8, r2, r1
 80026c4:	4629      	mov	r1, r5
 80026c6:	eb43 0901 	adc.w	r9, r3, r1
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026de:	4690      	mov	r8, r2
 80026e0:	4699      	mov	r9, r3
 80026e2:	4623      	mov	r3, r4
 80026e4:	eb18 0303 	adds.w	r3, r8, r3
 80026e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80026ec:	462b      	mov	r3, r5
 80026ee:	eb49 0303 	adc.w	r3, r9, r3
 80026f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80026f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002702:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002706:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800270a:	460b      	mov	r3, r1
 800270c:	18db      	adds	r3, r3, r3
 800270e:	653b      	str	r3, [r7, #80]	; 0x50
 8002710:	4613      	mov	r3, r2
 8002712:	eb42 0303 	adc.w	r3, r2, r3
 8002716:	657b      	str	r3, [r7, #84]	; 0x54
 8002718:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800271c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002720:	f7fd fd76 	bl	8000210 <__aeabi_uldivmod>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4b61      	ldr	r3, [pc, #388]	; (80028b0 <UART_SetConfig+0x2d4>)
 800272a:	fba3 2302 	umull	r2, r3, r3, r2
 800272e:	095b      	lsrs	r3, r3, #5
 8002730:	011c      	lsls	r4, r3, #4
 8002732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002736:	2200      	movs	r2, #0
 8002738:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800273c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002740:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002744:	4642      	mov	r2, r8
 8002746:	464b      	mov	r3, r9
 8002748:	1891      	adds	r1, r2, r2
 800274a:	64b9      	str	r1, [r7, #72]	; 0x48
 800274c:	415b      	adcs	r3, r3
 800274e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002750:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002754:	4641      	mov	r1, r8
 8002756:	eb12 0a01 	adds.w	sl, r2, r1
 800275a:	4649      	mov	r1, r9
 800275c:	eb43 0b01 	adc.w	fp, r3, r1
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800276c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002770:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002774:	4692      	mov	sl, r2
 8002776:	469b      	mov	fp, r3
 8002778:	4643      	mov	r3, r8
 800277a:	eb1a 0303 	adds.w	r3, sl, r3
 800277e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002782:	464b      	mov	r3, r9
 8002784:	eb4b 0303 	adc.w	r3, fp, r3
 8002788:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800278c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002798:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800279c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80027a0:	460b      	mov	r3, r1
 80027a2:	18db      	adds	r3, r3, r3
 80027a4:	643b      	str	r3, [r7, #64]	; 0x40
 80027a6:	4613      	mov	r3, r2
 80027a8:	eb42 0303 	adc.w	r3, r2, r3
 80027ac:	647b      	str	r3, [r7, #68]	; 0x44
 80027ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80027b6:	f7fd fd2b 	bl	8000210 <__aeabi_uldivmod>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4611      	mov	r1, r2
 80027c0:	4b3b      	ldr	r3, [pc, #236]	; (80028b0 <UART_SetConfig+0x2d4>)
 80027c2:	fba3 2301 	umull	r2, r3, r3, r1
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	2264      	movs	r2, #100	; 0x64
 80027ca:	fb02 f303 	mul.w	r3, r2, r3
 80027ce:	1acb      	subs	r3, r1, r3
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80027d6:	4b36      	ldr	r3, [pc, #216]	; (80028b0 <UART_SetConfig+0x2d4>)
 80027d8:	fba3 2302 	umull	r2, r3, r3, r2
 80027dc:	095b      	lsrs	r3, r3, #5
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027e4:	441c      	add	r4, r3
 80027e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027ea:	2200      	movs	r2, #0
 80027ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80027f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80027f8:	4642      	mov	r2, r8
 80027fa:	464b      	mov	r3, r9
 80027fc:	1891      	adds	r1, r2, r2
 80027fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8002800:	415b      	adcs	r3, r3
 8002802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002804:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002808:	4641      	mov	r1, r8
 800280a:	1851      	adds	r1, r2, r1
 800280c:	6339      	str	r1, [r7, #48]	; 0x30
 800280e:	4649      	mov	r1, r9
 8002810:	414b      	adcs	r3, r1
 8002812:	637b      	str	r3, [r7, #52]	; 0x34
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002820:	4659      	mov	r1, fp
 8002822:	00cb      	lsls	r3, r1, #3
 8002824:	4651      	mov	r1, sl
 8002826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800282a:	4651      	mov	r1, sl
 800282c:	00ca      	lsls	r2, r1, #3
 800282e:	4610      	mov	r0, r2
 8002830:	4619      	mov	r1, r3
 8002832:	4603      	mov	r3, r0
 8002834:	4642      	mov	r2, r8
 8002836:	189b      	adds	r3, r3, r2
 8002838:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800283c:	464b      	mov	r3, r9
 800283e:	460a      	mov	r2, r1
 8002840:	eb42 0303 	adc.w	r3, r2, r3
 8002844:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002854:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002858:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800285c:	460b      	mov	r3, r1
 800285e:	18db      	adds	r3, r3, r3
 8002860:	62bb      	str	r3, [r7, #40]	; 0x28
 8002862:	4613      	mov	r3, r2
 8002864:	eb42 0303 	adc.w	r3, r2, r3
 8002868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800286a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800286e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002872:	f7fd fccd 	bl	8000210 <__aeabi_uldivmod>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4b0d      	ldr	r3, [pc, #52]	; (80028b0 <UART_SetConfig+0x2d4>)
 800287c:	fba3 1302 	umull	r1, r3, r3, r2
 8002880:	095b      	lsrs	r3, r3, #5
 8002882:	2164      	movs	r1, #100	; 0x64
 8002884:	fb01 f303 	mul.w	r3, r1, r3
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	3332      	adds	r3, #50	; 0x32
 800288e:	4a08      	ldr	r2, [pc, #32]	; (80028b0 <UART_SetConfig+0x2d4>)
 8002890:	fba2 2303 	umull	r2, r3, r2, r3
 8002894:	095b      	lsrs	r3, r3, #5
 8002896:	f003 0207 	and.w	r2, r3, #7
 800289a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4422      	add	r2, r4
 80028a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028a4:	e106      	b.n	8002ab4 <UART_SetConfig+0x4d8>
 80028a6:	bf00      	nop
 80028a8:	40011000 	.word	0x40011000
 80028ac:	40011400 	.word	0x40011400
 80028b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028b8:	2200      	movs	r2, #0
 80028ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80028be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80028c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80028c6:	4642      	mov	r2, r8
 80028c8:	464b      	mov	r3, r9
 80028ca:	1891      	adds	r1, r2, r2
 80028cc:	6239      	str	r1, [r7, #32]
 80028ce:	415b      	adcs	r3, r3
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
 80028d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028d6:	4641      	mov	r1, r8
 80028d8:	1854      	adds	r4, r2, r1
 80028da:	4649      	mov	r1, r9
 80028dc:	eb43 0501 	adc.w	r5, r3, r1
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	00eb      	lsls	r3, r5, #3
 80028ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ee:	00e2      	lsls	r2, r4, #3
 80028f0:	4614      	mov	r4, r2
 80028f2:	461d      	mov	r5, r3
 80028f4:	4643      	mov	r3, r8
 80028f6:	18e3      	adds	r3, r4, r3
 80028f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80028fc:	464b      	mov	r3, r9
 80028fe:	eb45 0303 	adc.w	r3, r5, r3
 8002902:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002912:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	f04f 0300 	mov.w	r3, #0
 800291e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002922:	4629      	mov	r1, r5
 8002924:	008b      	lsls	r3, r1, #2
 8002926:	4621      	mov	r1, r4
 8002928:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800292c:	4621      	mov	r1, r4
 800292e:	008a      	lsls	r2, r1, #2
 8002930:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002934:	f7fd fc6c 	bl	8000210 <__aeabi_uldivmod>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4b60      	ldr	r3, [pc, #384]	; (8002ac0 <UART_SetConfig+0x4e4>)
 800293e:	fba3 2302 	umull	r2, r3, r3, r2
 8002942:	095b      	lsrs	r3, r3, #5
 8002944:	011c      	lsls	r4, r3, #4
 8002946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800294a:	2200      	movs	r2, #0
 800294c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002950:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002954:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002958:	4642      	mov	r2, r8
 800295a:	464b      	mov	r3, r9
 800295c:	1891      	adds	r1, r2, r2
 800295e:	61b9      	str	r1, [r7, #24]
 8002960:	415b      	adcs	r3, r3
 8002962:	61fb      	str	r3, [r7, #28]
 8002964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002968:	4641      	mov	r1, r8
 800296a:	1851      	adds	r1, r2, r1
 800296c:	6139      	str	r1, [r7, #16]
 800296e:	4649      	mov	r1, r9
 8002970:	414b      	adcs	r3, r1
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002980:	4659      	mov	r1, fp
 8002982:	00cb      	lsls	r3, r1, #3
 8002984:	4651      	mov	r1, sl
 8002986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800298a:	4651      	mov	r1, sl
 800298c:	00ca      	lsls	r2, r1, #3
 800298e:	4610      	mov	r0, r2
 8002990:	4619      	mov	r1, r3
 8002992:	4603      	mov	r3, r0
 8002994:	4642      	mov	r2, r8
 8002996:	189b      	adds	r3, r3, r2
 8002998:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800299c:	464b      	mov	r3, r9
 800299e:	460a      	mov	r2, r1
 80029a0:	eb42 0303 	adc.w	r3, r2, r3
 80029a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80029a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80029b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80029c0:	4649      	mov	r1, r9
 80029c2:	008b      	lsls	r3, r1, #2
 80029c4:	4641      	mov	r1, r8
 80029c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029ca:	4641      	mov	r1, r8
 80029cc:	008a      	lsls	r2, r1, #2
 80029ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80029d2:	f7fd fc1d 	bl	8000210 <__aeabi_uldivmod>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4611      	mov	r1, r2
 80029dc:	4b38      	ldr	r3, [pc, #224]	; (8002ac0 <UART_SetConfig+0x4e4>)
 80029de:	fba3 2301 	umull	r2, r3, r3, r1
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	2264      	movs	r2, #100	; 0x64
 80029e6:	fb02 f303 	mul.w	r3, r2, r3
 80029ea:	1acb      	subs	r3, r1, r3
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	3332      	adds	r3, #50	; 0x32
 80029f0:	4a33      	ldr	r2, [pc, #204]	; (8002ac0 <UART_SetConfig+0x4e4>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029fc:	441c      	add	r4, r3
 80029fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a02:	2200      	movs	r2, #0
 8002a04:	673b      	str	r3, [r7, #112]	; 0x70
 8002a06:	677a      	str	r2, [r7, #116]	; 0x74
 8002a08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a0c:	4642      	mov	r2, r8
 8002a0e:	464b      	mov	r3, r9
 8002a10:	1891      	adds	r1, r2, r2
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	415b      	adcs	r3, r3
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a1c:	4641      	mov	r1, r8
 8002a1e:	1851      	adds	r1, r2, r1
 8002a20:	6039      	str	r1, [r7, #0]
 8002a22:	4649      	mov	r1, r9
 8002a24:	414b      	adcs	r3, r1
 8002a26:	607b      	str	r3, [r7, #4]
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a34:	4659      	mov	r1, fp
 8002a36:	00cb      	lsls	r3, r1, #3
 8002a38:	4651      	mov	r1, sl
 8002a3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a3e:	4651      	mov	r1, sl
 8002a40:	00ca      	lsls	r2, r1, #3
 8002a42:	4610      	mov	r0, r2
 8002a44:	4619      	mov	r1, r3
 8002a46:	4603      	mov	r3, r0
 8002a48:	4642      	mov	r2, r8
 8002a4a:	189b      	adds	r3, r3, r2
 8002a4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a4e:	464b      	mov	r3, r9
 8002a50:	460a      	mov	r2, r1
 8002a52:	eb42 0303 	adc.w	r3, r2, r3
 8002a56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	663b      	str	r3, [r7, #96]	; 0x60
 8002a62:	667a      	str	r2, [r7, #100]	; 0x64
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a70:	4649      	mov	r1, r9
 8002a72:	008b      	lsls	r3, r1, #2
 8002a74:	4641      	mov	r1, r8
 8002a76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a7a:	4641      	mov	r1, r8
 8002a7c:	008a      	lsls	r2, r1, #2
 8002a7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002a82:	f7fd fbc5 	bl	8000210 <__aeabi_uldivmod>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <UART_SetConfig+0x4e4>)
 8002a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a90:	095b      	lsrs	r3, r3, #5
 8002a92:	2164      	movs	r1, #100	; 0x64
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	3332      	adds	r3, #50	; 0x32
 8002a9e:	4a08      	ldr	r2, [pc, #32]	; (8002ac0 <UART_SetConfig+0x4e4>)
 8002aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa4:	095b      	lsrs	r3, r3, #5
 8002aa6:	f003 020f 	and.w	r2, r3, #15
 8002aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4422      	add	r2, r4
 8002ab2:	609a      	str	r2, [r3, #8]
}
 8002ab4:	bf00      	nop
 8002ab6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002aba:	46bd      	mov	sp, r7
 8002abc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ac0:	51eb851f 	.word	0x51eb851f

08002ac4 <__NVIC_SetPriority>:
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	6039      	str	r1, [r7, #0]
 8002ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	db0a      	blt.n	8002aee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	490c      	ldr	r1, [pc, #48]	; (8002b10 <__NVIC_SetPriority+0x4c>)
 8002ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae2:	0112      	lsls	r2, r2, #4
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002aec:	e00a      	b.n	8002b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	4908      	ldr	r1, [pc, #32]	; (8002b14 <__NVIC_SetPriority+0x50>)
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	3b04      	subs	r3, #4
 8002afc:	0112      	lsls	r2, r2, #4
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	440b      	add	r3, r1
 8002b02:	761a      	strb	r2, [r3, #24]
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	e000e100 	.word	0xe000e100
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002b1c:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <SysTick_Handler+0x1c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002b20:	f001 fd28 	bl	8004574 <xTaskGetSchedulerState>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d001      	beq.n	8002b2e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002b2a:	f002 fb0d 	bl	8005148 <xPortSysTickHandler>
  }
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	e000e010 	.word	0xe000e010

08002b38 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	f06f 0004 	mvn.w	r0, #4
 8002b42:	f7ff ffbf 	bl	8002ac4 <__NVIC_SetPriority>
#endif
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b52:	f3ef 8305 	mrs	r3, IPSR
 8002b56:	603b      	str	r3, [r7, #0]
  return(result);
 8002b58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d003      	beq.n	8002b66 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002b5e:	f06f 0305 	mvn.w	r3, #5
 8002b62:	607b      	str	r3, [r7, #4]
 8002b64:	e00c      	b.n	8002b80 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002b66:	4b0a      	ldr	r3, [pc, #40]	; (8002b90 <osKernelInitialize+0x44>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d105      	bne.n	8002b7a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002b6e:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <osKernelInitialize+0x44>)
 8002b70:	2201      	movs	r2, #1
 8002b72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	607b      	str	r3, [r7, #4]
 8002b78:	e002      	b.n	8002b80 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002b80:	687b      	ldr	r3, [r7, #4]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	20000148 	.word	0x20000148

08002b94 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b9a:	f3ef 8305 	mrs	r3, IPSR
 8002b9e:	603b      	str	r3, [r7, #0]
  return(result);
 8002ba0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <osKernelStart+0x1a>
    stat = osErrorISR;
 8002ba6:	f06f 0305 	mvn.w	r3, #5
 8002baa:	607b      	str	r3, [r7, #4]
 8002bac:	e010      	b.n	8002bd0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002bae:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <osKernelStart+0x48>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d109      	bne.n	8002bca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002bb6:	f7ff ffbf 	bl	8002b38 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002bba:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <osKernelStart+0x48>)
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002bc0:	f001 f87c 	bl	8003cbc <vTaskStartScheduler>
      stat = osOK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	607b      	str	r3, [r7, #4]
 8002bc8:	e002      	b.n	8002bd0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002bca:	f04f 33ff 	mov.w	r3, #4294967295
 8002bce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002bd0:	687b      	ldr	r3, [r7, #4]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	20000148 	.word	0x20000148

08002be0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08e      	sub	sp, #56	; 0x38
 8002be4:	af04      	add	r7, sp, #16
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bf0:	f3ef 8305 	mrs	r3, IPSR
 8002bf4:	617b      	str	r3, [r7, #20]
  return(result);
 8002bf6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d17e      	bne.n	8002cfa <osThreadNew+0x11a>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d07b      	beq.n	8002cfa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002c02:	2380      	movs	r3, #128	; 0x80
 8002c04:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002c06:	2318      	movs	r3, #24
 8002c08:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c12:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d045      	beq.n	8002ca6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <osThreadNew+0x48>
        name = attr->name;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d002      	beq.n	8002c36 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <osThreadNew+0x6e>
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	2b38      	cmp	r3, #56	; 0x38
 8002c40:	d805      	bhi.n	8002c4e <osThreadNew+0x6e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <osThreadNew+0x72>
        return (NULL);
 8002c4e:	2300      	movs	r3, #0
 8002c50:	e054      	b.n	8002cfc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	089b      	lsrs	r3, r3, #2
 8002c60:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00e      	beq.n	8002c88 <osThreadNew+0xa8>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	2ba7      	cmp	r3, #167	; 0xa7
 8002c70:	d90a      	bls.n	8002c88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d006      	beq.n	8002c88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <osThreadNew+0xa8>
        mem = 1;
 8002c82:	2301      	movs	r3, #1
 8002c84:	61bb      	str	r3, [r7, #24]
 8002c86:	e010      	b.n	8002caa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10c      	bne.n	8002caa <osThreadNew+0xca>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d108      	bne.n	8002caa <osThreadNew+0xca>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d104      	bne.n	8002caa <osThreadNew+0xca>
          mem = 0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	61bb      	str	r3, [r7, #24]
 8002ca4:	e001      	b.n	8002caa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d110      	bne.n	8002cd2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002cb8:	9202      	str	r2, [sp, #8]
 8002cba:	9301      	str	r3, [sp, #4]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	6a3a      	ldr	r2, [r7, #32]
 8002cc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 fe0c 	bl	80038e4 <xTaskCreateStatic>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	e013      	b.n	8002cfa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d110      	bne.n	8002cfa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	f107 0310 	add.w	r3, r7, #16
 8002ce0:	9301      	str	r3, [sp, #4]
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 fe57 	bl	800399e <xTaskCreate>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d001      	beq.n	8002cfa <osThreadNew+0x11a>
            hTask = NULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002cfa:	693b      	ldr	r3, [r7, #16]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3728      	adds	r7, #40	; 0x28
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d0c:	f3ef 8305 	mrs	r3, IPSR
 8002d10:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d12:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <osDelay+0x1c>
    stat = osErrorISR;
 8002d18:	f06f 0305 	mvn.w	r3, #5
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	e007      	b.n	8002d30 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 ff92 	bl	8003c54 <vTaskDelay>
    }
  }

  return (stat);
 8002d30:	68fb      	ldr	r3, [r7, #12]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4a07      	ldr	r2, [pc, #28]	; (8002d68 <vApplicationGetIdleTaskMemory+0x2c>)
 8002d4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	4a06      	ldr	r2, [pc, #24]	; (8002d6c <vApplicationGetIdleTaskMemory+0x30>)
 8002d52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2280      	movs	r2, #128	; 0x80
 8002d58:	601a      	str	r2, [r3, #0]
}
 8002d5a:	bf00      	nop
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	2000014c 	.word	0x2000014c
 8002d6c:	200001f4 	.word	0x200001f4

08002d70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4a07      	ldr	r2, [pc, #28]	; (8002d9c <vApplicationGetTimerTaskMemory+0x2c>)
 8002d80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	4a06      	ldr	r2, [pc, #24]	; (8002da0 <vApplicationGetTimerTaskMemory+0x30>)
 8002d86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d8e:	601a      	str	r2, [r3, #0]
}
 8002d90:	bf00      	nop
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	200003f4 	.word	0x200003f4
 8002da0:	2000049c 	.word	0x2000049c

08002da4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f103 0208 	add.w	r2, r3, #8
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f103 0208 	add.w	r2, r3, #8
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f103 0208 	add.w	r2, r3, #8
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b085      	sub	sp, #20
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	601a      	str	r2, [r3, #0]
}
 8002e3a:	bf00      	nop
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e46:	b480      	push	{r7}
 8002e48:	b085      	sub	sp, #20
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5c:	d103      	bne.n	8002e66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	e00c      	b.n	8002e80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	3308      	adds	r3, #8
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	e002      	b.n	8002e74 <vListInsert+0x2e>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d2f6      	bcs.n	8002e6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	601a      	str	r2, [r3, #0]
}
 8002eac:	bf00      	nop
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6892      	ldr	r2, [r2, #8]
 8002ece:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6852      	ldr	r2, [r2, #4]
 8002ed8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d103      	bne.n	8002eec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	1e5a      	subs	r2, r3, #1
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10a      	bne.n	8002f36 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002f32:	bf00      	nop
 8002f34:	e7fe      	b.n	8002f34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002f36:	f002 f875 	bl	8005024 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f42:	68f9      	ldr	r1, [r7, #12]
 8002f44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f46:	fb01 f303 	mul.w	r3, r1, r3
 8002f4a:	441a      	add	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f66:	3b01      	subs	r3, #1
 8002f68:	68f9      	ldr	r1, [r7, #12]
 8002f6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f6c:	fb01 f303 	mul.w	r3, r1, r3
 8002f70:	441a      	add	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	22ff      	movs	r2, #255	; 0xff
 8002f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	22ff      	movs	r2, #255	; 0xff
 8002f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d114      	bne.n	8002fb6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d01a      	beq.n	8002fca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	3310      	adds	r3, #16
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f001 f929 	bl	80041f0 <xTaskRemoveFromEventList>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d012      	beq.n	8002fca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <xQueueGenericReset+0xcc>)
 8002fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	f3bf 8f4f 	dsb	sy
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	e009      	b.n	8002fca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	3310      	adds	r3, #16
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff fef2 	bl	8002da4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	3324      	adds	r3, #36	; 0x24
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff feed 	bl	8002da4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002fca:	f002 f85b 	bl	8005084 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002fce:	2301      	movs	r3, #1
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	e000ed04 	.word	0xe000ed04

08002fdc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b08e      	sub	sp, #56	; 0x38
 8002fe0:	af02      	add	r7, sp, #8
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10a      	bne.n	8003006 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff4:	f383 8811 	msr	BASEPRI, r3
 8002ff8:	f3bf 8f6f 	isb	sy
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003002:	bf00      	nop
 8003004:	e7fe      	b.n	8003004 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10a      	bne.n	8003022 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800300c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003010:	f383 8811 	msr	BASEPRI, r3
 8003014:	f3bf 8f6f 	isb	sy
 8003018:	f3bf 8f4f 	dsb	sy
 800301c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800301e:	bf00      	nop
 8003020:	e7fe      	b.n	8003020 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d002      	beq.n	800302e <xQueueGenericCreateStatic+0x52>
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <xQueueGenericCreateStatic+0x56>
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <xQueueGenericCreateStatic+0x58>
 8003032:	2300      	movs	r3, #0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10a      	bne.n	800304e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303c:	f383 8811 	msr	BASEPRI, r3
 8003040:	f3bf 8f6f 	isb	sy
 8003044:	f3bf 8f4f 	dsb	sy
 8003048:	623b      	str	r3, [r7, #32]
}
 800304a:	bf00      	nop
 800304c:	e7fe      	b.n	800304c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d102      	bne.n	800305a <xQueueGenericCreateStatic+0x7e>
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <xQueueGenericCreateStatic+0x82>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <xQueueGenericCreateStatic+0x84>
 800305e:	2300      	movs	r3, #0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10a      	bne.n	800307a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003068:	f383 8811 	msr	BASEPRI, r3
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	61fb      	str	r3, [r7, #28]
}
 8003076:	bf00      	nop
 8003078:	e7fe      	b.n	8003078 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800307a:	2350      	movs	r3, #80	; 0x50
 800307c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2b50      	cmp	r3, #80	; 0x50
 8003082:	d00a      	beq.n	800309a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003088:	f383 8811 	msr	BASEPRI, r3
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	f3bf 8f4f 	dsb	sy
 8003094:	61bb      	str	r3, [r7, #24]
}
 8003096:	bf00      	nop
 8003098:	e7fe      	b.n	8003098 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800309a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80030a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00d      	beq.n	80030c2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80030a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80030b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	4613      	mov	r3, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	68b9      	ldr	r1, [r7, #8]
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 f805 	bl	80030cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80030c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3730      	adds	r7, #48	; 0x30
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
 80030d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d103      	bne.n	80030e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	e002      	b.n	80030ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80030fa:	2101      	movs	r1, #1
 80030fc:	69b8      	ldr	r0, [r7, #24]
 80030fe:	f7ff ff05 	bl	8002f0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	78fa      	ldrb	r2, [r7, #3]
 8003106:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800310a:	bf00      	nop
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08e      	sub	sp, #56	; 0x38
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
 8003120:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003122:	2300      	movs	r3, #0
 8003124:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800312a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10a      	bne.n	8003146 <xQueueGenericSend+0x32>
	__asm volatile
 8003130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003134:	f383 8811 	msr	BASEPRI, r3
 8003138:	f3bf 8f6f 	isb	sy
 800313c:	f3bf 8f4f 	dsb	sy
 8003140:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003142:	bf00      	nop
 8003144:	e7fe      	b.n	8003144 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d103      	bne.n	8003154 <xQueueGenericSend+0x40>
 800314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <xQueueGenericSend+0x44>
 8003154:	2301      	movs	r3, #1
 8003156:	e000      	b.n	800315a <xQueueGenericSend+0x46>
 8003158:	2300      	movs	r3, #0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10a      	bne.n	8003174 <xQueueGenericSend+0x60>
	__asm volatile
 800315e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003162:	f383 8811 	msr	BASEPRI, r3
 8003166:	f3bf 8f6f 	isb	sy
 800316a:	f3bf 8f4f 	dsb	sy
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003170:	bf00      	nop
 8003172:	e7fe      	b.n	8003172 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d103      	bne.n	8003182 <xQueueGenericSend+0x6e>
 800317a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <xQueueGenericSend+0x72>
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <xQueueGenericSend+0x74>
 8003186:	2300      	movs	r3, #0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10a      	bne.n	80031a2 <xQueueGenericSend+0x8e>
	__asm volatile
 800318c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003190:	f383 8811 	msr	BASEPRI, r3
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	623b      	str	r3, [r7, #32]
}
 800319e:	bf00      	nop
 80031a0:	e7fe      	b.n	80031a0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031a2:	f001 f9e7 	bl	8004574 <xTaskGetSchedulerState>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d102      	bne.n	80031b2 <xQueueGenericSend+0x9e>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <xQueueGenericSend+0xa2>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <xQueueGenericSend+0xa4>
 80031b6:	2300      	movs	r3, #0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10a      	bne.n	80031d2 <xQueueGenericSend+0xbe>
	__asm volatile
 80031bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c0:	f383 8811 	msr	BASEPRI, r3
 80031c4:	f3bf 8f6f 	isb	sy
 80031c8:	f3bf 8f4f 	dsb	sy
 80031cc:	61fb      	str	r3, [r7, #28]
}
 80031ce:	bf00      	nop
 80031d0:	e7fe      	b.n	80031d0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031d2:	f001 ff27 	bl	8005024 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031de:	429a      	cmp	r2, r3
 80031e0:	d302      	bcc.n	80031e8 <xQueueGenericSend+0xd4>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d129      	bne.n	800323c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	68b9      	ldr	r1, [r7, #8]
 80031ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031ee:	f000 fa0b 	bl	8003608 <prvCopyDataToQueue>
 80031f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d010      	beq.n	800321e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fe:	3324      	adds	r3, #36	; 0x24
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fff5 	bl	80041f0 <xTaskRemoveFromEventList>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d013      	beq.n	8003234 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800320c:	4b3f      	ldr	r3, [pc, #252]	; (800330c <xQueueGenericSend+0x1f8>)
 800320e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	f3bf 8f4f 	dsb	sy
 8003218:	f3bf 8f6f 	isb	sy
 800321c:	e00a      	b.n	8003234 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800321e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003220:	2b00      	cmp	r3, #0
 8003222:	d007      	beq.n	8003234 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003224:	4b39      	ldr	r3, [pc, #228]	; (800330c <xQueueGenericSend+0x1f8>)
 8003226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	f3bf 8f4f 	dsb	sy
 8003230:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003234:	f001 ff26 	bl	8005084 <vPortExitCritical>
				return pdPASS;
 8003238:	2301      	movs	r3, #1
 800323a:	e063      	b.n	8003304 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d103      	bne.n	800324a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003242:	f001 ff1f 	bl	8005084 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003246:	2300      	movs	r3, #0
 8003248:	e05c      	b.n	8003304 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800324a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800324c:	2b00      	cmp	r3, #0
 800324e:	d106      	bne.n	800325e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003250:	f107 0314 	add.w	r3, r7, #20
 8003254:	4618      	mov	r0, r3
 8003256:	f001 f82f 	bl	80042b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800325a:	2301      	movs	r3, #1
 800325c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800325e:	f001 ff11 	bl	8005084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003262:	f000 fd9b 	bl	8003d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003266:	f001 fedd 	bl	8005024 <vPortEnterCritical>
 800326a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003270:	b25b      	sxtb	r3, r3
 8003272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003276:	d103      	bne.n	8003280 <xQueueGenericSend+0x16c>
 8003278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003282:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003286:	b25b      	sxtb	r3, r3
 8003288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328c:	d103      	bne.n	8003296 <xQueueGenericSend+0x182>
 800328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003296:	f001 fef5 	bl	8005084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800329a:	1d3a      	adds	r2, r7, #4
 800329c:	f107 0314 	add.w	r3, r7, #20
 80032a0:	4611      	mov	r1, r2
 80032a2:	4618      	mov	r0, r3
 80032a4:	f001 f81e 	bl	80042e4 <xTaskCheckForTimeOut>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d124      	bne.n	80032f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80032ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032b0:	f000 faa2 	bl	80037f8 <prvIsQueueFull>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d018      	beq.n	80032ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80032ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032bc:	3310      	adds	r3, #16
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	4611      	mov	r1, r2
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 ff44 	bl	8004150 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80032c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032ca:	f000 fa2d 	bl	8003728 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80032ce:	f000 fd73 	bl	8003db8 <xTaskResumeAll>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f47f af7c 	bne.w	80031d2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80032da:	4b0c      	ldr	r3, [pc, #48]	; (800330c <xQueueGenericSend+0x1f8>)
 80032dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	f3bf 8f4f 	dsb	sy
 80032e6:	f3bf 8f6f 	isb	sy
 80032ea:	e772      	b.n	80031d2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80032ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032ee:	f000 fa1b 	bl	8003728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032f2:	f000 fd61 	bl	8003db8 <xTaskResumeAll>
 80032f6:	e76c      	b.n	80031d2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80032f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032fa:	f000 fa15 	bl	8003728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032fe:	f000 fd5b 	bl	8003db8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003302:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003304:	4618      	mov	r0, r3
 8003306:	3738      	adds	r7, #56	; 0x38
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	e000ed04 	.word	0xe000ed04

08003310 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b090      	sub	sp, #64	; 0x40
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10a      	bne.n	800333e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332c:	f383 8811 	msr	BASEPRI, r3
 8003330:	f3bf 8f6f 	isb	sy
 8003334:	f3bf 8f4f 	dsb	sy
 8003338:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800333a:	bf00      	nop
 800333c:	e7fe      	b.n	800333c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d103      	bne.n	800334c <xQueueGenericSendFromISR+0x3c>
 8003344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <xQueueGenericSendFromISR+0x40>
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <xQueueGenericSendFromISR+0x42>
 8003350:	2300      	movs	r3, #0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10a      	bne.n	800336c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800335a:	f383 8811 	msr	BASEPRI, r3
 800335e:	f3bf 8f6f 	isb	sy
 8003362:	f3bf 8f4f 	dsb	sy
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003368:	bf00      	nop
 800336a:	e7fe      	b.n	800336a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d103      	bne.n	800337a <xQueueGenericSendFromISR+0x6a>
 8003372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <xQueueGenericSendFromISR+0x6e>
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <xQueueGenericSendFromISR+0x70>
 800337e:	2300      	movs	r3, #0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10a      	bne.n	800339a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003388:	f383 8811 	msr	BASEPRI, r3
 800338c:	f3bf 8f6f 	isb	sy
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	623b      	str	r3, [r7, #32]
}
 8003396:	bf00      	nop
 8003398:	e7fe      	b.n	8003398 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800339a:	f001 ff25 	bl	80051e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800339e:	f3ef 8211 	mrs	r2, BASEPRI
 80033a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a6:	f383 8811 	msr	BASEPRI, r3
 80033aa:	f3bf 8f6f 	isb	sy
 80033ae:	f3bf 8f4f 	dsb	sy
 80033b2:	61fa      	str	r2, [r7, #28]
 80033b4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80033b6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80033b8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d302      	bcc.n	80033cc <xQueueGenericSendFromISR+0xbc>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d12f      	bne.n	800342c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80033cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033da:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	68b9      	ldr	r1, [r7, #8]
 80033e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80033e2:	f000 f911 	bl	8003608 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80033e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80033ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ee:	d112      	bne.n	8003416 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d016      	beq.n	8003426 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fa:	3324      	adds	r3, #36	; 0x24
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 fef7 	bl	80041f0 <xTaskRemoveFromEventList>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00e      	beq.n	8003426 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00b      	beq.n	8003426 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	e007      	b.n	8003426 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003416:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800341a:	3301      	adds	r3, #1
 800341c:	b2db      	uxtb	r3, r3
 800341e:	b25a      	sxtb	r2, r3
 8003420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003426:	2301      	movs	r3, #1
 8003428:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800342a:	e001      	b.n	8003430 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800342c:	2300      	movs	r3, #0
 800342e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003432:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800343a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800343c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800343e:	4618      	mov	r0, r3
 8003440:	3740      	adds	r7, #64	; 0x40
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08c      	sub	sp, #48	; 0x30
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003454:	2300      	movs	r3, #0
 8003456:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800345c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10a      	bne.n	8003478 <xQueueReceive+0x30>
	__asm volatile
 8003462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003466:	f383 8811 	msr	BASEPRI, r3
 800346a:	f3bf 8f6f 	isb	sy
 800346e:	f3bf 8f4f 	dsb	sy
 8003472:	623b      	str	r3, [r7, #32]
}
 8003474:	bf00      	nop
 8003476:	e7fe      	b.n	8003476 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d103      	bne.n	8003486 <xQueueReceive+0x3e>
 800347e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <xQueueReceive+0x42>
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <xQueueReceive+0x44>
 800348a:	2300      	movs	r3, #0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10a      	bne.n	80034a6 <xQueueReceive+0x5e>
	__asm volatile
 8003490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003494:	f383 8811 	msr	BASEPRI, r3
 8003498:	f3bf 8f6f 	isb	sy
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	61fb      	str	r3, [r7, #28]
}
 80034a2:	bf00      	nop
 80034a4:	e7fe      	b.n	80034a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034a6:	f001 f865 	bl	8004574 <xTaskGetSchedulerState>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d102      	bne.n	80034b6 <xQueueReceive+0x6e>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <xQueueReceive+0x72>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <xQueueReceive+0x74>
 80034ba:	2300      	movs	r3, #0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10a      	bne.n	80034d6 <xQueueReceive+0x8e>
	__asm volatile
 80034c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c4:	f383 8811 	msr	BASEPRI, r3
 80034c8:	f3bf 8f6f 	isb	sy
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	61bb      	str	r3, [r7, #24]
}
 80034d2:	bf00      	nop
 80034d4:	e7fe      	b.n	80034d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034d6:	f001 fda5 	bl	8005024 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d01f      	beq.n	8003526 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80034e6:	68b9      	ldr	r1, [r7, #8]
 80034e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034ea:	f000 f8f7 	bl	80036dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	1e5a      	subs	r2, r3, #1
 80034f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00f      	beq.n	800351e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003500:	3310      	adds	r3, #16
 8003502:	4618      	mov	r0, r3
 8003504:	f000 fe74 	bl	80041f0 <xTaskRemoveFromEventList>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d007      	beq.n	800351e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800350e:	4b3d      	ldr	r3, [pc, #244]	; (8003604 <xQueueReceive+0x1bc>)
 8003510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	f3bf 8f4f 	dsb	sy
 800351a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800351e:	f001 fdb1 	bl	8005084 <vPortExitCritical>
				return pdPASS;
 8003522:	2301      	movs	r3, #1
 8003524:	e069      	b.n	80035fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d103      	bne.n	8003534 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800352c:	f001 fdaa 	bl	8005084 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003530:	2300      	movs	r3, #0
 8003532:	e062      	b.n	80035fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003536:	2b00      	cmp	r3, #0
 8003538:	d106      	bne.n	8003548 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800353a:	f107 0310 	add.w	r3, r7, #16
 800353e:	4618      	mov	r0, r3
 8003540:	f000 feba 	bl	80042b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003544:	2301      	movs	r3, #1
 8003546:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003548:	f001 fd9c 	bl	8005084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800354c:	f000 fc26 	bl	8003d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003550:	f001 fd68 	bl	8005024 <vPortEnterCritical>
 8003554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003556:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800355a:	b25b      	sxtb	r3, r3
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003560:	d103      	bne.n	800356a <xQueueReceive+0x122>
 8003562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800356a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003570:	b25b      	sxtb	r3, r3
 8003572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003576:	d103      	bne.n	8003580 <xQueueReceive+0x138>
 8003578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003580:	f001 fd80 	bl	8005084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003584:	1d3a      	adds	r2, r7, #4
 8003586:	f107 0310 	add.w	r3, r7, #16
 800358a:	4611      	mov	r1, r2
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fea9 	bl	80042e4 <xTaskCheckForTimeOut>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d123      	bne.n	80035e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800359a:	f000 f917 	bl	80037cc <prvIsQueueEmpty>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d017      	beq.n	80035d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a6:	3324      	adds	r3, #36	; 0x24
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	4611      	mov	r1, r2
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 fdcf 	bl	8004150 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80035b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035b4:	f000 f8b8 	bl	8003728 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80035b8:	f000 fbfe 	bl	8003db8 <xTaskResumeAll>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d189      	bne.n	80034d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80035c2:	4b10      	ldr	r3, [pc, #64]	; (8003604 <xQueueReceive+0x1bc>)
 80035c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	f3bf 8f6f 	isb	sy
 80035d2:	e780      	b.n	80034d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80035d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035d6:	f000 f8a7 	bl	8003728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035da:	f000 fbed 	bl	8003db8 <xTaskResumeAll>
 80035de:	e77a      	b.n	80034d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80035e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035e2:	f000 f8a1 	bl	8003728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035e6:	f000 fbe7 	bl	8003db8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035ec:	f000 f8ee 	bl	80037cc <prvIsQueueEmpty>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f43f af6f 	beq.w	80034d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80035f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3730      	adds	r7, #48	; 0x30
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	e000ed04 	.word	0xe000ed04

08003608 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10d      	bne.n	8003642 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d14d      	bne.n	80036ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	4618      	mov	r0, r3
 8003634:	f000 ffbc 	bl	80045b0 <xTaskPriorityDisinherit>
 8003638:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	e043      	b.n	80036ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d119      	bne.n	800367c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6858      	ldr	r0, [r3, #4]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	461a      	mov	r2, r3
 8003652:	68b9      	ldr	r1, [r7, #8]
 8003654:	f002 f876 	bl	8005744 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	441a      	add	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	429a      	cmp	r2, r3
 8003670:	d32b      	bcc.n	80036ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	e026      	b.n	80036ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	68d8      	ldr	r0, [r3, #12]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	461a      	mov	r2, r3
 8003686:	68b9      	ldr	r1, [r7, #8]
 8003688:	f002 f85c 	bl	8005744 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	425b      	negs	r3, r3
 8003696:	441a      	add	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d207      	bcs.n	80036b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	425b      	negs	r3, r3
 80036b2:	441a      	add	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d105      	bne.n	80036ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d002      	beq.n	80036ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80036d2:	697b      	ldr	r3, [r7, #20]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d018      	beq.n	8003720 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	441a      	add	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	429a      	cmp	r2, r3
 8003706:	d303      	bcc.n	8003710 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68d9      	ldr	r1, [r3, #12]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	461a      	mov	r2, r3
 800371a:	6838      	ldr	r0, [r7, #0]
 800371c:	f002 f812 	bl	8005744 <memcpy>
	}
}
 8003720:	bf00      	nop
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003730:	f001 fc78 	bl	8005024 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800373a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800373c:	e011      	b.n	8003762 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	2b00      	cmp	r3, #0
 8003744:	d012      	beq.n	800376c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3324      	adds	r3, #36	; 0x24
 800374a:	4618      	mov	r0, r3
 800374c:	f000 fd50 	bl	80041f0 <xTaskRemoveFromEventList>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003756:	f000 fe27 	bl	80043a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800375a:	7bfb      	ldrb	r3, [r7, #15]
 800375c:	3b01      	subs	r3, #1
 800375e:	b2db      	uxtb	r3, r3
 8003760:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003766:	2b00      	cmp	r3, #0
 8003768:	dce9      	bgt.n	800373e <prvUnlockQueue+0x16>
 800376a:	e000      	b.n	800376e <prvUnlockQueue+0x46>
					break;
 800376c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	22ff      	movs	r2, #255	; 0xff
 8003772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003776:	f001 fc85 	bl	8005084 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800377a:	f001 fc53 	bl	8005024 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003784:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003786:	e011      	b.n	80037ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d012      	beq.n	80037b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3310      	adds	r3, #16
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fd2b 	bl	80041f0 <xTaskRemoveFromEventList>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037a0:	f000 fe02 	bl	80043a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037a4:	7bbb      	ldrb	r3, [r7, #14]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	dce9      	bgt.n	8003788 <prvUnlockQueue+0x60>
 80037b4:	e000      	b.n	80037b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80037b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	22ff      	movs	r2, #255	; 0xff
 80037bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80037c0:	f001 fc60 	bl	8005084 <vPortExitCritical>
}
 80037c4:	bf00      	nop
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80037d4:	f001 fc26 	bl	8005024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d102      	bne.n	80037e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80037e0:	2301      	movs	r3, #1
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	e001      	b.n	80037ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80037ea:	f001 fc4b 	bl	8005084 <vPortExitCritical>

	return xReturn;
 80037ee:	68fb      	ldr	r3, [r7, #12]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003800:	f001 fc10 	bl	8005024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380c:	429a      	cmp	r2, r3
 800380e:	d102      	bne.n	8003816 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003810:	2301      	movs	r3, #1
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	e001      	b.n	800381a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003816:	2300      	movs	r3, #0
 8003818:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800381a:	f001 fc33 	bl	8005084 <vPortExitCritical>

	return xReturn;
 800381e:	68fb      	ldr	r3, [r7, #12]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	e014      	b.n	8003862 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003838:	4a0f      	ldr	r2, [pc, #60]	; (8003878 <vQueueAddToRegistry+0x50>)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10b      	bne.n	800385c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003844:	490c      	ldr	r1, [pc, #48]	; (8003878 <vQueueAddToRegistry+0x50>)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800384e:	4a0a      	ldr	r2, [pc, #40]	; (8003878 <vQueueAddToRegistry+0x50>)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800385a:	e006      	b.n	800386a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	3301      	adds	r3, #1
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b07      	cmp	r3, #7
 8003866:	d9e7      	bls.n	8003838 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003868:	bf00      	nop
 800386a:	bf00      	nop
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	2000089c 	.word	0x2000089c

0800387c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800388c:	f001 fbca 	bl	8005024 <vPortEnterCritical>
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003896:	b25b      	sxtb	r3, r3
 8003898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389c:	d103      	bne.n	80038a6 <vQueueWaitForMessageRestricted+0x2a>
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038ac:	b25b      	sxtb	r3, r3
 80038ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b2:	d103      	bne.n	80038bc <vQueueWaitForMessageRestricted+0x40>
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038bc:	f001 fbe2 	bl	8005084 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d106      	bne.n	80038d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	3324      	adds	r3, #36	; 0x24
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	68b9      	ldr	r1, [r7, #8]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 fc61 	bl	8004198 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80038d6:	6978      	ldr	r0, [r7, #20]
 80038d8:	f7ff ff26 	bl	8003728 <prvUnlockQueue>
	}
 80038dc:	bf00      	nop
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b08e      	sub	sp, #56	; 0x38
 80038e8:	af04      	add	r7, sp, #16
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80038f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10a      	bne.n	800390e <xTaskCreateStatic+0x2a>
	__asm volatile
 80038f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	623b      	str	r3, [r7, #32]
}
 800390a:	bf00      	nop
 800390c:	e7fe      	b.n	800390c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800390e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10a      	bne.n	800392a <xTaskCreateStatic+0x46>
	__asm volatile
 8003914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003918:	f383 8811 	msr	BASEPRI, r3
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	61fb      	str	r3, [r7, #28]
}
 8003926:	bf00      	nop
 8003928:	e7fe      	b.n	8003928 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800392a:	23a8      	movs	r3, #168	; 0xa8
 800392c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	2ba8      	cmp	r3, #168	; 0xa8
 8003932:	d00a      	beq.n	800394a <xTaskCreateStatic+0x66>
	__asm volatile
 8003934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003938:	f383 8811 	msr	BASEPRI, r3
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	61bb      	str	r3, [r7, #24]
}
 8003946:	bf00      	nop
 8003948:	e7fe      	b.n	8003948 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800394a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800394c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394e:	2b00      	cmp	r3, #0
 8003950:	d01e      	beq.n	8003990 <xTaskCreateStatic+0xac>
 8003952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003954:	2b00      	cmp	r3, #0
 8003956:	d01b      	beq.n	8003990 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003960:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	2202      	movs	r2, #2
 8003966:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800396a:	2300      	movs	r3, #0
 800396c:	9303      	str	r3, [sp, #12]
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	9302      	str	r3, [sp, #8]
 8003972:	f107 0314 	add.w	r3, r7, #20
 8003976:	9301      	str	r3, [sp, #4]
 8003978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	68b9      	ldr	r1, [r7, #8]
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 f850 	bl	8003a28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003988:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800398a:	f000 f8f3 	bl	8003b74 <prvAddNewTaskToReadyList>
 800398e:	e001      	b.n	8003994 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003994:	697b      	ldr	r3, [r7, #20]
	}
 8003996:	4618      	mov	r0, r3
 8003998:	3728      	adds	r7, #40	; 0x28
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b08c      	sub	sp, #48	; 0x30
 80039a2:	af04      	add	r7, sp, #16
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	603b      	str	r3, [r7, #0]
 80039aa:	4613      	mov	r3, r2
 80039ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80039ae:	88fb      	ldrh	r3, [r7, #6]
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f001 fc58 	bl	8005268 <pvPortMalloc>
 80039b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00e      	beq.n	80039de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80039c0:	20a8      	movs	r0, #168	; 0xa8
 80039c2:	f001 fc51 	bl	8005268 <pvPortMalloc>
 80039c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	631a      	str	r2, [r3, #48]	; 0x30
 80039d4:	e005      	b.n	80039e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80039d6:	6978      	ldr	r0, [r7, #20]
 80039d8:	f001 fd12 	bl	8005400 <vPortFree>
 80039dc:	e001      	b.n	80039e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d017      	beq.n	8003a18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80039f0:	88fa      	ldrh	r2, [r7, #6]
 80039f2:	2300      	movs	r3, #0
 80039f4:	9303      	str	r3, [sp, #12]
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	9302      	str	r3, [sp, #8]
 80039fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fc:	9301      	str	r3, [sp, #4]
 80039fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68b9      	ldr	r1, [r7, #8]
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 f80e 	bl	8003a28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a0c:	69f8      	ldr	r0, [r7, #28]
 8003a0e:	f000 f8b1 	bl	8003b74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a12:	2301      	movs	r3, #1
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	e002      	b.n	8003a1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a18:	f04f 33ff 	mov.w	r3, #4294967295
 8003a1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a1e:	69bb      	ldr	r3, [r7, #24]
	}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3720      	adds	r7, #32
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b088      	sub	sp, #32
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
 8003a34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	461a      	mov	r2, r3
 8003a40:	21a5      	movs	r1, #165	; 0xa5
 8003a42:	f001 fdfb 	bl	800563c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a50:	3b01      	subs	r3, #1
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	f023 0307 	bic.w	r3, r3, #7
 8003a5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00a      	beq.n	8003a80 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6e:	f383 8811 	msr	BASEPRI, r3
 8003a72:	f3bf 8f6f 	isb	sy
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	617b      	str	r3, [r7, #20]
}
 8003a7c:	bf00      	nop
 8003a7e:	e7fe      	b.n	8003a7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d01f      	beq.n	8003ac6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a86:	2300      	movs	r3, #0
 8003a88:	61fb      	str	r3, [r7, #28]
 8003a8a:	e012      	b.n	8003ab2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	4413      	add	r3, r2
 8003a92:	7819      	ldrb	r1, [r3, #0]
 8003a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	4413      	add	r3, r2
 8003a9a:	3334      	adds	r3, #52	; 0x34
 8003a9c:	460a      	mov	r2, r1
 8003a9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d006      	beq.n	8003aba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	61fb      	str	r3, [r7, #28]
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	2b0f      	cmp	r3, #15
 8003ab6:	d9e9      	bls.n	8003a8c <prvInitialiseNewTask+0x64>
 8003ab8:	e000      	b.n	8003abc <prvInitialiseNewTask+0x94>
			{
				break;
 8003aba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ac4:	e003      	b.n	8003ace <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad0:	2b37      	cmp	r3, #55	; 0x37
 8003ad2:	d901      	bls.n	8003ad8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ad4:	2337      	movs	r3, #55	; 0x37
 8003ad6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003adc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ae2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aec:	3304      	adds	r3, #4
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff f978 	bl	8002de4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af6:	3318      	adds	r3, #24
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff f973 	bl	8002de4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b16:	2200      	movs	r2, #0
 8003b18:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	3354      	adds	r3, #84	; 0x54
 8003b28:	224c      	movs	r2, #76	; 0x4c
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f001 fd85 	bl	800563c <memset>
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	4a0c      	ldr	r2, [pc, #48]	; (8003b68 <prvInitialiseNewTask+0x140>)
 8003b36:	659a      	str	r2, [r3, #88]	; 0x58
 8003b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3a:	4a0c      	ldr	r2, [pc, #48]	; (8003b6c <prvInitialiseNewTask+0x144>)
 8003b3c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	4a0b      	ldr	r2, [pc, #44]	; (8003b70 <prvInitialiseNewTask+0x148>)
 8003b42:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	68f9      	ldr	r1, [r7, #12]
 8003b48:	69b8      	ldr	r0, [r7, #24]
 8003b4a:	f001 f941 	bl	8004dd0 <pxPortInitialiseStack>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b60:	bf00      	nop
 8003b62:	3720      	adds	r7, #32
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	20004b30 	.word	0x20004b30
 8003b6c:	20004b98 	.word	0x20004b98
 8003b70:	20004c00 	.word	0x20004c00

08003b74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b7c:	f001 fa52 	bl	8005024 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b80:	4b2d      	ldr	r3, [pc, #180]	; (8003c38 <prvAddNewTaskToReadyList+0xc4>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3301      	adds	r3, #1
 8003b86:	4a2c      	ldr	r2, [pc, #176]	; (8003c38 <prvAddNewTaskToReadyList+0xc4>)
 8003b88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b8a:	4b2c      	ldr	r3, [pc, #176]	; (8003c3c <prvAddNewTaskToReadyList+0xc8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d109      	bne.n	8003ba6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b92:	4a2a      	ldr	r2, [pc, #168]	; (8003c3c <prvAddNewTaskToReadyList+0xc8>)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b98:	4b27      	ldr	r3, [pc, #156]	; (8003c38 <prvAddNewTaskToReadyList+0xc4>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d110      	bne.n	8003bc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ba0:	f000 fc26 	bl	80043f0 <prvInitialiseTaskLists>
 8003ba4:	e00d      	b.n	8003bc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ba6:	4b26      	ldr	r3, [pc, #152]	; (8003c40 <prvAddNewTaskToReadyList+0xcc>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d109      	bne.n	8003bc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bae:	4b23      	ldr	r3, [pc, #140]	; (8003c3c <prvAddNewTaskToReadyList+0xc8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d802      	bhi.n	8003bc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bbc:	4a1f      	ldr	r2, [pc, #124]	; (8003c3c <prvAddNewTaskToReadyList+0xc8>)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bc2:	4b20      	ldr	r3, [pc, #128]	; (8003c44 <prvAddNewTaskToReadyList+0xd0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	4a1e      	ldr	r2, [pc, #120]	; (8003c44 <prvAddNewTaskToReadyList+0xd0>)
 8003bca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003bcc:	4b1d      	ldr	r3, [pc, #116]	; (8003c44 <prvAddNewTaskToReadyList+0xd0>)
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd8:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <prvAddNewTaskToReadyList+0xd4>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d903      	bls.n	8003be8 <prvAddNewTaskToReadyList+0x74>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	4a18      	ldr	r2, [pc, #96]	; (8003c48 <prvAddNewTaskToReadyList+0xd4>)
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bec:	4613      	mov	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4a15      	ldr	r2, [pc, #84]	; (8003c4c <prvAddNewTaskToReadyList+0xd8>)
 8003bf6:	441a      	add	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4610      	mov	r0, r2
 8003c00:	f7ff f8fd 	bl	8002dfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c04:	f001 fa3e 	bl	8005084 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c08:	4b0d      	ldr	r3, [pc, #52]	; (8003c40 <prvAddNewTaskToReadyList+0xcc>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00e      	beq.n	8003c2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c10:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <prvAddNewTaskToReadyList+0xc8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d207      	bcs.n	8003c2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c1e:	4b0c      	ldr	r3, [pc, #48]	; (8003c50 <prvAddNewTaskToReadyList+0xdc>)
 8003c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c2e:	bf00      	nop
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	20000db0 	.word	0x20000db0
 8003c3c:	200008dc 	.word	0x200008dc
 8003c40:	20000dbc 	.word	0x20000dbc
 8003c44:	20000dcc 	.word	0x20000dcc
 8003c48:	20000db8 	.word	0x20000db8
 8003c4c:	200008e0 	.word	0x200008e0
 8003c50:	e000ed04 	.word	0xe000ed04

08003c54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d017      	beq.n	8003c96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c66:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <vTaskDelay+0x60>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <vTaskDelay+0x30>
	__asm volatile
 8003c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c72:	f383 8811 	msr	BASEPRI, r3
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	60bb      	str	r3, [r7, #8]
}
 8003c80:	bf00      	nop
 8003c82:	e7fe      	b.n	8003c82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003c84:	f000 f88a 	bl	8003d9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c88:	2100      	movs	r1, #0
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 fcfe 	bl	800468c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c90:	f000 f892 	bl	8003db8 <xTaskResumeAll>
 8003c94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d107      	bne.n	8003cac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003c9c:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <vTaskDelay+0x64>)
 8003c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cac:	bf00      	nop
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	20000dd8 	.word	0x20000dd8
 8003cb8:	e000ed04 	.word	0xe000ed04

08003cbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08a      	sub	sp, #40	; 0x28
 8003cc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cca:	463a      	mov	r2, r7
 8003ccc:	1d39      	adds	r1, r7, #4
 8003cce:	f107 0308 	add.w	r3, r7, #8
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff f832 	bl	8002d3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003cd8:	6839      	ldr	r1, [r7, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	9202      	str	r2, [sp, #8]
 8003ce0:	9301      	str	r3, [sp, #4]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	460a      	mov	r2, r1
 8003cea:	4924      	ldr	r1, [pc, #144]	; (8003d7c <vTaskStartScheduler+0xc0>)
 8003cec:	4824      	ldr	r0, [pc, #144]	; (8003d80 <vTaskStartScheduler+0xc4>)
 8003cee:	f7ff fdf9 	bl	80038e4 <xTaskCreateStatic>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	4a23      	ldr	r2, [pc, #140]	; (8003d84 <vTaskStartScheduler+0xc8>)
 8003cf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003cf8:	4b22      	ldr	r3, [pc, #136]	; (8003d84 <vTaskStartScheduler+0xc8>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d00:	2301      	movs	r3, #1
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	e001      	b.n	8003d0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d102      	bne.n	8003d16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d10:	f000 fd10 	bl	8004734 <xTimerCreateTimerTask>
 8003d14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d11b      	bne.n	8003d54 <vTaskStartScheduler+0x98>
	__asm volatile
 8003d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d20:	f383 8811 	msr	BASEPRI, r3
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	613b      	str	r3, [r7, #16]
}
 8003d2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d30:	4b15      	ldr	r3, [pc, #84]	; (8003d88 <vTaskStartScheduler+0xcc>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3354      	adds	r3, #84	; 0x54
 8003d36:	4a15      	ldr	r2, [pc, #84]	; (8003d8c <vTaskStartScheduler+0xd0>)
 8003d38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d3a:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <vTaskStartScheduler+0xd4>)
 8003d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d42:	4b14      	ldr	r3, [pc, #80]	; (8003d94 <vTaskStartScheduler+0xd8>)
 8003d44:	2201      	movs	r2, #1
 8003d46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d48:	4b13      	ldr	r3, [pc, #76]	; (8003d98 <vTaskStartScheduler+0xdc>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d4e:	f001 f8c7 	bl	8004ee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d52:	e00e      	b.n	8003d72 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5a:	d10a      	bne.n	8003d72 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d60:	f383 8811 	msr	BASEPRI, r3
 8003d64:	f3bf 8f6f 	isb	sy
 8003d68:	f3bf 8f4f 	dsb	sy
 8003d6c:	60fb      	str	r3, [r7, #12]
}
 8003d6e:	bf00      	nop
 8003d70:	e7fe      	b.n	8003d70 <vTaskStartScheduler+0xb4>
}
 8003d72:	bf00      	nop
 8003d74:	3718      	adds	r7, #24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	08005840 	.word	0x08005840
 8003d80:	080043c1 	.word	0x080043c1
 8003d84:	20000dd4 	.word	0x20000dd4
 8003d88:	200008dc 	.word	0x200008dc
 8003d8c:	20000088 	.word	0x20000088
 8003d90:	20000dd0 	.word	0x20000dd0
 8003d94:	20000dbc 	.word	0x20000dbc
 8003d98:	20000db4 	.word	0x20000db4

08003d9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003da0:	4b04      	ldr	r3, [pc, #16]	; (8003db4 <vTaskSuspendAll+0x18>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3301      	adds	r3, #1
 8003da6:	4a03      	ldr	r2, [pc, #12]	; (8003db4 <vTaskSuspendAll+0x18>)
 8003da8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003daa:	bf00      	nop
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	20000dd8 	.word	0x20000dd8

08003db8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003dc6:	4b42      	ldr	r3, [pc, #264]	; (8003ed0 <xTaskResumeAll+0x118>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10a      	bne.n	8003de4 <xTaskResumeAll+0x2c>
	__asm volatile
 8003dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd2:	f383 8811 	msr	BASEPRI, r3
 8003dd6:	f3bf 8f6f 	isb	sy
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	603b      	str	r3, [r7, #0]
}
 8003de0:	bf00      	nop
 8003de2:	e7fe      	b.n	8003de2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003de4:	f001 f91e 	bl	8005024 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003de8:	4b39      	ldr	r3, [pc, #228]	; (8003ed0 <xTaskResumeAll+0x118>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	4a38      	ldr	r2, [pc, #224]	; (8003ed0 <xTaskResumeAll+0x118>)
 8003df0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003df2:	4b37      	ldr	r3, [pc, #220]	; (8003ed0 <xTaskResumeAll+0x118>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d162      	bne.n	8003ec0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003dfa:	4b36      	ldr	r3, [pc, #216]	; (8003ed4 <xTaskResumeAll+0x11c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d05e      	beq.n	8003ec0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e02:	e02f      	b.n	8003e64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e04:	4b34      	ldr	r3, [pc, #208]	; (8003ed8 <xTaskResumeAll+0x120>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	3318      	adds	r3, #24
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff f851 	bl	8002eb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	3304      	adds	r3, #4
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff f84c 	bl	8002eb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e24:	4b2d      	ldr	r3, [pc, #180]	; (8003edc <xTaskResumeAll+0x124>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d903      	bls.n	8003e34 <xTaskResumeAll+0x7c>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	4a2a      	ldr	r2, [pc, #168]	; (8003edc <xTaskResumeAll+0x124>)
 8003e32:	6013      	str	r3, [r2, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e38:	4613      	mov	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4a27      	ldr	r2, [pc, #156]	; (8003ee0 <xTaskResumeAll+0x128>)
 8003e42:	441a      	add	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	3304      	adds	r3, #4
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	f7fe ffd7 	bl	8002dfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e54:	4b23      	ldr	r3, [pc, #140]	; (8003ee4 <xTaskResumeAll+0x12c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d302      	bcc.n	8003e64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003e5e:	4b22      	ldr	r3, [pc, #136]	; (8003ee8 <xTaskResumeAll+0x130>)
 8003e60:	2201      	movs	r2, #1
 8003e62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e64:	4b1c      	ldr	r3, [pc, #112]	; (8003ed8 <xTaskResumeAll+0x120>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1cb      	bne.n	8003e04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e72:	f000 fb5f 	bl	8004534 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e76:	4b1d      	ldr	r3, [pc, #116]	; (8003eec <xTaskResumeAll+0x134>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d010      	beq.n	8003ea4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e82:	f000 f847 	bl	8003f14 <xTaskIncrementTick>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003e8c:	4b16      	ldr	r3, [pc, #88]	; (8003ee8 <xTaskResumeAll+0x130>)
 8003e8e:	2201      	movs	r2, #1
 8003e90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	3b01      	subs	r3, #1
 8003e96:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f1      	bne.n	8003e82 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003e9e:	4b13      	ldr	r3, [pc, #76]	; (8003eec <xTaskResumeAll+0x134>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ea4:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <xTaskResumeAll+0x130>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d009      	beq.n	8003ec0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003eac:	2301      	movs	r3, #1
 8003eae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003eb0:	4b0f      	ldr	r3, [pc, #60]	; (8003ef0 <xTaskResumeAll+0x138>)
 8003eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ec0:	f001 f8e0 	bl	8005084 <vPortExitCritical>

	return xAlreadyYielded;
 8003ec4:	68bb      	ldr	r3, [r7, #8]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	20000dd8 	.word	0x20000dd8
 8003ed4:	20000db0 	.word	0x20000db0
 8003ed8:	20000d70 	.word	0x20000d70
 8003edc:	20000db8 	.word	0x20000db8
 8003ee0:	200008e0 	.word	0x200008e0
 8003ee4:	200008dc 	.word	0x200008dc
 8003ee8:	20000dc4 	.word	0x20000dc4
 8003eec:	20000dc0 	.word	0x20000dc0
 8003ef0:	e000ed04 	.word	0xe000ed04

08003ef4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003efa:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <xTaskGetTickCount+0x1c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f00:	687b      	ldr	r3, [r7, #4]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	20000db4 	.word	0x20000db4

08003f14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f1e:	4b4f      	ldr	r3, [pc, #316]	; (800405c <xTaskIncrementTick+0x148>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f040 808f 	bne.w	8004046 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f28:	4b4d      	ldr	r3, [pc, #308]	; (8004060 <xTaskIncrementTick+0x14c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f30:	4a4b      	ldr	r2, [pc, #300]	; (8004060 <xTaskIncrementTick+0x14c>)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d120      	bne.n	8003f7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f3c:	4b49      	ldr	r3, [pc, #292]	; (8004064 <xTaskIncrementTick+0x150>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <xTaskIncrementTick+0x48>
	__asm volatile
 8003f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4a:	f383 8811 	msr	BASEPRI, r3
 8003f4e:	f3bf 8f6f 	isb	sy
 8003f52:	f3bf 8f4f 	dsb	sy
 8003f56:	603b      	str	r3, [r7, #0]
}
 8003f58:	bf00      	nop
 8003f5a:	e7fe      	b.n	8003f5a <xTaskIncrementTick+0x46>
 8003f5c:	4b41      	ldr	r3, [pc, #260]	; (8004064 <xTaskIncrementTick+0x150>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	4b41      	ldr	r3, [pc, #260]	; (8004068 <xTaskIncrementTick+0x154>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a3f      	ldr	r2, [pc, #252]	; (8004064 <xTaskIncrementTick+0x150>)
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	4a3f      	ldr	r2, [pc, #252]	; (8004068 <xTaskIncrementTick+0x154>)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6013      	str	r3, [r2, #0]
 8003f70:	4b3e      	ldr	r3, [pc, #248]	; (800406c <xTaskIncrementTick+0x158>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3301      	adds	r3, #1
 8003f76:	4a3d      	ldr	r2, [pc, #244]	; (800406c <xTaskIncrementTick+0x158>)
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	f000 fadb 	bl	8004534 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f7e:	4b3c      	ldr	r3, [pc, #240]	; (8004070 <xTaskIncrementTick+0x15c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d349      	bcc.n	800401c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f88:	4b36      	ldr	r3, [pc, #216]	; (8004064 <xTaskIncrementTick+0x150>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d104      	bne.n	8003f9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f92:	4b37      	ldr	r3, [pc, #220]	; (8004070 <xTaskIncrementTick+0x15c>)
 8003f94:	f04f 32ff 	mov.w	r2, #4294967295
 8003f98:	601a      	str	r2, [r3, #0]
					break;
 8003f9a:	e03f      	b.n	800401c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f9c:	4b31      	ldr	r3, [pc, #196]	; (8004064 <xTaskIncrementTick+0x150>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d203      	bcs.n	8003fbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fb4:	4a2e      	ldr	r2, [pc, #184]	; (8004070 <xTaskIncrementTick+0x15c>)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003fba:	e02f      	b.n	800401c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fe ff79 	bl	8002eb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d004      	beq.n	8003fd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	3318      	adds	r3, #24
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fe ff70 	bl	8002eb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fdc:	4b25      	ldr	r3, [pc, #148]	; (8004074 <xTaskIncrementTick+0x160>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d903      	bls.n	8003fec <xTaskIncrementTick+0xd8>
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	4a22      	ldr	r2, [pc, #136]	; (8004074 <xTaskIncrementTick+0x160>)
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4a1f      	ldr	r2, [pc, #124]	; (8004078 <xTaskIncrementTick+0x164>)
 8003ffa:	441a      	add	r2, r3
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	3304      	adds	r3, #4
 8004000:	4619      	mov	r1, r3
 8004002:	4610      	mov	r0, r2
 8004004:	f7fe fefb 	bl	8002dfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800400c:	4b1b      	ldr	r3, [pc, #108]	; (800407c <xTaskIncrementTick+0x168>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004012:	429a      	cmp	r2, r3
 8004014:	d3b8      	bcc.n	8003f88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004016:	2301      	movs	r3, #1
 8004018:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800401a:	e7b5      	b.n	8003f88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800401c:	4b17      	ldr	r3, [pc, #92]	; (800407c <xTaskIncrementTick+0x168>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004022:	4915      	ldr	r1, [pc, #84]	; (8004078 <xTaskIncrementTick+0x164>)
 8004024:	4613      	mov	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	440b      	add	r3, r1
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d901      	bls.n	8004038 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004034:	2301      	movs	r3, #1
 8004036:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004038:	4b11      	ldr	r3, [pc, #68]	; (8004080 <xTaskIncrementTick+0x16c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d007      	beq.n	8004050 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004040:	2301      	movs	r3, #1
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	e004      	b.n	8004050 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004046:	4b0f      	ldr	r3, [pc, #60]	; (8004084 <xTaskIncrementTick+0x170>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3301      	adds	r3, #1
 800404c:	4a0d      	ldr	r2, [pc, #52]	; (8004084 <xTaskIncrementTick+0x170>)
 800404e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004050:	697b      	ldr	r3, [r7, #20]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3718      	adds	r7, #24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	20000dd8 	.word	0x20000dd8
 8004060:	20000db4 	.word	0x20000db4
 8004064:	20000d68 	.word	0x20000d68
 8004068:	20000d6c 	.word	0x20000d6c
 800406c:	20000dc8 	.word	0x20000dc8
 8004070:	20000dd0 	.word	0x20000dd0
 8004074:	20000db8 	.word	0x20000db8
 8004078:	200008e0 	.word	0x200008e0
 800407c:	200008dc 	.word	0x200008dc
 8004080:	20000dc4 	.word	0x20000dc4
 8004084:	20000dc0 	.word	0x20000dc0

08004088 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800408e:	4b2a      	ldr	r3, [pc, #168]	; (8004138 <vTaskSwitchContext+0xb0>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004096:	4b29      	ldr	r3, [pc, #164]	; (800413c <vTaskSwitchContext+0xb4>)
 8004098:	2201      	movs	r2, #1
 800409a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800409c:	e046      	b.n	800412c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800409e:	4b27      	ldr	r3, [pc, #156]	; (800413c <vTaskSwitchContext+0xb4>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040a4:	4b26      	ldr	r3, [pc, #152]	; (8004140 <vTaskSwitchContext+0xb8>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	e010      	b.n	80040ce <vTaskSwitchContext+0x46>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10a      	bne.n	80040c8 <vTaskSwitchContext+0x40>
	__asm volatile
 80040b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	607b      	str	r3, [r7, #4]
}
 80040c4:	bf00      	nop
 80040c6:	e7fe      	b.n	80040c6 <vTaskSwitchContext+0x3e>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	491d      	ldr	r1, [pc, #116]	; (8004144 <vTaskSwitchContext+0xbc>)
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	4613      	mov	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	440b      	add	r3, r1
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0e4      	beq.n	80040ac <vTaskSwitchContext+0x24>
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	4613      	mov	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4a15      	ldr	r2, [pc, #84]	; (8004144 <vTaskSwitchContext+0xbc>)
 80040ee:	4413      	add	r3, r2
 80040f0:	60bb      	str	r3, [r7, #8]
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	605a      	str	r2, [r3, #4]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	3308      	adds	r3, #8
 8004104:	429a      	cmp	r2, r3
 8004106:	d104      	bne.n	8004112 <vTaskSwitchContext+0x8a>
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	605a      	str	r2, [r3, #4]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	4a0b      	ldr	r2, [pc, #44]	; (8004148 <vTaskSwitchContext+0xc0>)
 800411a:	6013      	str	r3, [r2, #0]
 800411c:	4a08      	ldr	r2, [pc, #32]	; (8004140 <vTaskSwitchContext+0xb8>)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004122:	4b09      	ldr	r3, [pc, #36]	; (8004148 <vTaskSwitchContext+0xc0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	3354      	adds	r3, #84	; 0x54
 8004128:	4a08      	ldr	r2, [pc, #32]	; (800414c <vTaskSwitchContext+0xc4>)
 800412a:	6013      	str	r3, [r2, #0]
}
 800412c:	bf00      	nop
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	20000dd8 	.word	0x20000dd8
 800413c:	20000dc4 	.word	0x20000dc4
 8004140:	20000db8 	.word	0x20000db8
 8004144:	200008e0 	.word	0x200008e0
 8004148:	200008dc 	.word	0x200008dc
 800414c:	20000088 	.word	0x20000088

08004150 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10a      	bne.n	8004176 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004164:	f383 8811 	msr	BASEPRI, r3
 8004168:	f3bf 8f6f 	isb	sy
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	60fb      	str	r3, [r7, #12]
}
 8004172:	bf00      	nop
 8004174:	e7fe      	b.n	8004174 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004176:	4b07      	ldr	r3, [pc, #28]	; (8004194 <vTaskPlaceOnEventList+0x44>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3318      	adds	r3, #24
 800417c:	4619      	mov	r1, r3
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7fe fe61 	bl	8002e46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004184:	2101      	movs	r1, #1
 8004186:	6838      	ldr	r0, [r7, #0]
 8004188:	f000 fa80 	bl	800468c <prvAddCurrentTaskToDelayedList>
}
 800418c:	bf00      	nop
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	200008dc 	.word	0x200008dc

08004198 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10a      	bne.n	80041c0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80041aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ae:	f383 8811 	msr	BASEPRI, r3
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	617b      	str	r3, [r7, #20]
}
 80041bc:	bf00      	nop
 80041be:	e7fe      	b.n	80041be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041c0:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <vTaskPlaceOnEventListRestricted+0x54>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3318      	adds	r3, #24
 80041c6:	4619      	mov	r1, r3
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f7fe fe18 	bl	8002dfe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80041d4:	f04f 33ff 	mov.w	r3, #4294967295
 80041d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	68b8      	ldr	r0, [r7, #8]
 80041de:	f000 fa55 	bl	800468c <prvAddCurrentTaskToDelayedList>
	}
 80041e2:	bf00      	nop
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	200008dc 	.word	0x200008dc

080041f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10a      	bne.n	800421c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	60fb      	str	r3, [r7, #12]
}
 8004218:	bf00      	nop
 800421a:	e7fe      	b.n	800421a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	3318      	adds	r3, #24
 8004220:	4618      	mov	r0, r3
 8004222:	f7fe fe49 	bl	8002eb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004226:	4b1e      	ldr	r3, [pc, #120]	; (80042a0 <xTaskRemoveFromEventList+0xb0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d11d      	bne.n	800426a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	3304      	adds	r3, #4
 8004232:	4618      	mov	r0, r3
 8004234:	f7fe fe40 	bl	8002eb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800423c:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <xTaskRemoveFromEventList+0xb4>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d903      	bls.n	800424c <xTaskRemoveFromEventList+0x5c>
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004248:	4a16      	ldr	r2, [pc, #88]	; (80042a4 <xTaskRemoveFromEventList+0xb4>)
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004250:	4613      	mov	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4a13      	ldr	r2, [pc, #76]	; (80042a8 <xTaskRemoveFromEventList+0xb8>)
 800425a:	441a      	add	r2, r3
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	3304      	adds	r3, #4
 8004260:	4619      	mov	r1, r3
 8004262:	4610      	mov	r0, r2
 8004264:	f7fe fdcb 	bl	8002dfe <vListInsertEnd>
 8004268:	e005      	b.n	8004276 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	3318      	adds	r3, #24
 800426e:	4619      	mov	r1, r3
 8004270:	480e      	ldr	r0, [pc, #56]	; (80042ac <xTaskRemoveFromEventList+0xbc>)
 8004272:	f7fe fdc4 	bl	8002dfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800427a:	4b0d      	ldr	r3, [pc, #52]	; (80042b0 <xTaskRemoveFromEventList+0xc0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	429a      	cmp	r2, r3
 8004282:	d905      	bls.n	8004290 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004284:	2301      	movs	r3, #1
 8004286:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004288:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <xTaskRemoveFromEventList+0xc4>)
 800428a:	2201      	movs	r2, #1
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	e001      	b.n	8004294 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004290:	2300      	movs	r3, #0
 8004292:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004294:	697b      	ldr	r3, [r7, #20]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000dd8 	.word	0x20000dd8
 80042a4:	20000db8 	.word	0x20000db8
 80042a8:	200008e0 	.word	0x200008e0
 80042ac:	20000d70 	.word	0x20000d70
 80042b0:	200008dc 	.word	0x200008dc
 80042b4:	20000dc4 	.word	0x20000dc4

080042b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042c0:	4b06      	ldr	r3, [pc, #24]	; (80042dc <vTaskInternalSetTimeOutState+0x24>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <vTaskInternalSetTimeOutState+0x28>)
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	605a      	str	r2, [r3, #4]
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	20000dc8 	.word	0x20000dc8
 80042e0:	20000db4 	.word	0x20000db4

080042e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10a      	bne.n	800430a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80042f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	613b      	str	r3, [r7, #16]
}
 8004306:	bf00      	nop
 8004308:	e7fe      	b.n	8004308 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10a      	bne.n	8004326 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	f3bf 8f6f 	isb	sy
 800431c:	f3bf 8f4f 	dsb	sy
 8004320:	60fb      	str	r3, [r7, #12]
}
 8004322:	bf00      	nop
 8004324:	e7fe      	b.n	8004324 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004326:	f000 fe7d 	bl	8005024 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800432a:	4b1d      	ldr	r3, [pc, #116]	; (80043a0 <xTaskCheckForTimeOut+0xbc>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004342:	d102      	bne.n	800434a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004344:	2300      	movs	r3, #0
 8004346:	61fb      	str	r3, [r7, #28]
 8004348:	e023      	b.n	8004392 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	4b15      	ldr	r3, [pc, #84]	; (80043a4 <xTaskCheckForTimeOut+0xc0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d007      	beq.n	8004366 <xTaskCheckForTimeOut+0x82>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	429a      	cmp	r2, r3
 800435e:	d302      	bcc.n	8004366 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004360:	2301      	movs	r3, #1
 8004362:	61fb      	str	r3, [r7, #28]
 8004364:	e015      	b.n	8004392 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	429a      	cmp	r2, r3
 800436e:	d20b      	bcs.n	8004388 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	1ad2      	subs	r2, r2, r3
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7ff ff9b 	bl	80042b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004382:	2300      	movs	r3, #0
 8004384:	61fb      	str	r3, [r7, #28]
 8004386:	e004      	b.n	8004392 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	2200      	movs	r2, #0
 800438c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800438e:	2301      	movs	r3, #1
 8004390:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004392:	f000 fe77 	bl	8005084 <vPortExitCritical>

	return xReturn;
 8004396:	69fb      	ldr	r3, [r7, #28]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3720      	adds	r7, #32
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	20000db4 	.word	0x20000db4
 80043a4:	20000dc8 	.word	0x20000dc8

080043a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043ac:	4b03      	ldr	r3, [pc, #12]	; (80043bc <vTaskMissedYield+0x14>)
 80043ae:	2201      	movs	r2, #1
 80043b0:	601a      	str	r2, [r3, #0]
}
 80043b2:	bf00      	nop
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	20000dc4 	.word	0x20000dc4

080043c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043c8:	f000 f852 	bl	8004470 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043cc:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <prvIdleTask+0x28>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d9f9      	bls.n	80043c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80043d4:	4b05      	ldr	r3, [pc, #20]	; (80043ec <prvIdleTask+0x2c>)
 80043d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043e4:	e7f0      	b.n	80043c8 <prvIdleTask+0x8>
 80043e6:	bf00      	nop
 80043e8:	200008e0 	.word	0x200008e0
 80043ec:	e000ed04 	.word	0xe000ed04

080043f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043f6:	2300      	movs	r3, #0
 80043f8:	607b      	str	r3, [r7, #4]
 80043fa:	e00c      	b.n	8004416 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4413      	add	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4a12      	ldr	r2, [pc, #72]	; (8004450 <prvInitialiseTaskLists+0x60>)
 8004408:	4413      	add	r3, r2
 800440a:	4618      	mov	r0, r3
 800440c:	f7fe fcca 	bl	8002da4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3301      	adds	r3, #1
 8004414:	607b      	str	r3, [r7, #4]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b37      	cmp	r3, #55	; 0x37
 800441a:	d9ef      	bls.n	80043fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800441c:	480d      	ldr	r0, [pc, #52]	; (8004454 <prvInitialiseTaskLists+0x64>)
 800441e:	f7fe fcc1 	bl	8002da4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004422:	480d      	ldr	r0, [pc, #52]	; (8004458 <prvInitialiseTaskLists+0x68>)
 8004424:	f7fe fcbe 	bl	8002da4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004428:	480c      	ldr	r0, [pc, #48]	; (800445c <prvInitialiseTaskLists+0x6c>)
 800442a:	f7fe fcbb 	bl	8002da4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800442e:	480c      	ldr	r0, [pc, #48]	; (8004460 <prvInitialiseTaskLists+0x70>)
 8004430:	f7fe fcb8 	bl	8002da4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004434:	480b      	ldr	r0, [pc, #44]	; (8004464 <prvInitialiseTaskLists+0x74>)
 8004436:	f7fe fcb5 	bl	8002da4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800443a:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <prvInitialiseTaskLists+0x78>)
 800443c:	4a05      	ldr	r2, [pc, #20]	; (8004454 <prvInitialiseTaskLists+0x64>)
 800443e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004440:	4b0a      	ldr	r3, [pc, #40]	; (800446c <prvInitialiseTaskLists+0x7c>)
 8004442:	4a05      	ldr	r2, [pc, #20]	; (8004458 <prvInitialiseTaskLists+0x68>)
 8004444:	601a      	str	r2, [r3, #0]
}
 8004446:	bf00      	nop
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	200008e0 	.word	0x200008e0
 8004454:	20000d40 	.word	0x20000d40
 8004458:	20000d54 	.word	0x20000d54
 800445c:	20000d70 	.word	0x20000d70
 8004460:	20000d84 	.word	0x20000d84
 8004464:	20000d9c 	.word	0x20000d9c
 8004468:	20000d68 	.word	0x20000d68
 800446c:	20000d6c 	.word	0x20000d6c

08004470 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004476:	e019      	b.n	80044ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004478:	f000 fdd4 	bl	8005024 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800447c:	4b10      	ldr	r3, [pc, #64]	; (80044c0 <prvCheckTasksWaitingTermination+0x50>)
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3304      	adds	r3, #4
 8004488:	4618      	mov	r0, r3
 800448a:	f7fe fd15 	bl	8002eb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800448e:	4b0d      	ldr	r3, [pc, #52]	; (80044c4 <prvCheckTasksWaitingTermination+0x54>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	3b01      	subs	r3, #1
 8004494:	4a0b      	ldr	r2, [pc, #44]	; (80044c4 <prvCheckTasksWaitingTermination+0x54>)
 8004496:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004498:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <prvCheckTasksWaitingTermination+0x58>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3b01      	subs	r3, #1
 800449e:	4a0a      	ldr	r2, [pc, #40]	; (80044c8 <prvCheckTasksWaitingTermination+0x58>)
 80044a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044a2:	f000 fdef 	bl	8005084 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f810 	bl	80044cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044ac:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <prvCheckTasksWaitingTermination+0x58>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e1      	bne.n	8004478 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044b4:	bf00      	nop
 80044b6:	bf00      	nop
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	20000d84 	.word	0x20000d84
 80044c4:	20000db0 	.word	0x20000db0
 80044c8:	20000d98 	.word	0x20000d98

080044cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3354      	adds	r3, #84	; 0x54
 80044d8:	4618      	mov	r0, r3
 80044da:	f001 f8b7 	bl	800564c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d108      	bne.n	80044fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 ff87 	bl	8005400 <vPortFree>
				vPortFree( pxTCB );
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 ff84 	bl	8005400 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044f8:	e018      	b.n	800452c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004500:	2b01      	cmp	r3, #1
 8004502:	d103      	bne.n	800450c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 ff7b 	bl	8005400 <vPortFree>
	}
 800450a:	e00f      	b.n	800452c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004512:	2b02      	cmp	r3, #2
 8004514:	d00a      	beq.n	800452c <prvDeleteTCB+0x60>
	__asm volatile
 8004516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451a:	f383 8811 	msr	BASEPRI, r3
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	60fb      	str	r3, [r7, #12]
}
 8004528:	bf00      	nop
 800452a:	e7fe      	b.n	800452a <prvDeleteTCB+0x5e>
	}
 800452c:	bf00      	nop
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800453a:	4b0c      	ldr	r3, [pc, #48]	; (800456c <prvResetNextTaskUnblockTime+0x38>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d104      	bne.n	800454e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004544:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <prvResetNextTaskUnblockTime+0x3c>)
 8004546:	f04f 32ff 	mov.w	r2, #4294967295
 800454a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800454c:	e008      	b.n	8004560 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800454e:	4b07      	ldr	r3, [pc, #28]	; (800456c <prvResetNextTaskUnblockTime+0x38>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	4a04      	ldr	r2, [pc, #16]	; (8004570 <prvResetNextTaskUnblockTime+0x3c>)
 800455e:	6013      	str	r3, [r2, #0]
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	20000d68 	.word	0x20000d68
 8004570:	20000dd0 	.word	0x20000dd0

08004574 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800457a:	4b0b      	ldr	r3, [pc, #44]	; (80045a8 <xTaskGetSchedulerState+0x34>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d102      	bne.n	8004588 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004582:	2301      	movs	r3, #1
 8004584:	607b      	str	r3, [r7, #4]
 8004586:	e008      	b.n	800459a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004588:	4b08      	ldr	r3, [pc, #32]	; (80045ac <xTaskGetSchedulerState+0x38>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d102      	bne.n	8004596 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004590:	2302      	movs	r3, #2
 8004592:	607b      	str	r3, [r7, #4]
 8004594:	e001      	b.n	800459a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004596:	2300      	movs	r3, #0
 8004598:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800459a:	687b      	ldr	r3, [r7, #4]
	}
 800459c:	4618      	mov	r0, r3
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	20000dbc 	.word	0x20000dbc
 80045ac:	20000dd8 	.word	0x20000dd8

080045b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045bc:	2300      	movs	r3, #0
 80045be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d056      	beq.n	8004674 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045c6:	4b2e      	ldr	r3, [pc, #184]	; (8004680 <xTaskPriorityDisinherit+0xd0>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d00a      	beq.n	80045e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80045d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d4:	f383 8811 	msr	BASEPRI, r3
 80045d8:	f3bf 8f6f 	isb	sy
 80045dc:	f3bf 8f4f 	dsb	sy
 80045e0:	60fb      	str	r3, [r7, #12]
}
 80045e2:	bf00      	nop
 80045e4:	e7fe      	b.n	80045e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10a      	bne.n	8004604 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80045ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	60bb      	str	r3, [r7, #8]
}
 8004600:	bf00      	nop
 8004602:	e7fe      	b.n	8004602 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004608:	1e5a      	subs	r2, r3, #1
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004616:	429a      	cmp	r2, r3
 8004618:	d02c      	beq.n	8004674 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461e:	2b00      	cmp	r3, #0
 8004620:	d128      	bne.n	8004674 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	3304      	adds	r3, #4
 8004626:	4618      	mov	r0, r3
 8004628:	f7fe fc46 	bl	8002eb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004638:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004644:	4b0f      	ldr	r3, [pc, #60]	; (8004684 <xTaskPriorityDisinherit+0xd4>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d903      	bls.n	8004654 <xTaskPriorityDisinherit+0xa4>
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	4a0c      	ldr	r2, [pc, #48]	; (8004684 <xTaskPriorityDisinherit+0xd4>)
 8004652:	6013      	str	r3, [r2, #0]
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004658:	4613      	mov	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4a09      	ldr	r2, [pc, #36]	; (8004688 <xTaskPriorityDisinherit+0xd8>)
 8004662:	441a      	add	r2, r3
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	3304      	adds	r3, #4
 8004668:	4619      	mov	r1, r3
 800466a:	4610      	mov	r0, r2
 800466c:	f7fe fbc7 	bl	8002dfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004670:	2301      	movs	r3, #1
 8004672:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004674:	697b      	ldr	r3, [r7, #20]
	}
 8004676:	4618      	mov	r0, r3
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	200008dc 	.word	0x200008dc
 8004684:	20000db8 	.word	0x20000db8
 8004688:	200008e0 	.word	0x200008e0

0800468c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004696:	4b21      	ldr	r3, [pc, #132]	; (800471c <prvAddCurrentTaskToDelayedList+0x90>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800469c:	4b20      	ldr	r3, [pc, #128]	; (8004720 <prvAddCurrentTaskToDelayedList+0x94>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3304      	adds	r3, #4
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fe fc08 	bl	8002eb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ae:	d10a      	bne.n	80046c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d007      	beq.n	80046c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046b6:	4b1a      	ldr	r3, [pc, #104]	; (8004720 <prvAddCurrentTaskToDelayedList+0x94>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3304      	adds	r3, #4
 80046bc:	4619      	mov	r1, r3
 80046be:	4819      	ldr	r0, [pc, #100]	; (8004724 <prvAddCurrentTaskToDelayedList+0x98>)
 80046c0:	f7fe fb9d 	bl	8002dfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046c4:	e026      	b.n	8004714 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4413      	add	r3, r2
 80046cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046ce:	4b14      	ldr	r3, [pc, #80]	; (8004720 <prvAddCurrentTaskToDelayedList+0x94>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d209      	bcs.n	80046f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046de:	4b12      	ldr	r3, [pc, #72]	; (8004728 <prvAddCurrentTaskToDelayedList+0x9c>)
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	4b0f      	ldr	r3, [pc, #60]	; (8004720 <prvAddCurrentTaskToDelayedList+0x94>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	3304      	adds	r3, #4
 80046e8:	4619      	mov	r1, r3
 80046ea:	4610      	mov	r0, r2
 80046ec:	f7fe fbab 	bl	8002e46 <vListInsert>
}
 80046f0:	e010      	b.n	8004714 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046f2:	4b0e      	ldr	r3, [pc, #56]	; (800472c <prvAddCurrentTaskToDelayedList+0xa0>)
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	4b0a      	ldr	r3, [pc, #40]	; (8004720 <prvAddCurrentTaskToDelayedList+0x94>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3304      	adds	r3, #4
 80046fc:	4619      	mov	r1, r3
 80046fe:	4610      	mov	r0, r2
 8004700:	f7fe fba1 	bl	8002e46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004704:	4b0a      	ldr	r3, [pc, #40]	; (8004730 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	429a      	cmp	r2, r3
 800470c:	d202      	bcs.n	8004714 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800470e:	4a08      	ldr	r2, [pc, #32]	; (8004730 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	6013      	str	r3, [r2, #0]
}
 8004714:	bf00      	nop
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	20000db4 	.word	0x20000db4
 8004720:	200008dc 	.word	0x200008dc
 8004724:	20000d9c 	.word	0x20000d9c
 8004728:	20000d6c 	.word	0x20000d6c
 800472c:	20000d68 	.word	0x20000d68
 8004730:	20000dd0 	.word	0x20000dd0

08004734 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b08a      	sub	sp, #40	; 0x28
 8004738:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800473a:	2300      	movs	r3, #0
 800473c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800473e:	f000 fb07 	bl	8004d50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004742:	4b1c      	ldr	r3, [pc, #112]	; (80047b4 <xTimerCreateTimerTask+0x80>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d021      	beq.n	800478e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800474e:	2300      	movs	r3, #0
 8004750:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004752:	1d3a      	adds	r2, r7, #4
 8004754:	f107 0108 	add.w	r1, r7, #8
 8004758:	f107 030c 	add.w	r3, r7, #12
 800475c:	4618      	mov	r0, r3
 800475e:	f7fe fb07 	bl	8002d70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	9202      	str	r2, [sp, #8]
 800476a:	9301      	str	r3, [sp, #4]
 800476c:	2302      	movs	r3, #2
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	2300      	movs	r3, #0
 8004772:	460a      	mov	r2, r1
 8004774:	4910      	ldr	r1, [pc, #64]	; (80047b8 <xTimerCreateTimerTask+0x84>)
 8004776:	4811      	ldr	r0, [pc, #68]	; (80047bc <xTimerCreateTimerTask+0x88>)
 8004778:	f7ff f8b4 	bl	80038e4 <xTaskCreateStatic>
 800477c:	4603      	mov	r3, r0
 800477e:	4a10      	ldr	r2, [pc, #64]	; (80047c0 <xTimerCreateTimerTask+0x8c>)
 8004780:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004782:	4b0f      	ldr	r3, [pc, #60]	; (80047c0 <xTimerCreateTimerTask+0x8c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800478a:	2301      	movs	r3, #1
 800478c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10a      	bne.n	80047aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	613b      	str	r3, [r7, #16]
}
 80047a6:	bf00      	nop
 80047a8:	e7fe      	b.n	80047a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80047aa:	697b      	ldr	r3, [r7, #20]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	20000e0c 	.word	0x20000e0c
 80047b8:	08005848 	.word	0x08005848
 80047bc:	080048f9 	.word	0x080048f9
 80047c0:	20000e10 	.word	0x20000e10

080047c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08a      	sub	sp, #40	; 0x28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
 80047d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80047d2:	2300      	movs	r3, #0
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10a      	bne.n	80047f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e0:	f383 8811 	msr	BASEPRI, r3
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	623b      	str	r3, [r7, #32]
}
 80047ee:	bf00      	nop
 80047f0:	e7fe      	b.n	80047f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80047f2:	4b1a      	ldr	r3, [pc, #104]	; (800485c <xTimerGenericCommand+0x98>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d02a      	beq.n	8004850 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2b05      	cmp	r3, #5
 800480a:	dc18      	bgt.n	800483e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800480c:	f7ff feb2 	bl	8004574 <xTaskGetSchedulerState>
 8004810:	4603      	mov	r3, r0
 8004812:	2b02      	cmp	r3, #2
 8004814:	d109      	bne.n	800482a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004816:	4b11      	ldr	r3, [pc, #68]	; (800485c <xTimerGenericCommand+0x98>)
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	f107 0110 	add.w	r1, r7, #16
 800481e:	2300      	movs	r3, #0
 8004820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004822:	f7fe fc77 	bl	8003114 <xQueueGenericSend>
 8004826:	6278      	str	r0, [r7, #36]	; 0x24
 8004828:	e012      	b.n	8004850 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800482a:	4b0c      	ldr	r3, [pc, #48]	; (800485c <xTimerGenericCommand+0x98>)
 800482c:	6818      	ldr	r0, [r3, #0]
 800482e:	f107 0110 	add.w	r1, r7, #16
 8004832:	2300      	movs	r3, #0
 8004834:	2200      	movs	r2, #0
 8004836:	f7fe fc6d 	bl	8003114 <xQueueGenericSend>
 800483a:	6278      	str	r0, [r7, #36]	; 0x24
 800483c:	e008      	b.n	8004850 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800483e:	4b07      	ldr	r3, [pc, #28]	; (800485c <xTimerGenericCommand+0x98>)
 8004840:	6818      	ldr	r0, [r3, #0]
 8004842:	f107 0110 	add.w	r1, r7, #16
 8004846:	2300      	movs	r3, #0
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	f7fe fd61 	bl	8003310 <xQueueGenericSendFromISR>
 800484e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004852:	4618      	mov	r0, r3
 8004854:	3728      	adds	r7, #40	; 0x28
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20000e0c 	.word	0x20000e0c

08004860 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b088      	sub	sp, #32
 8004864:	af02      	add	r7, sp, #8
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800486a:	4b22      	ldr	r3, [pc, #136]	; (80048f4 <prvProcessExpiredTimer+0x94>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	3304      	adds	r3, #4
 8004878:	4618      	mov	r0, r3
 800487a:	f7fe fb1d 	bl	8002eb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d022      	beq.n	80048d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	699a      	ldr	r2, [r3, #24]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	18d1      	adds	r1, r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	6978      	ldr	r0, [r7, #20]
 800489a:	f000 f8d1 	bl	8004a40 <prvInsertTimerInActiveList>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d01f      	beq.n	80048e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048a4:	2300      	movs	r3, #0
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	2300      	movs	r3, #0
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	2100      	movs	r1, #0
 80048ae:	6978      	ldr	r0, [r7, #20]
 80048b0:	f7ff ff88 	bl	80047c4 <xTimerGenericCommand>
 80048b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d113      	bne.n	80048e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80048bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	60fb      	str	r3, [r7, #12]
}
 80048ce:	bf00      	nop
 80048d0:	e7fe      	b.n	80048d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048d8:	f023 0301 	bic.w	r3, r3, #1
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	6978      	ldr	r0, [r7, #20]
 80048ea:	4798      	blx	r3
}
 80048ec:	bf00      	nop
 80048ee:	3718      	adds	r7, #24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	20000e04 	.word	0x20000e04

080048f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004900:	f107 0308 	add.w	r3, r7, #8
 8004904:	4618      	mov	r0, r3
 8004906:	f000 f857 	bl	80049b8 <prvGetNextExpireTime>
 800490a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	4619      	mov	r1, r3
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 f803 	bl	800491c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004916:	f000 f8d5 	bl	8004ac4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800491a:	e7f1      	b.n	8004900 <prvTimerTask+0x8>

0800491c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004926:	f7ff fa39 	bl	8003d9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800492a:	f107 0308 	add.w	r3, r7, #8
 800492e:	4618      	mov	r0, r3
 8004930:	f000 f866 	bl	8004a00 <prvSampleTimeNow>
 8004934:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d130      	bne.n	800499e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10a      	bne.n	8004958 <prvProcessTimerOrBlockTask+0x3c>
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	429a      	cmp	r2, r3
 8004948:	d806      	bhi.n	8004958 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800494a:	f7ff fa35 	bl	8003db8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800494e:	68f9      	ldr	r1, [r7, #12]
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f7ff ff85 	bl	8004860 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004956:	e024      	b.n	80049a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d008      	beq.n	8004970 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800495e:	4b13      	ldr	r3, [pc, #76]	; (80049ac <prvProcessTimerOrBlockTask+0x90>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <prvProcessTimerOrBlockTask+0x50>
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <prvProcessTimerOrBlockTask+0x52>
 800496c:	2300      	movs	r3, #0
 800496e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004970:	4b0f      	ldr	r3, [pc, #60]	; (80049b0 <prvProcessTimerOrBlockTask+0x94>)
 8004972:	6818      	ldr	r0, [r3, #0]
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	4619      	mov	r1, r3
 800497e:	f7fe ff7d 	bl	800387c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004982:	f7ff fa19 	bl	8003db8 <xTaskResumeAll>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10a      	bne.n	80049a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800498c:	4b09      	ldr	r3, [pc, #36]	; (80049b4 <prvProcessTimerOrBlockTask+0x98>)
 800498e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	f3bf 8f6f 	isb	sy
}
 800499c:	e001      	b.n	80049a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800499e:	f7ff fa0b 	bl	8003db8 <xTaskResumeAll>
}
 80049a2:	bf00      	nop
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	20000e08 	.word	0x20000e08
 80049b0:	20000e0c 	.word	0x20000e0c
 80049b4:	e000ed04 	.word	0xe000ed04

080049b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80049c0:	4b0e      	ldr	r3, [pc, #56]	; (80049fc <prvGetNextExpireTime+0x44>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <prvGetNextExpireTime+0x16>
 80049ca:	2201      	movs	r2, #1
 80049cc:	e000      	b.n	80049d0 <prvGetNextExpireTime+0x18>
 80049ce:	2200      	movs	r2, #0
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d105      	bne.n	80049e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049dc:	4b07      	ldr	r3, [pc, #28]	; (80049fc <prvGetNextExpireTime+0x44>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	e001      	b.n	80049ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80049ec:	68fb      	ldr	r3, [r7, #12]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	20000e04 	.word	0x20000e04

08004a00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a08:	f7ff fa74 	bl	8003ef4 <xTaskGetTickCount>
 8004a0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a0e:	4b0b      	ldr	r3, [pc, #44]	; (8004a3c <prvSampleTimeNow+0x3c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d205      	bcs.n	8004a24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a18:	f000 f936 	bl	8004c88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	e002      	b.n	8004a2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a2a:	4a04      	ldr	r2, [pc, #16]	; (8004a3c <prvSampleTimeNow+0x3c>)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a30:	68fb      	ldr	r3, [r7, #12]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	20000e14 	.word	0x20000e14

08004a40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
 8004a4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d812      	bhi.n	8004a8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	1ad2      	subs	r2, r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d302      	bcc.n	8004a7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004a74:	2301      	movs	r3, #1
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	e01b      	b.n	8004ab2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a7a:	4b10      	ldr	r3, [pc, #64]	; (8004abc <prvInsertTimerInActiveList+0x7c>)
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3304      	adds	r3, #4
 8004a82:	4619      	mov	r1, r3
 8004a84:	4610      	mov	r0, r2
 8004a86:	f7fe f9de 	bl	8002e46 <vListInsert>
 8004a8a:	e012      	b.n	8004ab2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d206      	bcs.n	8004aa2 <prvInsertTimerInActiveList+0x62>
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d302      	bcc.n	8004aa2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	617b      	str	r3, [r7, #20]
 8004aa0:	e007      	b.n	8004ab2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004aa2:	4b07      	ldr	r3, [pc, #28]	; (8004ac0 <prvInsertTimerInActiveList+0x80>)
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4610      	mov	r0, r2
 8004aae:	f7fe f9ca 	bl	8002e46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ab2:	697b      	ldr	r3, [r7, #20]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3718      	adds	r7, #24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	20000e08 	.word	0x20000e08
 8004ac0:	20000e04 	.word	0x20000e04

08004ac4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b08e      	sub	sp, #56	; 0x38
 8004ac8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004aca:	e0ca      	b.n	8004c62 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	da18      	bge.n	8004b04 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ad2:	1d3b      	adds	r3, r7, #4
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10a      	bne.n	8004af4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	61fb      	str	r3, [r7, #28]
}
 8004af0:	bf00      	nop
 8004af2:	e7fe      	b.n	8004af2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004afa:	6850      	ldr	r0, [r2, #4]
 8004afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004afe:	6892      	ldr	r2, [r2, #8]
 8004b00:	4611      	mov	r1, r2
 8004b02:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f2c0 80ab 	blt.w	8004c62 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d004      	beq.n	8004b22 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7fe f9cb 	bl	8002eb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b22:	463b      	mov	r3, r7
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7ff ff6b 	bl	8004a00 <prvSampleTimeNow>
 8004b2a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b09      	cmp	r3, #9
 8004b30:	f200 8096 	bhi.w	8004c60 <prvProcessReceivedCommands+0x19c>
 8004b34:	a201      	add	r2, pc, #4	; (adr r2, 8004b3c <prvProcessReceivedCommands+0x78>)
 8004b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3a:	bf00      	nop
 8004b3c:	08004b65 	.word	0x08004b65
 8004b40:	08004b65 	.word	0x08004b65
 8004b44:	08004b65 	.word	0x08004b65
 8004b48:	08004bd9 	.word	0x08004bd9
 8004b4c:	08004bed 	.word	0x08004bed
 8004b50:	08004c37 	.word	0x08004c37
 8004b54:	08004b65 	.word	0x08004b65
 8004b58:	08004b65 	.word	0x08004b65
 8004b5c:	08004bd9 	.word	0x08004bd9
 8004b60:	08004bed 	.word	0x08004bed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b6a:	f043 0301 	orr.w	r3, r3, #1
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	18d1      	adds	r1, r2, r3
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b84:	f7ff ff5c 	bl	8004a40 <prvInsertTimerInActiveList>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d069      	beq.n	8004c62 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d05e      	beq.n	8004c62 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	441a      	add	r2, r3
 8004bac:	2300      	movs	r3, #0
 8004bae:	9300      	str	r3, [sp, #0]
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bb6:	f7ff fe05 	bl	80047c4 <xTimerGenericCommand>
 8004bba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d14f      	bne.n	8004c62 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	61bb      	str	r3, [r7, #24]
}
 8004bd4:	bf00      	nop
 8004bd6:	e7fe      	b.n	8004bd6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bde:	f023 0301 	bic.w	r3, r3, #1
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004bea:	e03a      	b.n	8004c62 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bf2:	f043 0301 	orr.w	r3, r3, #1
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c02:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10a      	bne.n	8004c22 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	617b      	str	r3, [r7, #20]
}
 8004c1e:	bf00      	nop
 8004c20:	e7fe      	b.n	8004c20 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c24:	699a      	ldr	r2, [r3, #24]
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	18d1      	adds	r1, r2, r3
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c30:	f7ff ff06 	bl	8004a40 <prvInsertTimerInActiveList>
					break;
 8004c34:	e015      	b.n	8004c62 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d103      	bne.n	8004c4c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c46:	f000 fbdb 	bl	8005400 <vPortFree>
 8004c4a:	e00a      	b.n	8004c62 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c52:	f023 0301 	bic.w	r3, r3, #1
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004c5e:	e000      	b.n	8004c62 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004c60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c62:	4b08      	ldr	r3, [pc, #32]	; (8004c84 <prvProcessReceivedCommands+0x1c0>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	1d39      	adds	r1, r7, #4
 8004c68:	2200      	movs	r2, #0
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7fe fbec 	bl	8003448 <xQueueReceive>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f47f af2a 	bne.w	8004acc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004c78:	bf00      	nop
 8004c7a:	bf00      	nop
 8004c7c:	3730      	adds	r7, #48	; 0x30
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20000e0c 	.word	0x20000e0c

08004c88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c8e:	e048      	b.n	8004d22 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c90:	4b2d      	ldr	r3, [pc, #180]	; (8004d48 <prvSwitchTimerLists+0xc0>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c9a:	4b2b      	ldr	r3, [pc, #172]	; (8004d48 <prvSwitchTimerLists+0xc0>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fe f905 	bl	8002eb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d02e      	beq.n	8004d22 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4413      	add	r3, r2
 8004ccc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d90e      	bls.n	8004cf4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ce2:	4b19      	ldr	r3, [pc, #100]	; (8004d48 <prvSwitchTimerLists+0xc0>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	3304      	adds	r3, #4
 8004cea:	4619      	mov	r1, r3
 8004cec:	4610      	mov	r0, r2
 8004cee:	f7fe f8aa 	bl	8002e46 <vListInsert>
 8004cf2:	e016      	b.n	8004d22 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f7ff fd60 	bl	80047c4 <xTimerGenericCommand>
 8004d04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10a      	bne.n	8004d22 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	603b      	str	r3, [r7, #0]
}
 8004d1e:	bf00      	nop
 8004d20:	e7fe      	b.n	8004d20 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d22:	4b09      	ldr	r3, [pc, #36]	; (8004d48 <prvSwitchTimerLists+0xc0>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1b1      	bne.n	8004c90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d2c:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <prvSwitchTimerLists+0xc0>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d32:	4b06      	ldr	r3, [pc, #24]	; (8004d4c <prvSwitchTimerLists+0xc4>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a04      	ldr	r2, [pc, #16]	; (8004d48 <prvSwitchTimerLists+0xc0>)
 8004d38:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d3a:	4a04      	ldr	r2, [pc, #16]	; (8004d4c <prvSwitchTimerLists+0xc4>)
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	6013      	str	r3, [r2, #0]
}
 8004d40:	bf00      	nop
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	20000e04 	.word	0x20000e04
 8004d4c:	20000e08 	.word	0x20000e08

08004d50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004d56:	f000 f965 	bl	8005024 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004d5a:	4b15      	ldr	r3, [pc, #84]	; (8004db0 <prvCheckForValidListAndQueue+0x60>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d120      	bne.n	8004da4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d62:	4814      	ldr	r0, [pc, #80]	; (8004db4 <prvCheckForValidListAndQueue+0x64>)
 8004d64:	f7fe f81e 	bl	8002da4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d68:	4813      	ldr	r0, [pc, #76]	; (8004db8 <prvCheckForValidListAndQueue+0x68>)
 8004d6a:	f7fe f81b 	bl	8002da4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d6e:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <prvCheckForValidListAndQueue+0x6c>)
 8004d70:	4a10      	ldr	r2, [pc, #64]	; (8004db4 <prvCheckForValidListAndQueue+0x64>)
 8004d72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d74:	4b12      	ldr	r3, [pc, #72]	; (8004dc0 <prvCheckForValidListAndQueue+0x70>)
 8004d76:	4a10      	ldr	r2, [pc, #64]	; (8004db8 <prvCheckForValidListAndQueue+0x68>)
 8004d78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	4b11      	ldr	r3, [pc, #68]	; (8004dc4 <prvCheckForValidListAndQueue+0x74>)
 8004d80:	4a11      	ldr	r2, [pc, #68]	; (8004dc8 <prvCheckForValidListAndQueue+0x78>)
 8004d82:	2110      	movs	r1, #16
 8004d84:	200a      	movs	r0, #10
 8004d86:	f7fe f929 	bl	8002fdc <xQueueGenericCreateStatic>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	4a08      	ldr	r2, [pc, #32]	; (8004db0 <prvCheckForValidListAndQueue+0x60>)
 8004d8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004d90:	4b07      	ldr	r3, [pc, #28]	; (8004db0 <prvCheckForValidListAndQueue+0x60>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d98:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <prvCheckForValidListAndQueue+0x60>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	490b      	ldr	r1, [pc, #44]	; (8004dcc <prvCheckForValidListAndQueue+0x7c>)
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fe fd42 	bl	8003828 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004da4:	f000 f96e 	bl	8005084 <vPortExitCritical>
}
 8004da8:	bf00      	nop
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	20000e0c 	.word	0x20000e0c
 8004db4:	20000ddc 	.word	0x20000ddc
 8004db8:	20000df0 	.word	0x20000df0
 8004dbc:	20000e04 	.word	0x20000e04
 8004dc0:	20000e08 	.word	0x20000e08
 8004dc4:	20000eb8 	.word	0x20000eb8
 8004dc8:	20000e18 	.word	0x20000e18
 8004dcc:	08005850 	.word	0x08005850

08004dd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	3b04      	subs	r3, #4
 8004de0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004de8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	3b04      	subs	r3, #4
 8004dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f023 0201 	bic.w	r2, r3, #1
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	3b04      	subs	r3, #4
 8004dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e00:	4a0c      	ldr	r2, [pc, #48]	; (8004e34 <pxPortInitialiseStack+0x64>)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	3b14      	subs	r3, #20
 8004e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3b04      	subs	r3, #4
 8004e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f06f 0202 	mvn.w	r2, #2
 8004e1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	3b20      	subs	r3, #32
 8004e24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e26:	68fb      	ldr	r3, [r7, #12]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	08004e39 	.word	0x08004e39

08004e38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e42:	4b12      	ldr	r3, [pc, #72]	; (8004e8c <prvTaskExitError+0x54>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4a:	d00a      	beq.n	8004e62 <prvTaskExitError+0x2a>
	__asm volatile
 8004e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	60fb      	str	r3, [r7, #12]
}
 8004e5e:	bf00      	nop
 8004e60:	e7fe      	b.n	8004e60 <prvTaskExitError+0x28>
	__asm volatile
 8004e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	60bb      	str	r3, [r7, #8]
}
 8004e74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e76:	bf00      	nop
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0fc      	beq.n	8004e78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e7e:	bf00      	nop
 8004e80:	bf00      	nop
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	20000038 	.word	0x20000038

08004e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e90:	4b07      	ldr	r3, [pc, #28]	; (8004eb0 <pxCurrentTCBConst2>)
 8004e92:	6819      	ldr	r1, [r3, #0]
 8004e94:	6808      	ldr	r0, [r1, #0]
 8004e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e9a:	f380 8809 	msr	PSP, r0
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f04f 0000 	mov.w	r0, #0
 8004ea6:	f380 8811 	msr	BASEPRI, r0
 8004eaa:	4770      	bx	lr
 8004eac:	f3af 8000 	nop.w

08004eb0 <pxCurrentTCBConst2>:
 8004eb0:	200008dc 	.word	0x200008dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004eb4:	bf00      	nop
 8004eb6:	bf00      	nop

08004eb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004eb8:	4808      	ldr	r0, [pc, #32]	; (8004edc <prvPortStartFirstTask+0x24>)
 8004eba:	6800      	ldr	r0, [r0, #0]
 8004ebc:	6800      	ldr	r0, [r0, #0]
 8004ebe:	f380 8808 	msr	MSP, r0
 8004ec2:	f04f 0000 	mov.w	r0, #0
 8004ec6:	f380 8814 	msr	CONTROL, r0
 8004eca:	b662      	cpsie	i
 8004ecc:	b661      	cpsie	f
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	df00      	svc	0
 8004ed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004eda:	bf00      	nop
 8004edc:	e000ed08 	.word	0xe000ed08

08004ee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ee6:	4b46      	ldr	r3, [pc, #280]	; (8005000 <xPortStartScheduler+0x120>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a46      	ldr	r2, [pc, #280]	; (8005004 <xPortStartScheduler+0x124>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d10a      	bne.n	8004f06 <xPortStartScheduler+0x26>
	__asm volatile
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	613b      	str	r3, [r7, #16]
}
 8004f02:	bf00      	nop
 8004f04:	e7fe      	b.n	8004f04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f06:	4b3e      	ldr	r3, [pc, #248]	; (8005000 <xPortStartScheduler+0x120>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a3f      	ldr	r2, [pc, #252]	; (8005008 <xPortStartScheduler+0x128>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d10a      	bne.n	8004f26 <xPortStartScheduler+0x46>
	__asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	60fb      	str	r3, [r7, #12]
}
 8004f22:	bf00      	nop
 8004f24:	e7fe      	b.n	8004f24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f26:	4b39      	ldr	r3, [pc, #228]	; (800500c <xPortStartScheduler+0x12c>)
 8004f28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	22ff      	movs	r2, #255	; 0xff
 8004f36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f40:	78fb      	ldrb	r3, [r7, #3]
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	4b31      	ldr	r3, [pc, #196]	; (8005010 <xPortStartScheduler+0x130>)
 8004f4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f4e:	4b31      	ldr	r3, [pc, #196]	; (8005014 <xPortStartScheduler+0x134>)
 8004f50:	2207      	movs	r2, #7
 8004f52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f54:	e009      	b.n	8004f6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004f56:	4b2f      	ldr	r3, [pc, #188]	; (8005014 <xPortStartScheduler+0x134>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	4a2d      	ldr	r2, [pc, #180]	; (8005014 <xPortStartScheduler+0x134>)
 8004f5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f6a:	78fb      	ldrb	r3, [r7, #3]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f72:	2b80      	cmp	r3, #128	; 0x80
 8004f74:	d0ef      	beq.n	8004f56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f76:	4b27      	ldr	r3, [pc, #156]	; (8005014 <xPortStartScheduler+0x134>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f1c3 0307 	rsb	r3, r3, #7
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d00a      	beq.n	8004f98 <xPortStartScheduler+0xb8>
	__asm volatile
 8004f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	60bb      	str	r3, [r7, #8]
}
 8004f94:	bf00      	nop
 8004f96:	e7fe      	b.n	8004f96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f98:	4b1e      	ldr	r3, [pc, #120]	; (8005014 <xPortStartScheduler+0x134>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	021b      	lsls	r3, r3, #8
 8004f9e:	4a1d      	ldr	r2, [pc, #116]	; (8005014 <xPortStartScheduler+0x134>)
 8004fa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004fa2:	4b1c      	ldr	r3, [pc, #112]	; (8005014 <xPortStartScheduler+0x134>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004faa:	4a1a      	ldr	r2, [pc, #104]	; (8005014 <xPortStartScheduler+0x134>)
 8004fac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004fb6:	4b18      	ldr	r3, [pc, #96]	; (8005018 <xPortStartScheduler+0x138>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a17      	ldr	r2, [pc, #92]	; (8005018 <xPortStartScheduler+0x138>)
 8004fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004fc2:	4b15      	ldr	r3, [pc, #84]	; (8005018 <xPortStartScheduler+0x138>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a14      	ldr	r2, [pc, #80]	; (8005018 <xPortStartScheduler+0x138>)
 8004fc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004fcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004fce:	f000 f8dd 	bl	800518c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004fd2:	4b12      	ldr	r3, [pc, #72]	; (800501c <xPortStartScheduler+0x13c>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004fd8:	f000 f8fc 	bl	80051d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004fdc:	4b10      	ldr	r3, [pc, #64]	; (8005020 <xPortStartScheduler+0x140>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a0f      	ldr	r2, [pc, #60]	; (8005020 <xPortStartScheduler+0x140>)
 8004fe2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004fe6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004fe8:	f7ff ff66 	bl	8004eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004fec:	f7ff f84c 	bl	8004088 <vTaskSwitchContext>
	prvTaskExitError();
 8004ff0:	f7ff ff22 	bl	8004e38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	e000ed00 	.word	0xe000ed00
 8005004:	410fc271 	.word	0x410fc271
 8005008:	410fc270 	.word	0x410fc270
 800500c:	e000e400 	.word	0xe000e400
 8005010:	20000f08 	.word	0x20000f08
 8005014:	20000f0c 	.word	0x20000f0c
 8005018:	e000ed20 	.word	0xe000ed20
 800501c:	20000038 	.word	0x20000038
 8005020:	e000ef34 	.word	0xe000ef34

08005024 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	607b      	str	r3, [r7, #4]
}
 800503c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800503e:	4b0f      	ldr	r3, [pc, #60]	; (800507c <vPortEnterCritical+0x58>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3301      	adds	r3, #1
 8005044:	4a0d      	ldr	r2, [pc, #52]	; (800507c <vPortEnterCritical+0x58>)
 8005046:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005048:	4b0c      	ldr	r3, [pc, #48]	; (800507c <vPortEnterCritical+0x58>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d10f      	bne.n	8005070 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005050:	4b0b      	ldr	r3, [pc, #44]	; (8005080 <vPortEnterCritical+0x5c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <vPortEnterCritical+0x4c>
	__asm volatile
 800505a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	603b      	str	r3, [r7, #0]
}
 800506c:	bf00      	nop
 800506e:	e7fe      	b.n	800506e <vPortEnterCritical+0x4a>
	}
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	20000038 	.word	0x20000038
 8005080:	e000ed04 	.word	0xe000ed04

08005084 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800508a:	4b12      	ldr	r3, [pc, #72]	; (80050d4 <vPortExitCritical+0x50>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10a      	bne.n	80050a8 <vPortExitCritical+0x24>
	__asm volatile
 8005092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005096:	f383 8811 	msr	BASEPRI, r3
 800509a:	f3bf 8f6f 	isb	sy
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	607b      	str	r3, [r7, #4]
}
 80050a4:	bf00      	nop
 80050a6:	e7fe      	b.n	80050a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80050a8:	4b0a      	ldr	r3, [pc, #40]	; (80050d4 <vPortExitCritical+0x50>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3b01      	subs	r3, #1
 80050ae:	4a09      	ldr	r2, [pc, #36]	; (80050d4 <vPortExitCritical+0x50>)
 80050b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050b2:	4b08      	ldr	r3, [pc, #32]	; (80050d4 <vPortExitCritical+0x50>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d105      	bne.n	80050c6 <vPortExitCritical+0x42>
 80050ba:	2300      	movs	r3, #0
 80050bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	f383 8811 	msr	BASEPRI, r3
}
 80050c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	20000038 	.word	0x20000038
	...

080050e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80050e0:	f3ef 8009 	mrs	r0, PSP
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	4b15      	ldr	r3, [pc, #84]	; (8005140 <pxCurrentTCBConst>)
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	f01e 0f10 	tst.w	lr, #16
 80050f0:	bf08      	it	eq
 80050f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80050f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050fa:	6010      	str	r0, [r2, #0]
 80050fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005100:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005104:	f380 8811 	msr	BASEPRI, r0
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f7fe ffba 	bl	8004088 <vTaskSwitchContext>
 8005114:	f04f 0000 	mov.w	r0, #0
 8005118:	f380 8811 	msr	BASEPRI, r0
 800511c:	bc09      	pop	{r0, r3}
 800511e:	6819      	ldr	r1, [r3, #0]
 8005120:	6808      	ldr	r0, [r1, #0]
 8005122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005126:	f01e 0f10 	tst.w	lr, #16
 800512a:	bf08      	it	eq
 800512c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005130:	f380 8809 	msr	PSP, r0
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	f3af 8000 	nop.w

08005140 <pxCurrentTCBConst>:
 8005140:	200008dc 	.word	0x200008dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop

08005148 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
	__asm volatile
 800514e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	607b      	str	r3, [r7, #4]
}
 8005160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005162:	f7fe fed7 	bl	8003f14 <xTaskIncrementTick>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800516c:	4b06      	ldr	r3, [pc, #24]	; (8005188 <xPortSysTickHandler+0x40>)
 800516e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	2300      	movs	r3, #0
 8005176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	f383 8811 	msr	BASEPRI, r3
}
 800517e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005180:	bf00      	nop
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	e000ed04 	.word	0xe000ed04

0800518c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005190:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <vPortSetupTimerInterrupt+0x34>)
 8005192:	2200      	movs	r2, #0
 8005194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005196:	4b0b      	ldr	r3, [pc, #44]	; (80051c4 <vPortSetupTimerInterrupt+0x38>)
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800519c:	4b0a      	ldr	r3, [pc, #40]	; (80051c8 <vPortSetupTimerInterrupt+0x3c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a0a      	ldr	r2, [pc, #40]	; (80051cc <vPortSetupTimerInterrupt+0x40>)
 80051a2:	fba2 2303 	umull	r2, r3, r2, r3
 80051a6:	099b      	lsrs	r3, r3, #6
 80051a8:	4a09      	ldr	r2, [pc, #36]	; (80051d0 <vPortSetupTimerInterrupt+0x44>)
 80051aa:	3b01      	subs	r3, #1
 80051ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051ae:	4b04      	ldr	r3, [pc, #16]	; (80051c0 <vPortSetupTimerInterrupt+0x34>)
 80051b0:	2207      	movs	r2, #7
 80051b2:	601a      	str	r2, [r3, #0]
}
 80051b4:	bf00      	nop
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	e000e010 	.word	0xe000e010
 80051c4:	e000e018 	.word	0xe000e018
 80051c8:	2000002c 	.word	0x2000002c
 80051cc:	10624dd3 	.word	0x10624dd3
 80051d0:	e000e014 	.word	0xe000e014

080051d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80051d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80051e4 <vPortEnableVFP+0x10>
 80051d8:	6801      	ldr	r1, [r0, #0]
 80051da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80051de:	6001      	str	r1, [r0, #0]
 80051e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80051e2:	bf00      	nop
 80051e4:	e000ed88 	.word	0xe000ed88

080051e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80051ee:	f3ef 8305 	mrs	r3, IPSR
 80051f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b0f      	cmp	r3, #15
 80051f8:	d914      	bls.n	8005224 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80051fa:	4a17      	ldr	r2, [pc, #92]	; (8005258 <vPortValidateInterruptPriority+0x70>)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4413      	add	r3, r2
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005204:	4b15      	ldr	r3, [pc, #84]	; (800525c <vPortValidateInterruptPriority+0x74>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	7afa      	ldrb	r2, [r7, #11]
 800520a:	429a      	cmp	r2, r3
 800520c:	d20a      	bcs.n	8005224 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800520e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005212:	f383 8811 	msr	BASEPRI, r3
 8005216:	f3bf 8f6f 	isb	sy
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	607b      	str	r3, [r7, #4]
}
 8005220:	bf00      	nop
 8005222:	e7fe      	b.n	8005222 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005224:	4b0e      	ldr	r3, [pc, #56]	; (8005260 <vPortValidateInterruptPriority+0x78>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800522c:	4b0d      	ldr	r3, [pc, #52]	; (8005264 <vPortValidateInterruptPriority+0x7c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	429a      	cmp	r2, r3
 8005232:	d90a      	bls.n	800524a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	603b      	str	r3, [r7, #0]
}
 8005246:	bf00      	nop
 8005248:	e7fe      	b.n	8005248 <vPortValidateInterruptPriority+0x60>
	}
 800524a:	bf00      	nop
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	e000e3f0 	.word	0xe000e3f0
 800525c:	20000f08 	.word	0x20000f08
 8005260:	e000ed0c 	.word	0xe000ed0c
 8005264:	20000f0c 	.word	0x20000f0c

08005268 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08a      	sub	sp, #40	; 0x28
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005270:	2300      	movs	r3, #0
 8005272:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005274:	f7fe fd92 	bl	8003d9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005278:	4b5b      	ldr	r3, [pc, #364]	; (80053e8 <pvPortMalloc+0x180>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005280:	f000 f920 	bl	80054c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005284:	4b59      	ldr	r3, [pc, #356]	; (80053ec <pvPortMalloc+0x184>)
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4013      	ands	r3, r2
 800528c:	2b00      	cmp	r3, #0
 800528e:	f040 8093 	bne.w	80053b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d01d      	beq.n	80052d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005298:	2208      	movs	r2, #8
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4413      	add	r3, r2
 800529e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f003 0307 	and.w	r3, r3, #7
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d014      	beq.n	80052d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f023 0307 	bic.w	r3, r3, #7
 80052b0:	3308      	adds	r3, #8
 80052b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <pvPortMalloc+0x6c>
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	617b      	str	r3, [r7, #20]
}
 80052d0:	bf00      	nop
 80052d2:	e7fe      	b.n	80052d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d06e      	beq.n	80053b8 <pvPortMalloc+0x150>
 80052da:	4b45      	ldr	r3, [pc, #276]	; (80053f0 <pvPortMalloc+0x188>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d869      	bhi.n	80053b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80052e4:	4b43      	ldr	r3, [pc, #268]	; (80053f4 <pvPortMalloc+0x18c>)
 80052e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80052e8:	4b42      	ldr	r3, [pc, #264]	; (80053f4 <pvPortMalloc+0x18c>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052ee:	e004      	b.n	80052fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80052f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	429a      	cmp	r2, r3
 8005302:	d903      	bls.n	800530c <pvPortMalloc+0xa4>
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1f1      	bne.n	80052f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800530c:	4b36      	ldr	r3, [pc, #216]	; (80053e8 <pvPortMalloc+0x180>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005312:	429a      	cmp	r2, r3
 8005314:	d050      	beq.n	80053b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2208      	movs	r2, #8
 800531c:	4413      	add	r3, r2
 800531e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	1ad2      	subs	r2, r2, r3
 8005330:	2308      	movs	r3, #8
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	429a      	cmp	r2, r3
 8005336:	d91f      	bls.n	8005378 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4413      	add	r3, r2
 800533e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00a      	beq.n	8005360 <pvPortMalloc+0xf8>
	__asm volatile
 800534a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	613b      	str	r3, [r7, #16]
}
 800535c:	bf00      	nop
 800535e:	e7fe      	b.n	800535e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	1ad2      	subs	r2, r2, r3
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005372:	69b8      	ldr	r0, [r7, #24]
 8005374:	f000 f908 	bl	8005588 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005378:	4b1d      	ldr	r3, [pc, #116]	; (80053f0 <pvPortMalloc+0x188>)
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	4a1b      	ldr	r2, [pc, #108]	; (80053f0 <pvPortMalloc+0x188>)
 8005384:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005386:	4b1a      	ldr	r3, [pc, #104]	; (80053f0 <pvPortMalloc+0x188>)
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	4b1b      	ldr	r3, [pc, #108]	; (80053f8 <pvPortMalloc+0x190>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	429a      	cmp	r2, r3
 8005390:	d203      	bcs.n	800539a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005392:	4b17      	ldr	r3, [pc, #92]	; (80053f0 <pvPortMalloc+0x188>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a18      	ldr	r2, [pc, #96]	; (80053f8 <pvPortMalloc+0x190>)
 8005398:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800539a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	4b13      	ldr	r3, [pc, #76]	; (80053ec <pvPortMalloc+0x184>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	431a      	orrs	r2, r3
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	2200      	movs	r2, #0
 80053ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80053ae:	4b13      	ldr	r3, [pc, #76]	; (80053fc <pvPortMalloc+0x194>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	3301      	adds	r3, #1
 80053b4:	4a11      	ldr	r2, [pc, #68]	; (80053fc <pvPortMalloc+0x194>)
 80053b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053b8:	f7fe fcfe 	bl	8003db8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	f003 0307 	and.w	r3, r3, #7
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <pvPortMalloc+0x174>
	__asm volatile
 80053c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	60fb      	str	r3, [r7, #12]
}
 80053d8:	bf00      	nop
 80053da:	e7fe      	b.n	80053da <pvPortMalloc+0x172>
	return pvReturn;
 80053dc:	69fb      	ldr	r3, [r7, #28]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3728      	adds	r7, #40	; 0x28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	20004b18 	.word	0x20004b18
 80053ec:	20004b2c 	.word	0x20004b2c
 80053f0:	20004b1c 	.word	0x20004b1c
 80053f4:	20004b10 	.word	0x20004b10
 80053f8:	20004b20 	.word	0x20004b20
 80053fc:	20004b24 	.word	0x20004b24

08005400 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d04d      	beq.n	80054ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005412:	2308      	movs	r3, #8
 8005414:	425b      	negs	r3, r3
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	4413      	add	r3, r2
 800541a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	4b24      	ldr	r3, [pc, #144]	; (80054b8 <vPortFree+0xb8>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4013      	ands	r3, r2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10a      	bne.n	8005444 <vPortFree+0x44>
	__asm volatile
 800542e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	60fb      	str	r3, [r7, #12]
}
 8005440:	bf00      	nop
 8005442:	e7fe      	b.n	8005442 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <vPortFree+0x62>
	__asm volatile
 800544c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	60bb      	str	r3, [r7, #8]
}
 800545e:	bf00      	nop
 8005460:	e7fe      	b.n	8005460 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	4b14      	ldr	r3, [pc, #80]	; (80054b8 <vPortFree+0xb8>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4013      	ands	r3, r2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d01e      	beq.n	80054ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d11a      	bne.n	80054ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	685a      	ldr	r2, [r3, #4]
 800547c:	4b0e      	ldr	r3, [pc, #56]	; (80054b8 <vPortFree+0xb8>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	43db      	mvns	r3, r3
 8005482:	401a      	ands	r2, r3
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005488:	f7fe fc88 	bl	8003d9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <vPortFree+0xbc>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4413      	add	r3, r2
 8005496:	4a09      	ldr	r2, [pc, #36]	; (80054bc <vPortFree+0xbc>)
 8005498:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800549a:	6938      	ldr	r0, [r7, #16]
 800549c:	f000 f874 	bl	8005588 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80054a0:	4b07      	ldr	r3, [pc, #28]	; (80054c0 <vPortFree+0xc0>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3301      	adds	r3, #1
 80054a6:	4a06      	ldr	r2, [pc, #24]	; (80054c0 <vPortFree+0xc0>)
 80054a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80054aa:	f7fe fc85 	bl	8003db8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054ae:	bf00      	nop
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20004b2c 	.word	0x20004b2c
 80054bc:	20004b1c 	.word	0x20004b1c
 80054c0:	20004b28 	.word	0x20004b28

080054c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80054ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054d0:	4b27      	ldr	r3, [pc, #156]	; (8005570 <prvHeapInit+0xac>)
 80054d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00c      	beq.n	80054f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3307      	adds	r3, #7
 80054e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f023 0307 	bic.w	r3, r3, #7
 80054ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	4a1f      	ldr	r2, [pc, #124]	; (8005570 <prvHeapInit+0xac>)
 80054f4:	4413      	add	r3, r2
 80054f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80054fc:	4a1d      	ldr	r2, [pc, #116]	; (8005574 <prvHeapInit+0xb0>)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005502:	4b1c      	ldr	r3, [pc, #112]	; (8005574 <prvHeapInit+0xb0>)
 8005504:	2200      	movs	r2, #0
 8005506:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	4413      	add	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005510:	2208      	movs	r2, #8
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	1a9b      	subs	r3, r3, r2
 8005516:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 0307 	bic.w	r3, r3, #7
 800551e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4a15      	ldr	r2, [pc, #84]	; (8005578 <prvHeapInit+0xb4>)
 8005524:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005526:	4b14      	ldr	r3, [pc, #80]	; (8005578 <prvHeapInit+0xb4>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2200      	movs	r2, #0
 800552c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800552e:	4b12      	ldr	r3, [pc, #72]	; (8005578 <prvHeapInit+0xb4>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	1ad2      	subs	r2, r2, r3
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005544:	4b0c      	ldr	r3, [pc, #48]	; (8005578 <prvHeapInit+0xb4>)
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	4a0a      	ldr	r2, [pc, #40]	; (800557c <prvHeapInit+0xb8>)
 8005552:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	4a09      	ldr	r2, [pc, #36]	; (8005580 <prvHeapInit+0xbc>)
 800555a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800555c:	4b09      	ldr	r3, [pc, #36]	; (8005584 <prvHeapInit+0xc0>)
 800555e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005562:	601a      	str	r2, [r3, #0]
}
 8005564:	bf00      	nop
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	20000f10 	.word	0x20000f10
 8005574:	20004b10 	.word	0x20004b10
 8005578:	20004b18 	.word	0x20004b18
 800557c:	20004b20 	.word	0x20004b20
 8005580:	20004b1c 	.word	0x20004b1c
 8005584:	20004b2c 	.word	0x20004b2c

08005588 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005590:	4b28      	ldr	r3, [pc, #160]	; (8005634 <prvInsertBlockIntoFreeList+0xac>)
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	e002      	b.n	800559c <prvInsertBlockIntoFreeList+0x14>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d8f7      	bhi.n	8005596 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	4413      	add	r3, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d108      	bne.n	80055ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	685a      	ldr	r2, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	441a      	add	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	441a      	add	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d118      	bne.n	8005610 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	4b15      	ldr	r3, [pc, #84]	; (8005638 <prvInsertBlockIntoFreeList+0xb0>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d00d      	beq.n	8005606 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685a      	ldr	r2, [r3, #4]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	441a      	add	r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	e008      	b.n	8005618 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005606:	4b0c      	ldr	r3, [pc, #48]	; (8005638 <prvInsertBlockIntoFreeList+0xb0>)
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	e003      	b.n	8005618 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	429a      	cmp	r2, r3
 800561e:	d002      	beq.n	8005626 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005626:	bf00      	nop
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	20004b10 	.word	0x20004b10
 8005638:	20004b18 	.word	0x20004b18

0800563c <memset>:
 800563c:	4402      	add	r2, r0
 800563e:	4603      	mov	r3, r0
 8005640:	4293      	cmp	r3, r2
 8005642:	d100      	bne.n	8005646 <memset+0xa>
 8005644:	4770      	bx	lr
 8005646:	f803 1b01 	strb.w	r1, [r3], #1
 800564a:	e7f9      	b.n	8005640 <memset+0x4>

0800564c <_reclaim_reent>:
 800564c:	4b29      	ldr	r3, [pc, #164]	; (80056f4 <_reclaim_reent+0xa8>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4283      	cmp	r3, r0
 8005652:	b570      	push	{r4, r5, r6, lr}
 8005654:	4604      	mov	r4, r0
 8005656:	d04b      	beq.n	80056f0 <_reclaim_reent+0xa4>
 8005658:	69c3      	ldr	r3, [r0, #28]
 800565a:	b143      	cbz	r3, 800566e <_reclaim_reent+0x22>
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d144      	bne.n	80056ec <_reclaim_reent+0xa0>
 8005662:	69e3      	ldr	r3, [r4, #28]
 8005664:	6819      	ldr	r1, [r3, #0]
 8005666:	b111      	cbz	r1, 800566e <_reclaim_reent+0x22>
 8005668:	4620      	mov	r0, r4
 800566a:	f000 f879 	bl	8005760 <_free_r>
 800566e:	6961      	ldr	r1, [r4, #20]
 8005670:	b111      	cbz	r1, 8005678 <_reclaim_reent+0x2c>
 8005672:	4620      	mov	r0, r4
 8005674:	f000 f874 	bl	8005760 <_free_r>
 8005678:	69e1      	ldr	r1, [r4, #28]
 800567a:	b111      	cbz	r1, 8005682 <_reclaim_reent+0x36>
 800567c:	4620      	mov	r0, r4
 800567e:	f000 f86f 	bl	8005760 <_free_r>
 8005682:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005684:	b111      	cbz	r1, 800568c <_reclaim_reent+0x40>
 8005686:	4620      	mov	r0, r4
 8005688:	f000 f86a 	bl	8005760 <_free_r>
 800568c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800568e:	b111      	cbz	r1, 8005696 <_reclaim_reent+0x4a>
 8005690:	4620      	mov	r0, r4
 8005692:	f000 f865 	bl	8005760 <_free_r>
 8005696:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005698:	b111      	cbz	r1, 80056a0 <_reclaim_reent+0x54>
 800569a:	4620      	mov	r0, r4
 800569c:	f000 f860 	bl	8005760 <_free_r>
 80056a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80056a2:	b111      	cbz	r1, 80056aa <_reclaim_reent+0x5e>
 80056a4:	4620      	mov	r0, r4
 80056a6:	f000 f85b 	bl	8005760 <_free_r>
 80056aa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80056ac:	b111      	cbz	r1, 80056b4 <_reclaim_reent+0x68>
 80056ae:	4620      	mov	r0, r4
 80056b0:	f000 f856 	bl	8005760 <_free_r>
 80056b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80056b6:	b111      	cbz	r1, 80056be <_reclaim_reent+0x72>
 80056b8:	4620      	mov	r0, r4
 80056ba:	f000 f851 	bl	8005760 <_free_r>
 80056be:	6a23      	ldr	r3, [r4, #32]
 80056c0:	b1b3      	cbz	r3, 80056f0 <_reclaim_reent+0xa4>
 80056c2:	4620      	mov	r0, r4
 80056c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80056c8:	4718      	bx	r3
 80056ca:	5949      	ldr	r1, [r1, r5]
 80056cc:	b941      	cbnz	r1, 80056e0 <_reclaim_reent+0x94>
 80056ce:	3504      	adds	r5, #4
 80056d0:	69e3      	ldr	r3, [r4, #28]
 80056d2:	2d80      	cmp	r5, #128	; 0x80
 80056d4:	68d9      	ldr	r1, [r3, #12]
 80056d6:	d1f8      	bne.n	80056ca <_reclaim_reent+0x7e>
 80056d8:	4620      	mov	r0, r4
 80056da:	f000 f841 	bl	8005760 <_free_r>
 80056de:	e7c0      	b.n	8005662 <_reclaim_reent+0x16>
 80056e0:	680e      	ldr	r6, [r1, #0]
 80056e2:	4620      	mov	r0, r4
 80056e4:	f000 f83c 	bl	8005760 <_free_r>
 80056e8:	4631      	mov	r1, r6
 80056ea:	e7ef      	b.n	80056cc <_reclaim_reent+0x80>
 80056ec:	2500      	movs	r5, #0
 80056ee:	e7ef      	b.n	80056d0 <_reclaim_reent+0x84>
 80056f0:	bd70      	pop	{r4, r5, r6, pc}
 80056f2:	bf00      	nop
 80056f4:	20000088 	.word	0x20000088

080056f8 <__libc_init_array>:
 80056f8:	b570      	push	{r4, r5, r6, lr}
 80056fa:	4d0d      	ldr	r5, [pc, #52]	; (8005730 <__libc_init_array+0x38>)
 80056fc:	4c0d      	ldr	r4, [pc, #52]	; (8005734 <__libc_init_array+0x3c>)
 80056fe:	1b64      	subs	r4, r4, r5
 8005700:	10a4      	asrs	r4, r4, #2
 8005702:	2600      	movs	r6, #0
 8005704:	42a6      	cmp	r6, r4
 8005706:	d109      	bne.n	800571c <__libc_init_array+0x24>
 8005708:	4d0b      	ldr	r5, [pc, #44]	; (8005738 <__libc_init_array+0x40>)
 800570a:	4c0c      	ldr	r4, [pc, #48]	; (800573c <__libc_init_array+0x44>)
 800570c:	f000 f880 	bl	8005810 <_init>
 8005710:	1b64      	subs	r4, r4, r5
 8005712:	10a4      	asrs	r4, r4, #2
 8005714:	2600      	movs	r6, #0
 8005716:	42a6      	cmp	r6, r4
 8005718:	d105      	bne.n	8005726 <__libc_init_array+0x2e>
 800571a:	bd70      	pop	{r4, r5, r6, pc}
 800571c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005720:	4798      	blx	r3
 8005722:	3601      	adds	r6, #1
 8005724:	e7ee      	b.n	8005704 <__libc_init_array+0xc>
 8005726:	f855 3b04 	ldr.w	r3, [r5], #4
 800572a:	4798      	blx	r3
 800572c:	3601      	adds	r6, #1
 800572e:	e7f2      	b.n	8005716 <__libc_init_array+0x1e>
 8005730:	080058e4 	.word	0x080058e4
 8005734:	080058e4 	.word	0x080058e4
 8005738:	080058e4 	.word	0x080058e4
 800573c:	080058e8 	.word	0x080058e8

08005740 <__retarget_lock_acquire_recursive>:
 8005740:	4770      	bx	lr

08005742 <__retarget_lock_release_recursive>:
 8005742:	4770      	bx	lr

08005744 <memcpy>:
 8005744:	440a      	add	r2, r1
 8005746:	4291      	cmp	r1, r2
 8005748:	f100 33ff 	add.w	r3, r0, #4294967295
 800574c:	d100      	bne.n	8005750 <memcpy+0xc>
 800574e:	4770      	bx	lr
 8005750:	b510      	push	{r4, lr}
 8005752:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005756:	f803 4f01 	strb.w	r4, [r3, #1]!
 800575a:	4291      	cmp	r1, r2
 800575c:	d1f9      	bne.n	8005752 <memcpy+0xe>
 800575e:	bd10      	pop	{r4, pc}

08005760 <_free_r>:
 8005760:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005762:	2900      	cmp	r1, #0
 8005764:	d044      	beq.n	80057f0 <_free_r+0x90>
 8005766:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800576a:	9001      	str	r0, [sp, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	f1a1 0404 	sub.w	r4, r1, #4
 8005772:	bfb8      	it	lt
 8005774:	18e4      	addlt	r4, r4, r3
 8005776:	f000 f83f 	bl	80057f8 <__malloc_lock>
 800577a:	4a1e      	ldr	r2, [pc, #120]	; (80057f4 <_free_r+0x94>)
 800577c:	9801      	ldr	r0, [sp, #4]
 800577e:	6813      	ldr	r3, [r2, #0]
 8005780:	b933      	cbnz	r3, 8005790 <_free_r+0x30>
 8005782:	6063      	str	r3, [r4, #4]
 8005784:	6014      	str	r4, [r2, #0]
 8005786:	b003      	add	sp, #12
 8005788:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800578c:	f000 b83a 	b.w	8005804 <__malloc_unlock>
 8005790:	42a3      	cmp	r3, r4
 8005792:	d908      	bls.n	80057a6 <_free_r+0x46>
 8005794:	6825      	ldr	r5, [r4, #0]
 8005796:	1961      	adds	r1, r4, r5
 8005798:	428b      	cmp	r3, r1
 800579a:	bf01      	itttt	eq
 800579c:	6819      	ldreq	r1, [r3, #0]
 800579e:	685b      	ldreq	r3, [r3, #4]
 80057a0:	1949      	addeq	r1, r1, r5
 80057a2:	6021      	streq	r1, [r4, #0]
 80057a4:	e7ed      	b.n	8005782 <_free_r+0x22>
 80057a6:	461a      	mov	r2, r3
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	b10b      	cbz	r3, 80057b0 <_free_r+0x50>
 80057ac:	42a3      	cmp	r3, r4
 80057ae:	d9fa      	bls.n	80057a6 <_free_r+0x46>
 80057b0:	6811      	ldr	r1, [r2, #0]
 80057b2:	1855      	adds	r5, r2, r1
 80057b4:	42a5      	cmp	r5, r4
 80057b6:	d10b      	bne.n	80057d0 <_free_r+0x70>
 80057b8:	6824      	ldr	r4, [r4, #0]
 80057ba:	4421      	add	r1, r4
 80057bc:	1854      	adds	r4, r2, r1
 80057be:	42a3      	cmp	r3, r4
 80057c0:	6011      	str	r1, [r2, #0]
 80057c2:	d1e0      	bne.n	8005786 <_free_r+0x26>
 80057c4:	681c      	ldr	r4, [r3, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	6053      	str	r3, [r2, #4]
 80057ca:	440c      	add	r4, r1
 80057cc:	6014      	str	r4, [r2, #0]
 80057ce:	e7da      	b.n	8005786 <_free_r+0x26>
 80057d0:	d902      	bls.n	80057d8 <_free_r+0x78>
 80057d2:	230c      	movs	r3, #12
 80057d4:	6003      	str	r3, [r0, #0]
 80057d6:	e7d6      	b.n	8005786 <_free_r+0x26>
 80057d8:	6825      	ldr	r5, [r4, #0]
 80057da:	1961      	adds	r1, r4, r5
 80057dc:	428b      	cmp	r3, r1
 80057de:	bf04      	itt	eq
 80057e0:	6819      	ldreq	r1, [r3, #0]
 80057e2:	685b      	ldreq	r3, [r3, #4]
 80057e4:	6063      	str	r3, [r4, #4]
 80057e6:	bf04      	itt	eq
 80057e8:	1949      	addeq	r1, r1, r5
 80057ea:	6021      	streq	r1, [r4, #0]
 80057ec:	6054      	str	r4, [r2, #4]
 80057ee:	e7ca      	b.n	8005786 <_free_r+0x26>
 80057f0:	b003      	add	sp, #12
 80057f2:	bd30      	pop	{r4, r5, pc}
 80057f4:	20004c6c 	.word	0x20004c6c

080057f8 <__malloc_lock>:
 80057f8:	4801      	ldr	r0, [pc, #4]	; (8005800 <__malloc_lock+0x8>)
 80057fa:	f7ff bfa1 	b.w	8005740 <__retarget_lock_acquire_recursive>
 80057fe:	bf00      	nop
 8005800:	20004c68 	.word	0x20004c68

08005804 <__malloc_unlock>:
 8005804:	4801      	ldr	r0, [pc, #4]	; (800580c <__malloc_unlock+0x8>)
 8005806:	f7ff bf9c 	b.w	8005742 <__retarget_lock_release_recursive>
 800580a:	bf00      	nop
 800580c:	20004c68 	.word	0x20004c68

08005810 <_init>:
 8005810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005812:	bf00      	nop
 8005814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005816:	bc08      	pop	{r3}
 8005818:	469e      	mov	lr, r3
 800581a:	4770      	bx	lr

0800581c <_fini>:
 800581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581e:	bf00      	nop
 8005820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005822:	bc08      	pop	{r3}
 8005824:	469e      	mov	lr, r3
 8005826:	4770      	bx	lr
